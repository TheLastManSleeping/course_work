        -:    0:Source:/home/Arter/ABC2/Google_tests/lib/googletest/src/gtest.cc
        -:    0:Graph:/home/Arter/ABC2/Google_tests/lib/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/Arter/ABC2/Google_tests/lib/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    1:// Copyright 2005, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30://
        -:   31:// The Google C++ Testing and Mocking Framework (Google Test)
        -:   32:
        -:   33:#include "gtest/gtest.h"
        -:   34:#include "gtest/internal/custom/gtest.h"
        -:   35:#include "gtest/gtest-spi.h"
        -:   36:
        -:   37:#include <ctype.h>
        -:   38:#include <stdarg.h>
        -:   39:#include <stdio.h>
        -:   40:#include <stdlib.h>
        -:   41:#include <time.h>
        -:   42:#include <wchar.h>
        -:   43:#include <wctype.h>
        -:   44:
        -:   45:#include <algorithm>
        -:   46:#include <chrono>  // NOLINT
        -:   47:#include <cmath>
        -:   48:#include <cstdint>
        -:   49:#include <iomanip>
        -:   50:#include <limits>
        -:   51:#include <list>
        -:   52:#include <map>
        -:   53:#include <ostream>  // NOLINT
        -:   54:#include <sstream>
        -:   55:#include <vector>
        -:   56:
        -:   57:#if GTEST_OS_LINUX
        -:   58:
        -:   59:# include <fcntl.h>  // NOLINT
        -:   60:# include <limits.h>  // NOLINT
        -:   61:# include <sched.h>  // NOLINT
        -:   62:// Declares vsnprintf().  This header is not available on Windows.
        -:   63:# include <strings.h>  // NOLINT
        -:   64:# include <sys/mman.h>  // NOLINT
        -:   65:# include <sys/time.h>  // NOLINT
        -:   66:# include <unistd.h>  // NOLINT
        -:   67:# include <string>
        -:   68:
        -:   69:#elif GTEST_OS_ZOS
        -:   70:# include <sys/time.h>  // NOLINT
        -:   71:
        -:   72:// On z/OS we additionally need strings.h for strcasecmp.
        -:   73:# include <strings.h>  // NOLINT
        -:   74:
        -:   75:#elif GTEST_OS_WINDOWS_MOBILE  // We are on Windows CE.
        -:   76:
        -:   77:# include <windows.h>  // NOLINT
        -:   78:# undef min
        -:   79:
        -:   80:#elif GTEST_OS_WINDOWS  // We are on Windows proper.
        -:   81:
        -:   82:# include <windows.h>  // NOLINT
        -:   83:# undef min
        -:   84:
        -:   85:#ifdef _MSC_VER
        -:   86:# include <crtdbg.h>  // NOLINT
        -:   87:#endif
        -:   88:
        -:   89:# include <io.h>  // NOLINT
        -:   90:# include <sys/timeb.h>  // NOLINT
        -:   91:# include <sys/types.h>  // NOLINT
        -:   92:# include <sys/stat.h>  // NOLINT
        -:   93:
        -:   94:# if GTEST_OS_WINDOWS_MINGW
        -:   95:#  include <sys/time.h>  // NOLINT
        -:   96:# endif  // GTEST_OS_WINDOWS_MINGW
        -:   97:
        -:   98:#else
        -:   99:
        -:  100:// cpplint thinks that the header is already included, so we want to
        -:  101:// silence it.
        -:  102:# include <sys/time.h>  // NOLINT
        -:  103:# include <unistd.h>  // NOLINT
        -:  104:
        -:  105:#endif  // GTEST_OS_LINUX
        -:  106:
        -:  107:#if GTEST_HAS_EXCEPTIONS
        -:  108:# include <stdexcept>
        -:  109:#endif
        -:  110:
        -:  111:#if GTEST_CAN_STREAM_RESULTS_
        -:  112:# include <arpa/inet.h>  // NOLINT
        -:  113:# include <netdb.h>  // NOLINT
        -:  114:# include <sys/socket.h>  // NOLINT
        -:  115:# include <sys/types.h>  // NOLINT
        -:  116:#endif
        -:  117:
        -:  118:#include "src/gtest-internal-inl.h"
        -:  119:
        -:  120:#if GTEST_OS_WINDOWS
        -:  121:# define vsnprintf _vsnprintf
        -:  122:#endif  // GTEST_OS_WINDOWS
        -:  123:
        -:  124:#if GTEST_OS_MAC
        -:  125:#ifndef GTEST_OS_IOS
        -:  126:#include <crt_externs.h>
        -:  127:#endif
        -:  128:#endif
        -:  129:
        -:  130:#if GTEST_HAS_ABSL
        -:  131:#include "absl/debugging/failure_signal_handler.h"
        -:  132:#include "absl/debugging/stacktrace.h"
        -:  133:#include "absl/debugging/symbolize.h"
        -:  134:#include "absl/strings/str_cat.h"
        -:  135:#endif  // GTEST_HAS_ABSL
        -:  136:
        -:  137:namespace testing {
        -:  138:
        -:  139:using internal::CountIf;
        -:  140:using internal::ForEach;
        -:  141:using internal::GetElementOr;
        -:  142:using internal::Shuffle;
        -:  143:
        -:  144:// Constants.
        -:  145:
        -:  146:// A test whose test suite name or test name matches this filter is
        -:  147:// disabled and not run.
        -:  148:static const char kDisableTestFilter[] = "DISABLED_*:*/DISABLED_*";
        -:  149:
        -:  150:// A test suite whose name matches this filter is considered a death
        -:  151:// test suite and will be run before test suites whose name doesn't
        -:  152:// match this filter.
        -:  153:static const char kDeathTestSuiteFilter[] = "*DeathTest:*DeathTest/*";
        -:  154:
        -:  155:// A test filter that matches everything.
        -:  156:static const char kUniversalFilter[] = "*";
        -:  157:
        -:  158:// The default output format.
        -:  159:static const char kDefaultOutputFormat[] = "xml";
        -:  160:// The default output file.
        -:  161:static const char kDefaultOutputFile[] = "test_detail";
        -:  162:
        -:  163:// The environment variable name for the test shard index.
        -:  164:static const char kTestShardIndex[] = "GTEST_SHARD_INDEX";
        -:  165:// The environment variable name for the total number of test shards.
        -:  166:static const char kTestTotalShards[] = "GTEST_TOTAL_SHARDS";
        -:  167:// The environment variable name for the test shard status file.
        -:  168:static const char kTestShardStatusFile[] = "GTEST_SHARD_STATUS_FILE";
        -:  169:
        -:  170:namespace internal {
        -:  171:
        -:  172:// The text used in failure messages to indicate the start of the
        -:  173:// stack trace.
        -:  174:const char kStackTraceMarker[] = "\nStack trace:\n";
        -:  175:
        -:  176:// g_help_flag is true if and only if the --help flag or an equivalent form
        -:  177:// is specified on the command line.
        -:  178:bool g_help_flag = false;
        -:  179:
        -:  180:// Utilty function to Open File for Writing
    #####:  181:static FILE* OpenFileForWriting(const std::string& output_file) {
    #####:  182:  FILE* fileout = nullptr;
    #####:  183:  FilePath output_file_path(output_file);
    %%%%%:  183-block  0
    $$$$$:  183-block  1
    #####:  184:  FilePath output_dir(output_file_path.RemoveFileName());
    %%%%%:  184-block  0
    $$$$$:  184-block  1
        -:  185:
    #####:  186:  if (output_dir.CreateDirectoriesRecursively()) {
    %%%%%:  186-block  0
    %%%%%:  186-block  1
    #####:  187:    fileout = posix::FOpen(output_file.c_str(), "w");
    %%%%%:  187-block  0
    %%%%%:  187-block  1
        -:  188:  }
    #####:  189:  if (fileout == nullptr) {
    %%%%%:  189-block  0
    #####:  190:    GTEST_LOG_(FATAL) << "Unable to open file \"" << output_file << "\"";
    %%%%%:  190-block  0
    %%%%%:  190-block  1
    %%%%%:  190-block  2
    %%%%%:  190-block  3
    %%%%%:  190-block  4
    $$$$$:  190-block  5
    $$$$$:  190-block  6
        -:  191:  }
    #####:  192:  return fileout;
    %%%%%:  192-block  0
    %%%%%:  192-block  1
        -:  193:}
        -:  194:
        -:  195:}  // namespace internal
        -:  196:
        -:  197:// Bazel passes in the argument to '--test_filter' via the TESTBRIDGE_TEST_ONLY
        -:  198:// environment variable.
        1:  199:static const char* GetDefaultFilter() {
        -:  200:  const char* const testbridge_test_only =
        1:  201:      internal::posix::GetEnv("TESTBRIDGE_TEST_ONLY");
        1:  201-block  0
        1:  202:  if (testbridge_test_only != nullptr) {
    #####:  203:    return testbridge_test_only;
    %%%%%:  203-block  0
        -:  204:  }
        1:  205:  return kUniversalFilter;
        1:  205-block  0
        -:  206:}
        -:  207:
        -:  208:// Bazel passes in the argument to '--test_runner_fail_fast' via the
        -:  209:// TESTBRIDGE_TEST_RUNNER_FAIL_FAST environment variable.
        1:  210:static bool GetDefaultFailFast() {
        -:  211:  const char* const testbridge_test_runner_fail_fast =
        1:  212:      internal::posix::GetEnv("TESTBRIDGE_TEST_RUNNER_FAIL_FAST");
        1:  212-block  0
        1:  213:  if (testbridge_test_runner_fail_fast != nullptr) {
    #####:  214:    return strcmp(testbridge_test_runner_fail_fast, "1") == 0;
    %%%%%:  214-block  0
        -:  215:  }
        1:  216:  return false;
        1:  216-block  0
        -:  217:}
        -:  218:
        -:  219:GTEST_DEFINE_bool_(
        -:  220:    fail_fast, internal::BoolFromGTestEnv("fail_fast", GetDefaultFailFast()),
        -:  221:    "True if and only if a test failure should stop further test execution.");
        -:  222:
        -:  223:GTEST_DEFINE_bool_(
        -:  224:    also_run_disabled_tests,
        -:  225:    internal::BoolFromGTestEnv("also_run_disabled_tests", false),
        -:  226:    "Run disabled tests too, in addition to the tests normally being run.");
        -:  227:
        -:  228:GTEST_DEFINE_bool_(
        -:  229:    break_on_failure, internal::BoolFromGTestEnv("break_on_failure", false),
        -:  230:    "True if and only if a failed assertion should be a debugger "
        -:  231:    "break-point.");
        -:  232:
        -:  233:GTEST_DEFINE_bool_(catch_exceptions,
        -:  234:                   internal::BoolFromGTestEnv("catch_exceptions", true),
        -:  235:                   "True if and only if " GTEST_NAME_
        -:  236:                   " should catch exceptions and treat them as test failures.");
        -:  237:
        -:  238:GTEST_DEFINE_string_(
        -:  239:    color,
        -:  240:    internal::StringFromGTestEnv("color", "auto"),
        -:  241:    "Whether to use colors in the output.  Valid values: yes, no, "
        -:  242:    "and auto.  'auto' means to use colors if the output is "
        -:  243:    "being sent to a terminal and the TERM environment variable "
        -:  244:    "is set to a terminal type that supports colors.");
        -:  245:
        -:  246:GTEST_DEFINE_string_(
        -:  247:    filter,
        -:  248:    internal::StringFromGTestEnv("filter", GetDefaultFilter()),
        -:  249:    "A colon-separated list of glob (not regex) patterns "
        -:  250:    "for filtering the tests to run, optionally followed by a "
        -:  251:    "'-' and a : separated list of negative patterns (tests to "
        -:  252:    "exclude).  A test is run if it matches one of the positive "
        -:  253:    "patterns and does not match any of the negative patterns.");
        -:  254:
        -:  255:GTEST_DEFINE_bool_(
        -:  256:    install_failure_signal_handler,
        -:  257:    internal::BoolFromGTestEnv("install_failure_signal_handler", false),
        -:  258:    "If true and supported on the current platform, " GTEST_NAME_ " should "
        -:  259:    "install a signal handler that dumps debugging information when fatal "
        -:  260:    "signals are raised.");
        -:  261:
        -:  262:GTEST_DEFINE_bool_(list_tests, false,
        -:  263:                   "List all tests without running them.");
        -:  264:
        -:  265:// The net priority order after flag processing is thus:
        -:  266://   --gtest_output command line flag
        -:  267://   GTEST_OUTPUT environment variable
        -:  268://   XML_OUTPUT_FILE environment variable
        -:  269://   ''
        -:  270:GTEST_DEFINE_string_(
        -:  271:    output,
        -:  272:    internal::StringFromGTestEnv("output",
        -:  273:      internal::OutputFlagAlsoCheckEnvVar().c_str()),
        -:  274:    "A format (defaults to \"xml\" but can be specified to be \"json\"), "
        -:  275:    "optionally followed by a colon and an output file name or directory. "
        -:  276:    "A directory is indicated by a trailing pathname separator. "
        -:  277:    "Examples: \"xml:filename.xml\", \"xml::directoryname/\". "
        -:  278:    "If a directory is specified, output files will be created "
        -:  279:    "within that directory, with file-names based on the test "
        -:  280:    "executable's name and, if necessary, made unique by adding "
        -:  281:    "digits.");
        -:  282:
        -:  283:GTEST_DEFINE_bool_(
        -:  284:    brief, internal::BoolFromGTestEnv("brief", false),
        -:  285:    "True if only test failures should be displayed in text output.");
        -:  286:
        -:  287:GTEST_DEFINE_bool_(print_time, internal::BoolFromGTestEnv("print_time", true),
        -:  288:                   "True if and only if " GTEST_NAME_
        -:  289:                   " should display elapsed time in text output.");
        -:  290:
        -:  291:GTEST_DEFINE_bool_(print_utf8, internal::BoolFromGTestEnv("print_utf8", true),
        -:  292:                   "True if and only if " GTEST_NAME_
        -:  293:                   " prints UTF8 characters as text.");
        -:  294:
        -:  295:GTEST_DEFINE_int32_(
        -:  296:    random_seed,
        -:  297:    internal::Int32FromGTestEnv("random_seed", 0),
        -:  298:    "Random number seed to use when shuffling test orders.  Must be in range "
        -:  299:    "[1, 99999], or 0 to use a seed based on the current time.");
        -:  300:
        -:  301:GTEST_DEFINE_int32_(
        -:  302:    repeat,
        -:  303:    internal::Int32FromGTestEnv("repeat", 1),
        -:  304:    "How many times to repeat each test.  Specify a negative number "
        -:  305:    "for repeating forever.  Useful for shaking out flaky tests.");
        -:  306:
        -:  307:GTEST_DEFINE_bool_(show_internal_stack_frames, false,
        -:  308:                   "True if and only if " GTEST_NAME_
        -:  309:                   " should include internal stack frames when "
        -:  310:                   "printing test failure stack traces.");
        -:  311:
        -:  312:GTEST_DEFINE_bool_(shuffle, internal::BoolFromGTestEnv("shuffle", false),
        -:  313:                   "True if and only if " GTEST_NAME_
        -:  314:                   " should randomize tests' order on every run.");
        -:  315:
        -:  316:GTEST_DEFINE_int32_(
        -:  317:    stack_trace_depth,
        -:  318:    internal::Int32FromGTestEnv("stack_trace_depth", kMaxStackTraceDepth),
        -:  319:    "The maximum number of stack frames to print when an "
        -:  320:    "assertion fails.  The valid range is 0 through 100, inclusive.");
        -:  321:
        -:  322:GTEST_DEFINE_string_(
        -:  323:    stream_result_to,
        -:  324:    internal::StringFromGTestEnv("stream_result_to", ""),
        -:  325:    "This flag specifies the host name and the port number on which to stream "
        -:  326:    "test results. Example: \"localhost:555\". The flag is effective only on "
        -:  327:    "Linux.");
        -:  328:
        -:  329:GTEST_DEFINE_bool_(
        -:  330:    throw_on_failure,
        -:  331:    internal::BoolFromGTestEnv("throw_on_failure", false),
        -:  332:    "When this flag is specified, a failed assertion will throw an exception "
        -:  333:    "if exceptions are enabled or exit the program with a non-zero code "
        -:  334:    "otherwise. For use with an external test framework.");
        -:  335:
        -:  336:#if GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  337:GTEST_DEFINE_string_(
        -:  338:    flagfile,
        -:  339:    internal::StringFromGTestEnv("flagfile", ""),
        -:  340:    "This flag specifies the flagfile to read command-line flags from.");
        -:  341:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -:  342:
        -:  343:namespace internal {
        -:  344:
        -:  345:// Generates a random number from [0, range), using a Linear
        -:  346:// Congruential Generator (LCG).  Crashes if 'range' is 0 or greater
        -:  347:// than kMaxRange.
    #####:  348:uint32_t Random::Generate(uint32_t range) {
        -:  349:  // These constants are the same as are used in glibc's rand(3).
        -:  350:  // Use wider types than necessary to prevent unsigned overflow diagnostics.
    #####:  351:  state_ = static_cast<uint32_t>(1103515245ULL*state_ + 12345U) % kMaxRange;
        -:  352:
    #####:  353:  GTEST_CHECK_(range > 0)
    %%%%%:  353-block  0
    %%%%%:  353-block  1
    %%%%%:  353-block  2
    $$$$$:  353-block  3
    $$$$$:  353-block  4
    #####:  354:      << "Cannot generate a number in the range [0, 0).";
    %%%%%:  354-block  0
    #####:  355:  GTEST_CHECK_(range <= kMaxRange)
    %%%%%:  355-block  0
    %%%%%:  355-block  1
    %%%%%:  355-block  2
    $$$$$:  355-block  3
    #####:  356:      << "Generation of a number in [0, " << range << ") was requested, "
    %%%%%:  356-block  0
    %%%%%:  356-block  1
    #####:  357:      << "but this can only generate numbers in [0, " << kMaxRange << ").";
    %%%%%:  357-block  0
    %%%%%:  357-block  1
    %%%%%:  357-block  2
    %%%%%:  357-block  3
        -:  358:
        -:  359:  // Converting via modulus introduces a bit of downward bias, but
        -:  360:  // it's simple, and a linear congruential generator isn't too good
        -:  361:  // to begin with.
    #####:  362:  return state_ % range;
    %%%%%:  362-block  0
    %%%%%:  362-block  1
        -:  363:}
        -:  364:
        -:  365:// GTestIsInitialized() returns true if and only if the user has initialized
        -:  366:// Google Test.  Useful for catching the user mistake of not initializing
        -:  367:// Google Test before calling RUN_ALL_TESTS().
        2:  368:static bool GTestIsInitialized() { return GetArgvs().size() > 0; }
        2:  368-block  0
        -:  369:
        -:  370:// Iterates over a vector of TestSuites, keeping a running sum of the
        -:  371:// results of calling a given int-returning method on each.
        -:  372:// Returns the sum.
        5:  373:static int SumOverTestSuiteList(const std::vector<TestSuite*>& case_list,
        -:  374:                                int (TestSuite::*method)() const) {
        5:  375:  int sum = 0;
       10:  376:  for (size_t i = 0; i < case_list.size(); i++) {
        5:  376-block  0
       10:  376-block  1
       5*:  377:    sum += (case_list[i]->*method)();
        5:  377-block  0
    %%%%%:  377-block  1
        5:  377-block  2
        5:  377-block  3
        -:  378:  }
        5:  379:  return sum;
        5:  379-block  0
        -:  380:}
        -:  381:
        -:  382:// Returns true if and only if the test suite passed.
    #####:  383:static bool TestSuitePassed(const TestSuite* test_suite) {
    #####:  384:  return test_suite->should_run() && test_suite->Passed();
    %%%%%:  384-block  0
    %%%%%:  384-block  1
    %%%%%:  384-block  2
    %%%%%:  384-block  3
    %%%%%:  384-block  4
        -:  385:}
        -:  386:
        -:  387:// Returns true if and only if the test suite failed.
        2:  388:static bool TestSuiteFailed(const TestSuite* test_suite) {
       2*:  389:  return test_suite->should_run() && test_suite->Failed();
        2:  389-block  0
        2:  389-block  1
    %%%%%:  389-block  2
        2:  389-block  3
        2:  389-block  4
        -:  390:}
        -:  391:
        -:  392:// Returns true if and only if test_suite contains at least one test that
        -:  393:// should run.
        2:  394:static bool ShouldRunTestSuite(const TestSuite* test_suite) {
        2:  395:  return test_suite->should_run();
        2:  395-block  0
        -:  396:}
        -:  397:
        -:  398:// AssertHelper constructor.
    #####:  399:AssertHelper::AssertHelper(TestPartResult::Type type,
        -:  400:                           const char* file,
        -:  401:                           int line,
    #####:  402:                           const char* message)
    #####:  403:    : data_(new AssertHelperData(type, file, line, message)) {
    %%%%%:  403-block  0
    $$$$$:  403-block  1
    #####:  404:}
    %%%%%:  404-block  0
        -:  405:
    #####:  406:AssertHelper::~AssertHelper() {
    #####:  407:  delete data_;
    %%%%%:  407-block  0
    %%%%%:  407-block  1
    #####:  408:}
        -:  409:
        -:  410:// Message assignment, for assertion streaming support.
    #####:  411:void AssertHelper::operator=(const Message& message) const {
        -:  412:  UnitTest::GetInstance()->
    #####:  413:    AddTestPartResult(data_->type, data_->file, data_->line,
    %%%%%:  413-block  0
    %%%%%:  413-block  1
    #####:  414:                      AppendUserMessage(data_->message, message),
    %%%%%:  414-block  0
    $$$$$:  414-block  1
    $$$$$:  414-block  2
        -:  415:                      UnitTest::GetInstance()->impl()
    #####:  416:                      ->CurrentOsStackTraceExceptTop(1)
    $$$$$:  416-block  0
        -:  417:                      // Skips the stack frame for this function itself.
        -:  418:                      );  // NOLINT
    #####:  419:}
        -:  420:
        -:  421:namespace {
        -:  422:
        -:  423:// When TEST_P is found without a matching INSTANTIATE_TEST_SUITE_P
        -:  424:// to creates test cases for it, a syntetic test case is
        -:  425:// inserted to report ether an error or a log message.
        -:  426://
        -:  427:// This configuration bit will likely be removed at some point.
        -:  428:constexpr bool kErrorOnUninstantiatedParameterizedTest = true;
        -:  429:constexpr bool kErrorOnUninstantiatedTypeParameterizedTest = true;
        -:  430:
        -:  431:// A test that fails at a given file/line location with a given message.
        -:  432:class FailureTest : public Test {
        -:  433: public:
    #####:  434:  explicit FailureTest(const CodeLocation& loc, std::string error_message,
        -:  435:                       bool as_error)
    #####:  436:      : loc_(loc),
    #####:  437:        error_message_(std::move(error_message)),
    #####:  438:        as_error_(as_error) {}
    %%%%%:  438-block  0
    %%%%%:  438-block  1
    $$$$$:  438-block  2
        -:  439:
    #####:  440:  void TestBody() override {
    #####:  441:    if (as_error_) {
    %%%%%:  441-block  0
    #####:  442:      AssertHelper(TestPartResult::kNonFatalFailure, loc_.file.c_str(),
    %%%%%:  442-block  0
    $$$$$:  442-block  1
    $$$$$:  442-block  2
    #####:  443:                   loc_.line, "") = Message() << error_message_;
    %%%%%:  443-block  0
    %%%%%:  443-block  1
    %%%%%:  443-block  2
    $$$$$:  443-block  3
        -:  444:    } else {
    #####:  445:      std::cout << error_message_ << std::endl;
    %%%%%:  445-block  0
        -:  446:    }
    #####:  447:  }
    %%%%%:  447-block  0
        -:  448:
        -:  449: private:
        -:  450:  const CodeLocation loc_;
        -:  451:  const std::string error_message_;
        -:  452:  const bool as_error_;
        -:  453:};
        -:  454:
        -:  455:
        -:  456:}  // namespace
        -:  457:
        1:  458:std::set<std::string>* GetIgnoredParameterizedTestSuites() {
        1:  459:  return UnitTest::GetInstance()->impl()->ignored_parameterized_test_suites();
        1:  459-block  0
        -:  460:}
        -:  461:
        -:  462:// Add a given test_suit to the list of them allow to go un-instantiated.
    #####:  463:MarkAsIgnored::MarkAsIgnored(const char* test_suite) {
    #####:  464:  GetIgnoredParameterizedTestSuites()->insert(test_suite);
    %%%%%:  464-block  0
    %%%%%:  464-block  1
    %%%%%:  464-block  2
    $$$$$:  464-block  3
    $$$$$:  464-block  4
    #####:  465:}
        -:  466:
        -:  467:// If this parameterized test suite has no instantiations (and that
        -:  468:// has not been marked as okay), emit a test case reporting that.
    #####:  469:void InsertSyntheticTestCase(const std::string& name, CodeLocation location,
        -:  470:                             bool has_test_p) {
    #####:  471:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
    %%%%%:  471-block  0
    #####:  472:  if (ignored.find(name) != ignored.end()) return;
    %%%%%:  472-block  0
    %%%%%:  472-block  1
    %%%%%:  472-block  2
    $$$$$:  472-block  3
        -:  473:
    #####:  474:  const char kMissingInstantiation[] =  //
        -:  475:      " is defined via TEST_P, but never instantiated. None of the test cases "
        -:  476:      "will run. Either no INSTANTIATE_TEST_SUITE_P is provided or the only "
        -:  477:      "ones provided expand to nothing."
        -:  478:      "\n\n"
        -:  479:      "Ideally, TEST_P definitions should only ever be included as part of "
        -:  480:      "binaries that intend to use them. (As opposed to, for example, being "
        -:  481:      "placed in a library that may be linked in to get other utilities.)";
        -:  482:
    #####:  483:  const char kMissingTestCase[] =  //
        -:  484:      " is instantiated via INSTANTIATE_TEST_SUITE_P, but no tests are "
        -:  485:      "defined via TEST_P . No test cases will run."
        -:  486:      "\n\n"
        -:  487:      "Ideally, INSTANTIATE_TEST_SUITE_P should only ever be invoked from "
        -:  488:      "code that always depend on code that provides TEST_P. Failing to do "
        -:  489:      "so is often an indication of dead code, e.g. the last TEST_P was "
        -:  490:      "removed but the rest got left behind.";
        -:  491:
        -:  492:  std::string message =
    #####:  493:      "Parameterized test suite " + name +
    %%%%%:  493-block  0
    $$$$$:  493-block  1
    $$$$$:  493-block  2
    #####:  494:      (has_test_p ? kMissingInstantiation : kMissingTestCase) +
    %%%%%:  494-block  0
    %%%%%:  494-block  1
    %%%%%:  494-block  2
    %%%%%:  494-block  3
    $$$$$:  494-block  4
        -:  495:      "\n\n"
        -:  496:      "To suppress this error for this test suite, insert the following line "
        -:  497:      "(in a non-header) in the namespace it is defined in:"
        -:  498:      "\n\n"
    #####:  499:      "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" + name + ");";
    %%%%%:  499-block  0
    %%%%%:  499-block  1
    %%%%%:  499-block  2
    $$$$$:  499-block  3
    $$$$$:  499-block  4
        -:  500:
    #####:  501:  std::string full_name = "UninstantiatedParameterizedTestSuite<" + name + ">";
    %%%%%:  501-block  0
    $$$$$:  501-block  1
    $$$$$:  501-block  2
    #####:  502:  RegisterTest(  //
    %%%%%:  502-block  0
    %%%%%:  502-block  1
    %%%%%:  502-block  2
    $$$$$:  502-block  3
    $$$$$:  502-block  4
        -:  503:      "GoogleTestVerification", full_name.c_str(),
        -:  504:      nullptr,  // No type parameter.
        -:  505:      nullptr,  // No value parameter.
    #####:  506:      location.file.c_str(), location.line, [message, location] {
    #####:  507:        return new FailureTest(location, message,
    #####:  508:                               kErrorOnUninstantiatedParameterizedTest);
    %%%%%:  508-block  0
    %%%%%:  508-block  1
    %%%%%:  508-block  2
    %%%%%:  508-block  3
    $$$$$:  508-block  4
    $$$$$:  508-block  5
        -:  509:      });
        -:  510:}
        -:  511:
    #####:  512:void RegisterTypeParameterizedTestSuite(const char* test_suite_name,
        -:  513:                                        CodeLocation code_location) {
    #####:  514:  GetUnitTestImpl()->type_parameterized_test_registry().RegisterTestSuite(
    %%%%%:  514-block  0
    #####:  515:      test_suite_name, code_location);
    %%%%%:  515-block  0
    $$$$$:  515-block  1
    #####:  516:}
        -:  517:
    #####:  518:void RegisterTypeParameterizedTestSuiteInstantiation(const char* case_name) {
        -:  519:  GetUnitTestImpl()
    #####:  520:      ->type_parameterized_test_registry()
    %%%%%:  520-block  0
    #####:  521:      .RegisterInstantiation(case_name);
    #####:  522:}
        -:  523:
    #####:  524:void TypeParameterizedTestSuiteRegistry::RegisterTestSuite(
        -:  525:    const char* test_suite_name, CodeLocation code_location) {
    #####:  526:  suites_.emplace(std::string(test_suite_name),
    %%%%%:  526-block  0
    %%%%%:  526-block  1
    $$$$$:  526-block  2
    $$$$$:  526-block  3
    #####:  527:                 TypeParameterizedTestSuiteInfo(code_location));
    %%%%%:  527-block  0
    %%%%%:  527-block  1
    $$$$$:  527-block  2
    $$$$$:  527-block  3
    $$$$$:  527-block  4
    #####:  528:}
        -:  529:
    #####:  530:void TypeParameterizedTestSuiteRegistry::RegisterInstantiation(
        -:  531:        const char* test_suite_name) {
    #####:  532:  auto it = suites_.find(std::string(test_suite_name));
    %%%%%:  532-block  0
    %%%%%:  532-block  1
    %%%%%:  532-block  2
    $$$$$:  532-block  3
    $$$$$:  532-block  4
    #####:  533:  if (it != suites_.end()) {
    #####:  534:    it->second.instantiated = true;
    %%%%%:  534-block  0
        -:  535:  } else {
    #####:  536:    GTEST_LOG_(ERROR) << "Unknown type parameterized test suit '"
    %%%%%:  536-block  0
    %%%%%:  536-block  1
    %%%%%:  536-block  2
    $$$$$:  536-block  3
    $$$$$:  536-block  4
    #####:  537:                      << test_suite_name << "'";
    %%%%%:  537-block  0
    %%%%%:  537-block  1
        -:  538:  }
    #####:  539:}
    %%%%%:  539-block  0
        -:  540:
        1:  541:void TypeParameterizedTestSuiteRegistry::CheckForInstantiations() {
        1:  542:  const auto& ignored = *GetIgnoredParameterizedTestSuites();
        1:  542-block  0
       1*:  543:  for (const auto& testcase : suites_) {
        1:  543-block  0
    %%%%%:  543-block  1
    %%%%%:  543-block  2
    #####:  544:    if (testcase.second.instantiated) continue;
    %%%%%:  544-block  0
    %%%%%:  544-block  1
    #####:  545:    if (ignored.find(testcase.first) != ignored.end()) continue;
    %%%%%:  545-block  0
    %%%%%:  545-block  1
    %%%%%:  545-block  2
    $$$$$:  545-block  3
        -:  546:
        -:  547:    std::string message =
    #####:  548:        "Type parameterized test suite " + testcase.first +
    $$$$$:  548-block  0
    $$$$$:  548-block  1
        -:  549:        " is defined via REGISTER_TYPED_TEST_SUITE_P, but never instantiated "
        -:  550:        "via INSTANTIATE_TYPED_TEST_SUITE_P. None of the test cases will run."
        -:  551:        "\n\n"
        -:  552:        "Ideally, TYPED_TEST_P definitions should only ever be included as "
        -:  553:        "part of binaries that intend to use them. (As opposed to, for "
        -:  554:        "example, being placed in a library that may be linked in to get other "
        -:  555:        "utilities.)"
        -:  556:        "\n\n"
        -:  557:        "To suppress this error for this test suite, insert the following line "
        -:  558:        "(in a non-header) in the namespace it is defined in:"
        -:  559:        "\n\n"
    #####:  560:        "GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(" +
    %%%%%:  560-block  0
    $$$$$:  560-block  1
    #####:  561:        testcase.first + ");";
    %%%%%:  561-block  0
    %%%%%:  561-block  1
    %%%%%:  561-block  2
    $$$$$:  561-block  3
        -:  562:
        -:  563:    std::string full_name =
    #####:  564:        "UninstantiatedTypeParameterizedTestSuite<" + testcase.first + ">";
    %%%%%:  564-block  0
    $$$$$:  564-block  1
    $$$$$:  564-block  2
    #####:  565:    RegisterTest(  //
    %%%%%:  565-block  0
    %%%%%:  565-block  1
    $$$$$:  565-block  2
    $$$$$:  565-block  3
        -:  566:        "GoogleTestVerification", full_name.c_str(),
        -:  567:        nullptr,  // No type parameter.
        -:  568:        nullptr,  // No value parameter.
        -:  569:        testcase.second.code_location.file.c_str(),
    #####:  570:        testcase.second.code_location.line, [message, testcase] {
    %%%%%:  570-block  0
    #####:  571:          return new FailureTest(testcase.second.code_location, message,
    #####:  572:                                 kErrorOnUninstantiatedTypeParameterizedTest);
    %%%%%:  572-block  0
    %%%%%:  572-block  1
    %%%%%:  572-block  2
    %%%%%:  572-block  3
    $$$$$:  572-block  4
    $$$$$:  572-block  5
        -:  573:        });
        -:  574:  }
        1:  575:}
        1:  575-block  0
        -:  576:
        -:  577:// A copy of all command line arguments.  Set by InitGoogleTest().
        -:  578:static ::std::vector<std::string> g_argvs;
        -:  579:
        2:  580:::std::vector<std::string> GetArgvs() {
        -:  581:#if defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  582:  // GTEST_CUSTOM_GET_ARGVS_() may return a container of std::string or
        -:  583:  // ::string. This code converts it to the appropriate type.
        -:  584:  const auto& custom = GTEST_CUSTOM_GET_ARGVS_();
        -:  585:  return ::std::vector<std::string>(custom.begin(), custom.end());
        -:  586:#else   // defined(GTEST_CUSTOM_GET_ARGVS_)
        2:  587:  return g_argvs;
        2:  587-block  0
        -:  588:#endif  // defined(GTEST_CUSTOM_GET_ARGVS_)
        -:  589:}
        -:  590:
        -:  591:// Returns the current application's name, removing directory path if that
        -:  592:// is present.
    #####:  593:FilePath GetCurrentExecutableName() {
    #####:  594:  FilePath result;
    %%%%%:  594-block  0
    %%%%%:  594-block  1
    $$$$$:  594-block  2
        -:  595:
        -:  596:#if GTEST_OS_WINDOWS || GTEST_OS_OS2
        -:  597:  result.Set(FilePath(GetArgvs()[0]).RemoveExtension("exe"));
        -:  598:#else
    #####:  599:  result.Set(FilePath(GetArgvs()[0]));
    %%%%%:  599-block  0
    %%%%%:  599-block  1
    %%%%%:  599-block  2
    %%%%%:  599-block  3
    $$$$$:  599-block  4
    $$$$$:  599-block  5
    $$$$$:  599-block  6
    $$$$$:  599-block  7
        -:  600:#endif  // GTEST_OS_WINDOWS
        -:  601:
    #####:  602:  return result.RemoveDirectoryName();
    %%%%%:  602-block  0
        -:  603:}
        -:  604:
        -:  605:// Functions for processing the gtest_output flag.
        -:  606:
        -:  607:// Returns the output format, or "" for normal printed output.
        1:  608:std::string UnitTestOptions::GetOutputFormat() {
        1:  609:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
        1:  609-block  0
        1:  610:  const char* const colon = strchr(gtest_output_flag, ':');
        -:  611:  return (colon == nullptr)
        1:  612:             ? std::string(gtest_output_flag)
        1:  612-block  0
        -:  613:             : std::string(gtest_output_flag,
       3*:  614:                           static_cast<size_t>(colon - gtest_output_flag));
    %%%%%:  614-block  0
        1:  614-block  1
        -:  615:}
        -:  616:
        -:  617:// Returns the name of the requested output file, or the default if none
        -:  618:// was explicitly specified.
    #####:  619:std::string UnitTestOptions::GetAbsolutePathToOutputFile() {
    #####:  620:  const char* const gtest_output_flag = GTEST_FLAG(output).c_str();
    %%%%%:  620-block  0
        -:  621:
    #####:  622:  std::string format = GetOutputFormat();
    %%%%%:  622-block  0
    $$$$$:  622-block  1
    #####:  623:  if (format.empty())
    %%%%%:  623-block  0
    #####:  624:    format = std::string(kDefaultOutputFormat);
    %%%%%:  624-block  0
    %%%%%:  624-block  1
        -:  625:
    #####:  626:  const char* const colon = strchr(gtest_output_flag, ':');
    #####:  627:  if (colon == nullptr)
    %%%%%:  627-block  0
    #####:  628:    return internal::FilePath::MakeFileName(
    %%%%%:  628-block  0
    $$$$$:  628-block  1
    $$$$$:  628-block  2
    #####:  629:        internal::FilePath(
    $$$$$:  629-block  0
    $$$$$:  629-block  1
    #####:  630:            UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  630-block  0
    %%%%%:  630-block  1
    %%%%%:  630-block  2
    $$$$$:  630-block  3
    $$$$$:  630-block  4
    #####:  631:        internal::FilePath(kDefaultOutputFile), 0,
    %%%%%:  631-block  0
    $$$$$:  631-block  1
    $$$$$:  631-block  2
    $$$$$:  631-block  3
    $$$$$:  631-block  4
    #####:  632:        format.c_str()).string();
    %%%%%:  632-block  0
    %%%%%:  632-block  1
    %%%%%:  632-block  2
        -:  633:
    #####:  634:  internal::FilePath output_name(colon + 1);
    %%%%%:  634-block  0
    %%%%%:  634-block  1
    %%%%%:  634-block  2
    $$$$$:  634-block  3
    $$$$$:  634-block  4
    #####:  635:  if (!output_name.IsAbsolutePath())
    #####:  636:    output_name = internal::FilePath::ConcatPaths(
    %%%%%:  636-block  0
    $$$$$:  636-block  1
    $$$$$:  636-block  2
    #####:  637:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
    %%%%%:  637-block  0
    %%%%%:  637-block  1
    %%%%%:  637-block  2
    $$$$$:  637-block  3
    $$$$$:  637-block  4
    $$$$$:  637-block  5
    $$$$$:  637-block  6
    #####:  638:        internal::FilePath(colon + 1));
    %%%%%:  638-block  0
    %%%%%:  638-block  1
    %%%%%:  638-block  2
    %%%%%:  638-block  3
    $$$$$:  638-block  4
    $$$$$:  638-block  5
    $$$$$:  638-block  6
    $$$$$:  638-block  7
        -:  639:
    #####:  640:  if (!output_name.IsDirectory())
    %%%%%:  640-block  0
    #####:  641:    return output_name.string();
    %%%%%:  641-block  0
        -:  642:
        -:  643:  internal::FilePath result(internal::FilePath::GenerateUniqueFileName(
    #####:  644:      output_name, internal::GetCurrentExecutableName(),
    $$$$$:  644-block  0
    #####:  645:      GetOutputFormat().c_str()));
    %%%%%:  645-block  0
    %%%%%:  645-block  1
    %%%%%:  645-block  2
    %%%%%:  645-block  3
    $$$$$:  645-block  4
    $$$$$:  645-block  5
    #####:  646:  return result.string();
        -:  647:}
        -:  648:
        -:  649:// Returns true if and only if the wildcard pattern matches the string.
        -:  650:// The first ':' or '\0' character in pattern marks the end of it.
        -:  651://
        -:  652:// This recursive algorithm isn't very efficient, but is clear and
        -:  653:// works well enough for matching test names, which are short.
      921:  654:bool UnitTestOptions::PatternMatchesString(const char *pattern,
        -:  655:                                           const char *str) {
      921:  656:  switch (*pattern) {
      921:  656-block  0
       24:  657:    case '\0':
        -:  658:    case ':':  // Either ':' or '\0' marks the end of the pattern.
       24:  659:      return *str == '\0';
       24:  659-block  0
    #####:  660:    case '?':  // Matches any single character.
    #####:  661:      return *str != '\0' && PatternMatchesString(pattern + 1, str + 1);
    %%%%%:  661-block  0
    %%%%%:  661-block  1
    %%%%%:  661-block  2
    %%%%%:  661-block  3
    %%%%%:  661-block  4
      578:  662:    case '*':  // Matches any string (possibly empty) of characters.
      885:  663:      return (*str != '\0' && PatternMatchesString(pattern, str + 1)) ||
      578:  663-block  0
      540:  663-block  1
      283:  663-block  2
      295:  663-block  3
      885:  664:          PatternMatchesString(pattern + 1, str);
      307:  664-block  0
      578:  664-block  1
      319:  665:    default:  // Non-special character.  Matches itself.
     319*:  666:      return *pattern == *str &&
      319:  666-block  0
    %%%%%:  666-block  1
      319:  666-block  2
     319*:  667:          PatternMatchesString(pattern + 1, str + 1);
    %%%%%:  667-block  0
      319:  667-block  1
        -:  668:  }
        -:  669:}
        -:  670:
       49:  671:bool UnitTestOptions::MatchesFilter(
        -:  672:    const std::string& name, const char* filter) {
       49:  673:  const char *cur_pattern = filter;
       49:  673-block  0
        -:  674:  for (;;) {
       74:  675:    if (PatternMatchesString(cur_pattern, name.c_str())) {
       74:  675-block  0
       12:  676:      return true;
       12:  676-block  0
        -:  677:    }
        -:  678:
        -:  679:    // Finds the next pattern in the filter.
       62:  680:    cur_pattern = strchr(cur_pattern, ':');
        -:  681:
        -:  682:    // Returns if no more pattern can be found.
       62:  683:    if (cur_pattern == nullptr) {
       62:  683-block  0
       37:  684:      return false;
       37:  684-block  0
        -:  685:    }
        -:  686:
        -:  687:    // Skips the pattern separater (the ':' character).
       25:  688:    cur_pattern++;
       25:  688-block  0
        -:  689:  }
        -:  690:}
        -:  691:
        -:  692:// Returns true if and only if the user-specified filter matches the test
        -:  693:// suite name and the test name.
       12:  694:bool UnitTestOptions::FilterMatchesTest(const std::string& test_suite_name,
        -:  695:                                        const std::string& test_name) {
       24:  696:  const std::string& full_name = test_suite_name + "." + test_name.c_str();
       12:  696-block  0
       12:  696-block  1
       12:  696-block  2
    $$$$$:  696-block  3
    $$$$$:  696-block  4
    $$$$$:  696-block  5
        -:  697:
        -:  698:  // Split --gtest_filter at '-', if there is one, to separate into
        -:  699:  // positive filter and negative filter portions
       12:  700:  const char* const p = GTEST_FLAG(filter).c_str();
       12:  701:  const char* const dash = strchr(p, '-');
       24:  702:  std::string positive;
    $$$$$:  702-block  0
       12:  703:  std::string negative;
    $$$$$:  703-block  0
       12:  704:  if (dash == nullptr) {
       12:  705:    positive = GTEST_FLAG(filter).c_str();  // Whole string is a positive filter
       12:  705-block  0
       12:  706:    negative = "";
       12:  706-block  0
        -:  707:  } else {
    #####:  708:    positive = std::string(p, dash);   // Everything up to the dash
    %%%%%:  708-block  0
    %%%%%:  708-block  1
    #####:  709:    negative = std::string(dash + 1);  // Everything after the dash
    %%%%%:  709-block  0
    #####:  710:    if (positive.empty()) {
        -:  711:      // Treat '-test1' as the same as '*-test1'
    #####:  712:      positive = kUniversalFilter;
    %%%%%:  712-block  0
        -:  713:    }
        -:  714:  }
        -:  715:
        -:  716:  // A filter is a colon-separated list of patterns.  It matches a
        -:  717:  // test if any pattern in it matches the test.
      24*:  718:  return (MatchesFilter(full_name, positive.c_str()) &&
       12:  718-block  0
       12:  718-block  1
       12:  718-block  2
    %%%%%:  718-block  3
       36:  719:          !MatchesFilter(full_name, negative.c_str()));
       12:  719-block  0
       12:  719-block  1
       12:  719-block  2
       12:  719-block  3
        -:  720:}
        -:  721:
        -:  722:#if GTEST_HAS_SEH
        -:  723:// Returns EXCEPTION_EXECUTE_HANDLER if Google Test should handle the
        -:  724:// given SEH exception, or EXCEPTION_CONTINUE_SEARCH otherwise.
        -:  725:// This function is useful as an __except condition.
        -:  726:int UnitTestOptions::GTestShouldProcessSEH(DWORD exception_code) {
        -:  727:  // Google Test should handle a SEH exception if:
        -:  728:  //   1. the user wants it to, AND
        -:  729:  //   2. this is not a breakpoint exception, AND
        -:  730:  //   3. this is not a C++ exception (VC++ implements them via SEH,
        -:  731:  //      apparently).
        -:  732:  //
        -:  733:  // SEH exception code for C++ exceptions.
        -:  734:  // (see http://support.microsoft.com/kb/185294 for more information).
        -:  735:  const DWORD kCxxExceptionCode = 0xe06d7363;
        -:  736:
        -:  737:  bool should_handle = true;
        -:  738:
        -:  739:  if (!GTEST_FLAG(catch_exceptions))
        -:  740:    should_handle = false;
        -:  741:  else if (exception_code == EXCEPTION_BREAKPOINT)
        -:  742:    should_handle = false;
        -:  743:  else if (exception_code == kCxxExceptionCode)
        -:  744:    should_handle = false;
        -:  745:
        -:  746:  return should_handle ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH;
        -:  747:}
        -:  748:#endif  // GTEST_HAS_SEH
        -:  749:
        -:  750:}  // namespace internal
        -:  751:
        -:  752:// The c'tor sets this object as the test part result reporter used by
        -:  753:// Google Test.  The 'result' parameter specifies where to report the
        -:  754:// results. Intercepts only failures from the current thread.
    #####:  755:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  756:    TestPartResultArray* result)
        -:  757:    : intercept_mode_(INTERCEPT_ONLY_CURRENT_THREAD),
    #####:  758:      result_(result) {
    %%%%%:  758-block  0
    $$$$$:  758-block  1
    #####:  759:  Init();
    #####:  760:}
    %%%%%:  760-block  0
        -:  761:
        -:  762:// The c'tor sets this object as the test part result reporter used by
        -:  763:// Google Test.  The 'result' parameter specifies where to report the
        -:  764:// results.
    #####:  765:ScopedFakeTestPartResultReporter::ScopedFakeTestPartResultReporter(
    #####:  766:    InterceptMode intercept_mode, TestPartResultArray* result)
        -:  767:    : intercept_mode_(intercept_mode),
    #####:  768:      result_(result) {
    %%%%%:  768-block  0
    $$$$$:  768-block  1
    #####:  769:  Init();
    #####:  770:}
    %%%%%:  770-block  0
        -:  771:
    #####:  772:void ScopedFakeTestPartResultReporter::Init() {
    #####:  773:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  773-block  0
    #####:  774:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  775:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
    %%%%%:  775-block  0
    #####:  776:    impl->SetGlobalTestPartResultReporter(this);
        -:  777:  } else {
    #####:  778:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
    %%%%%:  778-block  0
    #####:  779:    impl->SetTestPartResultReporterForCurrentThread(this);
        -:  780:  }
    #####:  781:}
        -:  782:
        -:  783:// The d'tor restores the test part result reporter used by Google Test
        -:  784:// before.
    #####:  785:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    #####:  786:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    #####:  787:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  788:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  789:  } else {
    #####:  790:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  791:  }
    #####:  792:}
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD0Ev:
    #####:  785:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
        -:  786:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        -:  787:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
        -:  788:    impl->SetGlobalTestPartResultReporter(old_reporter_);
        -:  789:  } else {
        -:  790:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
        -:  791:  }
    #####:  792:}
    %%%%%:  792-block  0
------------------
_ZN7testing32ScopedFakeTestPartResultReporterD2Ev:
    #####:  785:ScopedFakeTestPartResultReporter::~ScopedFakeTestPartResultReporter() {
    %%%%%:  785-block  0
    #####:  786:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%:  786-block  0
    #####:  787:  if (intercept_mode_ == INTERCEPT_ALL_THREADS) {
    #####:  788:    impl->SetGlobalTestPartResultReporter(old_reporter_);
    %%%%%:  788-block  0
        -:  789:  } else {
    #####:  790:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
    %%%%%:  790-block  0
        -:  791:  }
    #####:  792:}
------------------
        -:  793:
        -:  794:// Increments the test part result count and remembers the result.
        -:  795:// This method is from the TestPartResultReporterInterface interface.
    #####:  796:void ScopedFakeTestPartResultReporter::ReportTestPartResult(
        -:  797:    const TestPartResult& result) {
    #####:  798:  result_->Append(result);
    %%%%%:  798-block  0
    #####:  799:}
        -:  800:
        -:  801:namespace internal {
        -:  802:
        -:  803:// Returns the type ID of ::testing::Test.  We should always call this
        -:  804:// instead of GetTypeId< ::testing::Test>() to get the type ID of
        -:  805:// testing::Test.  This is to work around a suspected linker bug when
        -:  806:// using Google Test as a framework on Mac OS X.  The bug causes
        -:  807:// GetTypeId< ::testing::Test>() to return different values depending
        -:  808:// on whether the call is from the Google Test framework itself or
        -:  809:// from user test code.  GetTestTypeId() is guaranteed to always
        -:  810:// return the same value, as it always calls GetTypeId<>() from the
        -:  811:// gtest.cc, which is within the Google Test framework.
       13:  812:TypeId GetTestTypeId() {
       13:  813:  return GetTypeId<Test>();
       13:  813-block  0
        -:  814:}
        -:  815:
        -:  816:// The value of GetTestTypeId() as seen from within the Google Test
        -:  817:// library.  This is solely for testing GetTestTypeId().
        -:  818:extern const TypeId kTestTypeIdInGoogleTest = GetTestTypeId();
        -:  819:
        -:  820:// This predicate-formatter checks that 'results' contains a test part
        -:  821:// failure of the given type and that the failure message contains the
        -:  822:// given substring.
    #####:  823:static AssertionResult HasOneFailure(const char* /* results_expr */,
        -:  824:                                     const char* /* type_expr */,
        -:  825:                                     const char* /* substr_expr */,
        -:  826:                                     const TestPartResultArray& results,
        -:  827:                                     TestPartResult::Type type,
        -:  828:                                     const std::string& substr) {
        -:  829:  const std::string expected(type == TestPartResult::kFatalFailure ?
        -:  830:                        "1 fatal failure" :
    #####:  831:                        "1 non-fatal failure");
    %%%%%:  831-block  0
    %%%%%:  831-block  1
    %%%%%:  831-block  2
    %%%%%:  831-block  3
    $$$$$:  831-block  4
    #####:  832:  Message msg;
    %%%%%:  832-block  0
    $$$$$:  832-block  1
    #####:  833:  if (results.size() != 1) {
    %%%%%:  833-block  0
    #####:  834:    msg << "Expected: " << expected << "\n"
    %%%%%:  834-block  0
    %%%%%:  834-block  1
    %%%%%:  834-block  2
    #####:  835:        << "  Actual: " << results.size() << " failures";
    %%%%%:  835-block  0
    %%%%%:  835-block  1
    %%%%%:  835-block  2
    $$$$$:  835-block  3
    #####:  836:    for (int i = 0; i < results.size(); i++) {
    %%%%%:  836-block  0
    %%%%%:  836-block  1
    %%%%%:  836-block  2
    #####:  837:      msg << "\n" << results.GetTestPartResult(i);
    %%%%%:  837-block  0
    %%%%%:  837-block  1
    %%%%%:  837-block  2
        -:  838:    }
    #####:  839:    return AssertionFailure() << msg;
    %%%%%:  839-block  0
    %%%%%:  839-block  1
    %%%%%:  839-block  2
    %%%%%:  839-block  3
    $$$$$:  839-block  4
    $$$$$:  839-block  5
        -:  840:  }
        -:  841:
    #####:  842:  const TestPartResult& r = results.GetTestPartResult(0);
    %%%%%:  842-block  0
    #####:  843:  if (r.type() != type) {
    %%%%%:  843-block  0
    #####:  844:    return AssertionFailure() << "Expected: " << expected << "\n"
    %%%%%:  844-block  0
    %%%%%:  844-block  1
    %%%%%:  844-block  2
    %%%%%:  844-block  3
    %%%%%:  844-block  4
    $$$$$:  844-block  5
    $$$$$:  844-block  6
    #####:  845:                              << "  Actual:\n"
    %%%%%:  845-block  0
    #####:  846:                              << r;
    %%%%%:  846-block  0
    %%%%%:  846-block  1
        -:  847:  }
        -:  848:
    #####:  849:  if (strstr(r.message(), substr.c_str()) == nullptr) {
    %%%%%:  849-block  0
    #####:  850:    return AssertionFailure() << "Expected: " << expected << " containing \""
    %%%%%:  850-block  0
    %%%%%:  850-block  1
    %%%%%:  850-block  2
    %%%%%:  850-block  3
    %%%%%:  850-block  4
    $$$$$:  850-block  5
    $$$$$:  850-block  6
    #####:  851:                              << substr << "\"\n"
    %%%%%:  851-block  0
    %%%%%:  851-block  1
    #####:  852:                              << "  Actual:\n"
    %%%%%:  852-block  0
    #####:  853:                              << r;
    %%%%%:  853-block  0
    %%%%%:  853-block  1
        -:  854:  }
        -:  855:
    #####:  856:  return AssertionSuccess();
    %%%%%:  856-block  0
        -:  857:}
        -:  858:
        -:  859:// The constructor of SingleFailureChecker remembers where to look up
        -:  860:// test part results, what type of failure we expect, and what
        -:  861:// substring the failure message should contain.
    #####:  862:SingleFailureChecker::SingleFailureChecker(const TestPartResultArray* results,
        -:  863:                                           TestPartResult::Type type,
    #####:  864:                                           const std::string& substr)
    #####:  865:    : results_(results), type_(type), substr_(substr) {}
    %%%%%:  865-block  0
        -:  866:
        -:  867:// The destructor of SingleFailureChecker verifies that the given
        -:  868:// TestPartResultArray contains exactly one failure that has the given
        -:  869:// type and contains the given substring.  If that's not the case, a
        -:  870:// non-fatal failure will be generated.
    #####:  871:SingleFailureChecker::~SingleFailureChecker() {
    #####:  872:  EXPECT_PRED_FORMAT3(HasOneFailure, *results_, type_, substr_);
    %%%%%:  872-block  0
    %%%%%:  872-block  1
    %%%%%:  872-block  2
    #####:  873:}
        -:  874:
        1:  875:DefaultGlobalTestPartResultReporter::DefaultGlobalTestPartResultReporter(
        1:  876:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  876-block  0
        -:  877:
    #####:  878:void DefaultGlobalTestPartResultReporter::ReportTestPartResult(
        -:  879:    const TestPartResult& result) {
    #####:  880:  unit_test_->current_test_result()->AddTestPartResult(result);
    %%%%%:  880-block  0
    #####:  881:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
    #####:  882:}
        -:  883:
        1:  884:DefaultPerThreadTestPartResultReporter::DefaultPerThreadTestPartResultReporter(
        1:  885:    UnitTestImpl* unit_test) : unit_test_(unit_test) {}
        1:  885-block  0
        -:  886:
    #####:  887:void DefaultPerThreadTestPartResultReporter::ReportTestPartResult(
        -:  888:    const TestPartResult& result) {
    #####:  889:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
    %%%%%:  889-block  0
    #####:  890:}
        -:  891:
        -:  892:// Returns the global test part result reporter.
        -:  893:TestPartResultReporterInterface*
    #####:  894:UnitTestImpl::GetGlobalTestPartResultReporter() {
    #####:  895:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  895-block  0
    #####:  896:  return global_test_part_result_repoter_;
    %%%%%:  896-block  0
    %%%%%:  896-block  1
        -:  897:}
        -:  898:
        -:  899:// Sets the global test part result reporter.
    #####:  900:void UnitTestImpl::SetGlobalTestPartResultReporter(
        -:  901:    TestPartResultReporterInterface* reporter) {
    #####:  902:  internal::MutexLock lock(&global_test_part_result_reporter_mutex_);
    %%%%%:  902-block  0
    #####:  903:  global_test_part_result_repoter_ = reporter;
    %%%%%:  903-block  0
    #####:  904:}
        -:  905:
        -:  906:// Returns the test part result reporter for the current thread.
        -:  907:TestPartResultReporterInterface*
    #####:  908:UnitTestImpl::GetTestPartResultReporterForCurrentThread() {
    #####:  909:  return per_thread_test_part_result_reporter_.get();
    %%%%%:  909-block  0
        -:  910:}
        -:  911:
        -:  912:// Sets the test part result reporter for the current thread.
    #####:  913:void UnitTestImpl::SetTestPartResultReporterForCurrentThread(
        -:  914:    TestPartResultReporterInterface* reporter) {
    #####:  915:  per_thread_test_part_result_reporter_.set(reporter);
    %%%%%:  915-block  0
    #####:  916:}
        -:  917:
        -:  918:// Gets the number of successful test suites.
    #####:  919:int UnitTestImpl::successful_test_suite_count() const {
    #####:  920:  return CountIf(test_suites_, TestSuitePassed);
    %%%%%:  920-block  0
        -:  921:}
        -:  922:
        -:  923:// Gets the number of failed test suites.
        2:  924:int UnitTestImpl::failed_test_suite_count() const {
        2:  925:  return CountIf(test_suites_, TestSuiteFailed);
        2:  925-block  0
        -:  926:}
        -:  927:
        -:  928:// Gets the number of all test suites.
        2:  929:int UnitTestImpl::total_test_suite_count() const {
        2:  930:  return static_cast<int>(test_suites_.size());
        2:  930-block  0
        -:  931:}
        -:  932:
        -:  933:// Gets the number of all test suites that contain at least one test
        -:  934:// that should run.
        2:  935:int UnitTestImpl::test_suite_to_run_count() const {
        2:  936:  return CountIf(test_suites_, ShouldRunTestSuite);
        2:  936-block  0
        -:  937:}
        -:  938:
        -:  939:// Gets the number of successful tests.
        1:  940:int UnitTestImpl::successful_test_count() const {
        1:  941:  return SumOverTestSuiteList(test_suites_, &TestSuite::successful_test_count);
        1:  941-block  0
        -:  942:}
        -:  943:
        -:  944:// Gets the number of skipped tests.
        1:  945:int UnitTestImpl::skipped_test_count() const {
        1:  946:  return SumOverTestSuiteList(test_suites_, &TestSuite::skipped_test_count);
        1:  946-block  0
        -:  947:}
        -:  948:
        -:  949:// Gets the number of failed tests.
    #####:  950:int UnitTestImpl::failed_test_count() const {
    #####:  951:  return SumOverTestSuiteList(test_suites_, &TestSuite::failed_test_count);
    %%%%%:  951-block  0
        -:  952:}
        -:  953:
        -:  954:// Gets the number of disabled tests that will be reported in the XML report.
        1:  955:int UnitTestImpl::reportable_disabled_test_count() const {
        1:  956:  return SumOverTestSuiteList(test_suites_,
        1:  956-block  0
        1:  957:                              &TestSuite::reportable_disabled_test_count);
        -:  958:}
        -:  959:
        -:  960:// Gets the number of disabled tests.
    #####:  961:int UnitTestImpl::disabled_test_count() const {
    #####:  962:  return SumOverTestSuiteList(test_suites_, &TestSuite::disabled_test_count);
    %%%%%:  962-block  0
        -:  963:}
        -:  964:
        -:  965:// Gets the number of tests to be printed in the XML report.
    #####:  966:int UnitTestImpl::reportable_test_count() const {
    #####:  967:  return SumOverTestSuiteList(test_suites_, &TestSuite::reportable_test_count);
    %%%%%:  967-block  0
        -:  968:}
        -:  969:
        -:  970:// Gets the number of all tests.
    #####:  971:int UnitTestImpl::total_test_count() const {
    #####:  972:  return SumOverTestSuiteList(test_suites_, &TestSuite::total_test_count);
    %%%%%:  972-block  0
        -:  973:}
        -:  974:
        -:  975:// Gets the number of tests that should run.
        2:  976:int UnitTestImpl::test_to_run_count() const {
        2:  977:  return SumOverTestSuiteList(test_suites_, &TestSuite::test_to_run_count);
        2:  977-block  0
        -:  978:}
        -:  979:
        -:  980:// Returns the current OS stack trace as an std::string.
        -:  981://
        -:  982:// The maximum number of stack frames to be included is specified by
        -:  983:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -:  984:// specifies the number of top frames to be skipped, which doesn't
        -:  985:// count against the number of frames to be included.
        -:  986://
        -:  987:// For example, if Foo() calls Bar(), which in turn calls
        -:  988:// CurrentOsStackTraceExceptTop(1), Foo() will be included in the
        -:  989:// trace but Bar() and CurrentOsStackTraceExceptTop() won't.
    #####:  990:std::string UnitTestImpl::CurrentOsStackTraceExceptTop(int skip_count) {
    #####:  991:  return os_stack_trace_getter()->CurrentStackTrace(
    %%%%%:  991-block  0
        -:  992:      static_cast<int>(GTEST_FLAG(stack_trace_depth)),
        -:  993:      skip_count + 1
        -:  994:      // Skips the user-specified number of frames plus this function
        -:  995:      // itself.
    #####:  996:      );  // NOLINT
        -:  997:}
        -:  998:
        -:  999:// Returns the current time in milliseconds.
       29: 1000:TimeInMillis GetTimeInMillis() {
       29: 1001:  return std::chrono::duration_cast<std::chrono::milliseconds>(
       29: 1002:             std::chrono::system_clock::now() -
    $$$$$: 1002-block  0
    $$$$$: 1002-block  1
       87: 1003:             std::chrono::system_clock::from_time_t(0))
       29: 1003-block  0
       29: 1003-block  1
       58: 1004:      .count();
       29: 1004-block  0
       29: 1004-block  1
        -: 1005:}
        -: 1006:
        -: 1007:// Utilities
        -: 1008:
        -: 1009:// class String.
        -: 1010:
        -: 1011:#if GTEST_OS_WINDOWS_MOBILE
        -: 1012:// Creates a UTF-16 wide string from the given ANSI string, allocating
        -: 1013:// memory using new. The caller is responsible for deleting the return
        -: 1014:// value using delete[]. Returns the wide string, or NULL if the
        -: 1015:// input is NULL.
        -: 1016:LPCWSTR String::AnsiToUtf16(const char* ansi) {
        -: 1017:  if (!ansi) return nullptr;
        -: 1018:  const int length = strlen(ansi);
        -: 1019:  const int unicode_length =
        -: 1020:      MultiByteToWideChar(CP_ACP, 0, ansi, length, nullptr, 0);
        -: 1021:  WCHAR* unicode = new WCHAR[unicode_length + 1];
        -: 1022:  MultiByteToWideChar(CP_ACP, 0, ansi, length,
        -: 1023:                      unicode, unicode_length);
        -: 1024:  unicode[unicode_length] = 0;
        -: 1025:  return unicode;
        -: 1026:}
        -: 1027:
        -: 1028:// Creates an ANSI string from the given wide string, allocating
        -: 1029:// memory using new. The caller is responsible for deleting the return
        -: 1030:// value using delete[]. Returns the ANSI string, or NULL if the
        -: 1031:// input is NULL.
        -: 1032:const char* String::Utf16ToAnsi(LPCWSTR utf16_str)  {
        -: 1033:  if (!utf16_str) return nullptr;
        -: 1034:  const int ansi_length = WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, nullptr,
        -: 1035:                                              0, nullptr, nullptr);
        -: 1036:  char* ansi = new char[ansi_length + 1];
        -: 1037:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1, ansi, ansi_length, nullptr,
        -: 1038:                      nullptr);
        -: 1039:  ansi[ansi_length] = 0;
        -: 1040:  return ansi;
        -: 1041:}
        -: 1042:
        -: 1043:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1044:
        -: 1045:// Compares two C strings.  Returns true if and only if they have the same
        -: 1046:// content.
        -: 1047://
        -: 1048:// Unlike strcmp(), this function can handle NULL argument(s).  A NULL
        -: 1049:// C string is considered different to any non-NULL C string,
        -: 1050:// including the empty string.
        2: 1051:bool String::CStringEquals(const char * lhs, const char * rhs) {
       2*: 1052:  if (lhs == nullptr) return rhs == nullptr;
        2: 1052-block  0
    %%%%%: 1052-block  1
        -: 1053:
       2*: 1054:  if (rhs == nullptr) return false;
        2: 1054-block  0
    %%%%%: 1054-block  1
        -: 1055:
        2: 1056:  return strcmp(lhs, rhs) == 0;
        2: 1056-block  0
        -: 1057:}
        -: 1058:
        -: 1059:#if GTEST_HAS_STD_WSTRING
        -: 1060:
        -: 1061:// Converts an array of wide chars to a narrow string using the UTF-8
        -: 1062:// encoding, and streams the result to the given Message object.
        -: 1063:static void StreamWideCharsToMessage(const wchar_t* wstr, size_t length,
        -: 1064:                                     Message* msg) {
        -: 1065:  for (size_t i = 0; i != length; ) {  // NOLINT
        -: 1066:    if (wstr[i] != L'\0') {
        -: 1067:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
        -: 1068:      while (i != length && wstr[i] != L'\0')
        -: 1069:        i++;
        -: 1070:    } else {
        -: 1071:      *msg << '\0';
        -: 1072:      i++;
        -: 1073:    }
        -: 1074:  }
        -: 1075:}
        -: 1076:
        -: 1077:#endif  // GTEST_HAS_STD_WSTRING
        -: 1078:
    #####: 1079:void SplitString(const ::std::string& str, char delimiter,
        -: 1080:                 ::std::vector< ::std::string>* dest) {
    #####: 1081:  ::std::vector< ::std::string> parsed;
    %%%%%: 1081-block  0
    $$$$$: 1081-block  1
    #####: 1082:  ::std::string::size_type pos = 0;
    #####: 1083:  while (::testing::internal::AlwaysTrue()) {
    %%%%%: 1083-block  0
    %%%%%: 1083-block  1
    #####: 1084:    const ::std::string::size_type colon = str.find(delimiter, pos);
    %%%%%: 1084-block  0
    #####: 1085:    if (colon == ::std::string::npos) {
    #####: 1086:      parsed.push_back(str.substr(pos));
    %%%%%: 1086-block  0
    %%%%%: 1086-block  1
    %%%%%: 1086-block  2
    $$$$$: 1086-block  3
    $$$$$: 1086-block  4
    #####: 1087:      break;
        -: 1088:    } else {
    #####: 1089:      parsed.push_back(str.substr(pos, colon - pos));
    %%%%%: 1089-block  0
    %%%%%: 1089-block  1
    %%%%%: 1089-block  2
    $$$$$: 1089-block  3
    $$$$$: 1089-block  4
    #####: 1090:      pos = colon + 1;
        -: 1091:    }
        -: 1092:  }
    #####: 1093:  dest->swap(parsed);
    %%%%%: 1093-block  0
    #####: 1094:}
        -: 1095:
        -: 1096:}  // namespace internal
        -: 1097:
        -: 1098:// Constructs an empty Message.
        -: 1099:// We allocate the stringstream separately because otherwise each use of
        -: 1100:// ASSERT/EXPECT in a procedure adds over 200 bytes to the procedure's
        -: 1101:// stack frame leading to huge stack frames in some cases; gcc does not reuse
        -: 1102:// the stack space.
       64: 1103:Message::Message() : ss_(new ::std::stringstream) {
       64: 1103-block  0
       64: 1103-block  1
    $$$$$: 1103-block  2
    $$$$$: 1103-block  3
        -: 1104:  // By default, we want there to be enough precision when printing
        -: 1105:  // a double to a Message.
       64: 1106:  *ss_ << std::setprecision(std::numeric_limits<double>::digits10 + 2);
       64: 1107:}
       64: 1107-block  0
        -: 1108:
        -: 1109:// These two overloads allow streaming a wide C string to a Message
        -: 1110:// using the UTF-8 encoding.
    #####: 1111:Message& Message::operator <<(const wchar_t* wide_c_str) {
    #####: 1112:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1112-block  0
    %%%%%: 1112-block  1
    %%%%%: 1112-block  2
    $$$$$: 1112-block  3
        -: 1113:}
    #####: 1114:Message& Message::operator <<(wchar_t* wide_c_str) {
    #####: 1115:  return *this << internal::String::ShowWideCString(wide_c_str);
    %%%%%: 1115-block  0
    %%%%%: 1115-block  1
    %%%%%: 1115-block  2
    $$$$$: 1115-block  3
        -: 1116:}
        -: 1117:
        -: 1118:#if GTEST_HAS_STD_WSTRING
        -: 1119:// Converts the given wide string to a narrow string using the UTF-8
        -: 1120:// encoding, and streams the result to this Message object.
        -: 1121:Message& Message::operator <<(const ::std::wstring& wstr) {
        -: 1122:  internal::StreamWideCharsToMessage(wstr.c_str(), wstr.length(), this);
        -: 1123:  return *this;
        -: 1124:}
        -: 1125:#endif  // GTEST_HAS_STD_WSTRING
        -: 1126:
        -: 1127:// Gets the text streamed to this object so far as an std::string.
        -: 1128:// Each '\0' character in the buffer is replaced with "\\0".
       64: 1129:std::string Message::GetString() const {
       64: 1130:  return internal::StringStreamToString(ss_.get());
       64: 1130-block  0
        -: 1131:}
        -: 1132:
        -: 1133:// AssertionResult constructors.
        -: 1134:// Used in EXPECT_TRUE/FALSE(assertion_result).
    #####: 1135:AssertionResult::AssertionResult(const AssertionResult& other)
    #####: 1136:    : success_(other.success_),
    #####: 1137:      message_(other.message_.get() != nullptr
    #####: 1138:                   ? new ::std::string(*other.message_)
    %%%%%: 1138-block  0
    $$$$$: 1138-block  1
    #####: 1139:                   : static_cast< ::std::string*>(nullptr)) {}
    %%%%%: 1139-block  0
    %%%%%: 1139-block  1
    %%%%%: 1139-block  2
    %%%%%: 1139-block  3
        -: 1140:
        -: 1141:// Swaps two AssertionResults.
    #####: 1142:void AssertionResult::swap(AssertionResult& other) {
        -: 1143:  using std::swap;
    #####: 1144:  swap(success_, other.success_);
    %%%%%: 1144-block  0
    #####: 1145:  swap(message_, other.message_);
    #####: 1146:}
        -: 1147:
        -: 1148:// Returns the assertion's negation. Used with EXPECT/ASSERT_FALSE.
    #####: 1149:AssertionResult AssertionResult::operator!() const {
    #####: 1150:  AssertionResult negation(!success_);
    %%%%%: 1150-block  0
    #####: 1151:  if (message_.get() != nullptr) negation << *message_;
    %%%%%: 1151-block  0
    #####: 1152:  return negation;
    %%%%%: 1152-block  0
    %%%%%: 1152-block  1
        -: 1153:}
        -: 1154:
        -: 1155:// Makes a successful assertion result.
       20: 1156:AssertionResult AssertionSuccess() {
       20: 1157:  return AssertionResult(true);
       20: 1157-block  0
        -: 1158:}
        -: 1159:
        -: 1160:// Makes a failed assertion result.
    #####: 1161:AssertionResult AssertionFailure() {
    #####: 1162:  return AssertionResult(false);
    %%%%%: 1162-block  0
        -: 1163:}
        -: 1164:
        -: 1165:// Makes a failed assertion result with the given failure message.
        -: 1166:// Deprecated; use AssertionFailure() << message.
    #####: 1167:AssertionResult AssertionFailure(const Message& message) {
    #####: 1168:  return AssertionFailure() << message;
    %%%%%: 1168-block  0
    %%%%%: 1168-block  1
    %%%%%: 1168-block  2
    %%%%%: 1168-block  3
    $$$$$: 1168-block  4
        -: 1169:}
        -: 1170:
        -: 1171:namespace internal {
        -: 1172:
        -: 1173:namespace edit_distance {
    #####: 1174:std::vector<EditType> CalculateOptimalEdits(const std::vector<size_t>& left,
        -: 1175:                                            const std::vector<size_t>& right) {
        -: 1176:  std::vector<std::vector<double> > costs(
    #####: 1177:      left.size() + 1, std::vector<double>(right.size() + 1));
    %%%%%: 1177-block  0
    %%%%%: 1177-block  1
    $$$$$: 1177-block  2
    $$$$$: 1177-block  3
        -: 1178:  std::vector<std::vector<EditType> > best_move(
    #####: 1179:      left.size() + 1, std::vector<EditType>(right.size() + 1));
    %%%%%: 1179-block  0
    %%%%%: 1179-block  1
    $$$$$: 1179-block  2
    $$$$$: 1179-block  3
        -: 1180:
        -: 1181:  // Populate for empty right.
    #####: 1182:  for (size_t l_i = 0; l_i < costs.size(); ++l_i) {
    %%%%%: 1182-block  0
    #####: 1183:    costs[l_i][0] = static_cast<double>(l_i);
    %%%%%: 1183-block  0
    #####: 1184:    best_move[l_i][0] = kRemove;
        -: 1185:  }
        -: 1186:  // Populate for empty left.
    #####: 1187:  for (size_t r_i = 1; r_i < costs[0].size(); ++r_i) {
    %%%%%: 1187-block  0
    %%%%%: 1187-block  1
    #####: 1188:    costs[0][r_i] = static_cast<double>(r_i);
    %%%%%: 1188-block  0
    #####: 1189:    best_move[0][r_i] = kAdd;
        -: 1190:  }
        -: 1191:
    #####: 1192:  for (size_t l_i = 0; l_i < left.size(); ++l_i) {
    %%%%%: 1192-block  0
    %%%%%: 1192-block  1
    %%%%%: 1192-block  2
    #####: 1193:    for (size_t r_i = 0; r_i < right.size(); ++r_i) {
    %%%%%: 1193-block  0
    %%%%%: 1193-block  1
    %%%%%: 1193-block  2
    #####: 1194:      if (left[l_i] == right[r_i]) {
    %%%%%: 1194-block  0
        -: 1195:        // Found a match. Consume it.
    #####: 1196:        costs[l_i + 1][r_i + 1] = costs[l_i][r_i];
    %%%%%: 1196-block  0
    #####: 1197:        best_move[l_i + 1][r_i + 1] = kMatch;
    #####: 1198:        continue;
        -: 1199:      }
        -: 1200:
    #####: 1201:      const double add = costs[l_i + 1][r_i];
    %%%%%: 1201-block  0
    #####: 1202:      const double remove = costs[l_i][r_i + 1];
    #####: 1203:      const double replace = costs[l_i][r_i];
    #####: 1204:      if (add < remove && add < replace) {
    %%%%%: 1204-block  0
    #####: 1205:        costs[l_i + 1][r_i + 1] = add + 1;
    %%%%%: 1205-block  0
    #####: 1206:        best_move[l_i + 1][r_i + 1] = kAdd;
    #####: 1207:      } else if (remove < add && remove < replace) {
    %%%%%: 1207-block  0
    %%%%%: 1207-block  1
    #####: 1208:        costs[l_i + 1][r_i + 1] = remove + 1;
    %%%%%: 1208-block  0
    #####: 1209:        best_move[l_i + 1][r_i + 1] = kRemove;
        -: 1210:      } else {
        -: 1211:        // We make replace a little more expensive than add/remove to lower
        -: 1212:        // their priority.
    #####: 1213:        costs[l_i + 1][r_i + 1] = replace + 1.00001;
    %%%%%: 1213-block  0
    #####: 1214:        best_move[l_i + 1][r_i + 1] = kReplace;
        -: 1215:      }
        -: 1216:    }
        -: 1217:  }
        -: 1218:
        -: 1219:  // Reconstruct the best path. We do it in reverse order.
    #####: 1220:  std::vector<EditType> best_path;
    %%%%%: 1220-block  0
    #####: 1221:  for (size_t l_i = left.size(), r_i = right.size(); l_i > 0 || r_i > 0;) {
    %%%%%: 1221-block  0
    %%%%%: 1221-block  1
    #####: 1222:    EditType move = best_move[l_i][r_i];
    %%%%%: 1222-block  0
    #####: 1223:    best_path.push_back(move);
    #####: 1224:    l_i -= move != kAdd;
    #####: 1225:    r_i -= move != kRemove;
    %%%%%: 1225-block  0
        -: 1226:  }
    #####: 1227:  std::reverse(best_path.begin(), best_path.end());
    %%%%%: 1227-block  0
    #####: 1228:  return best_path;
    %%%%%: 1228-block  0
    %%%%%: 1228-block  1
        -: 1229:}
        -: 1230:
        -: 1231:namespace {
        -: 1232:
        -: 1233:// Helper class to convert string into ids with deduplication.
        -: 1234:class InternalStrings {
        -: 1235: public:
    #####: 1236:  size_t GetId(const std::string& str) {
    #####: 1237:    IdMap::iterator it = ids_.find(str);
    %%%%%: 1237-block  0
    #####: 1238:    if (it != ids_.end()) return it->second;
    %%%%%: 1238-block  0
    %%%%%: 1238-block  1
    #####: 1239:    size_t id = ids_.size();
    %%%%%: 1239-block  0
    #####: 1240:    return ids_[str] = id;
    %%%%%: 1240-block  0
        -: 1241:  }
        -: 1242:
        -: 1243: private:
        -: 1244:  typedef std::map<std::string, size_t> IdMap;
        -: 1245:  IdMap ids_;
        -: 1246:};
        -: 1247:
        -: 1248:}  // namespace
        -: 1249:
    #####: 1250:std::vector<EditType> CalculateOptimalEdits(
        -: 1251:    const std::vector<std::string>& left,
        -: 1252:    const std::vector<std::string>& right) {
    #####: 1253:  std::vector<size_t> left_ids, right_ids;
    %%%%%: 1253-block  0
    %%%%%: 1253-block  1
    $$$$$: 1253-block  2
    $$$$$: 1253-block  3
        -: 1254:  {
    #####: 1255:    InternalStrings intern_table;
    %%%%%: 1255-block  0
    $$$$$: 1255-block  1
    #####: 1256:    for (size_t i = 0; i < left.size(); ++i) {
    %%%%%: 1256-block  0
    #####: 1257:      left_ids.push_back(intern_table.GetId(left[i]));
    %%%%%: 1257-block  0
    %%%%%: 1257-block  1
    %%%%%: 1257-block  2
    $$$$$: 1257-block  3
        -: 1258:    }
    #####: 1259:    for (size_t i = 0; i < right.size(); ++i) {
    %%%%%: 1259-block  0
    %%%%%: 1259-block  1
    #####: 1260:      right_ids.push_back(intern_table.GetId(right[i]));
    %%%%%: 1260-block  0
    %%%%%: 1260-block  1
    %%%%%: 1260-block  2
    $$$$$: 1260-block  3
        -: 1261:    }
        -: 1262:  }
    #####: 1263:  return CalculateOptimalEdits(left_ids, right_ids);
    %%%%%: 1263-block  0
        -: 1264:}
        -: 1265:
        -: 1266:namespace {
        -: 1267:
        -: 1268:// Helper class that holds the state for one hunk and prints it out to the
        -: 1269:// stream.
        -: 1270:// It reorders adds/removes when possible to group all removes before all
        -: 1271:// adds. It also adds the hunk header before printint into the stream.
        -: 1272:class Hunk {
        -: 1273: public:
    #####: 1274:  Hunk(size_t left_start, size_t right_start)
    #####: 1275:      : left_start_(left_start),
        -: 1276:        right_start_(right_start),
        -: 1277:        adds_(),
        -: 1278:        removes_(),
    #####: 1279:        common_() {}
    %%%%%: 1279-block  0
        -: 1280:
    #####: 1281:  void PushLine(char edit, const char* line) {
    #####: 1282:    switch (edit) {
    %%%%%: 1282-block  0
    #####: 1283:      case ' ':
    #####: 1284:        ++common_;
    #####: 1285:        FlushEdits();
    %%%%%: 1285-block  0
    #####: 1286:        hunk_.push_back(std::make_pair(' ', line));
    %%%%%: 1286-block  0
    $$$$$: 1286-block  1
    $$$$$: 1286-block  2
    #####: 1287:        break;
    %%%%%: 1287-block  0
    #####: 1288:      case '-':
    #####: 1289:        ++removes_;
    #####: 1290:        hunk_removes_.push_back(std::make_pair('-', line));
    %%%%%: 1290-block  0
    %%%%%: 1290-block  1
    $$$$$: 1290-block  2
    $$$$$: 1290-block  3
    #####: 1291:        break;
    %%%%%: 1291-block  0
    #####: 1292:      case '+':
    #####: 1293:        ++adds_;
    #####: 1294:        hunk_adds_.push_back(std::make_pair('+', line));
    %%%%%: 1294-block  0
    %%%%%: 1294-block  1
    $$$$$: 1294-block  2
    #####: 1295:        break;
    %%%%%: 1295-block  0
        -: 1296:    }
    #####: 1297:  }
    %%%%%: 1297-block  0
        -: 1298:
    #####: 1299:  void PrintTo(std::ostream* os) {
    #####: 1300:    PrintHeader(os);
    %%%%%: 1300-block  0
    #####: 1301:    FlushEdits();
    #####: 1302:    for (std::list<std::pair<char, const char*> >::const_iterator it =
    #####: 1303:             hunk_.begin();
    #####: 1304:         it != hunk_.end(); ++it) {
    %%%%%: 1304-block  0
    %%%%%: 1304-block  1
    #####: 1305:      *os << it->first << it->second << "\n";
    %%%%%: 1305-block  0
    %%%%%: 1305-block  1
    %%%%%: 1305-block  2
        -: 1306:    }
    #####: 1307:  }
    %%%%%: 1307-block  0
        -: 1308:
    #####: 1309:  bool has_edits() const { return adds_ || removes_; }
    %%%%%: 1309-block  0
    %%%%%: 1309-block  1
    %%%%%: 1309-block  2
    %%%%%: 1309-block  3
    %%%%%: 1309-block  4
        -: 1310:
        -: 1311: private:
    #####: 1312:  void FlushEdits() {
    #####: 1313:    hunk_.splice(hunk_.end(), hunk_removes_);
    %%%%%: 1313-block  0
    #####: 1314:    hunk_.splice(hunk_.end(), hunk_adds_);
    #####: 1315:  }
        -: 1316:
        -: 1317:  // Print a unified diff header for one hunk.
        -: 1318:  // The format is
        -: 1319:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
        -: 1320:  // where the left/right parts are omitted if unnecessary.
    #####: 1321:  void PrintHeader(std::ostream* ss) const {
    #####: 1322:    *ss << "@@ ";
    %%%%%: 1322-block  0
    #####: 1323:    if (removes_) {
    #####: 1324:      *ss << "-" << left_start_ << "," << (removes_ + common_);
    %%%%%: 1324-block  0
        -: 1325:    }
    #####: 1326:    if (removes_ && adds_) {
    %%%%%: 1326-block  0
    %%%%%: 1326-block  1
    #####: 1327:      *ss << " ";
    %%%%%: 1327-block  0
        -: 1328:    }
    #####: 1329:    if (adds_) {
    %%%%%: 1329-block  0
    #####: 1330:      *ss << "+" << right_start_ << "," << (adds_ + common_);
    %%%%%: 1330-block  0
        -: 1331:    }
    #####: 1332:    *ss << " @@\n";
    %%%%%: 1332-block  0
    #####: 1333:  }
        -: 1334:
        -: 1335:  size_t left_start_, right_start_;
        -: 1336:  size_t adds_, removes_, common_;
        -: 1337:  std::list<std::pair<char, const char*> > hunk_, hunk_adds_, hunk_removes_;
        -: 1338:};
        -: 1339:
        -: 1340:}  // namespace
        -: 1341:
        -: 1342:// Create a list of diff hunks in Unified diff format.
        -: 1343:// Each hunk has a header generated by PrintHeader above plus a body with
        -: 1344:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
        -: 1345:// addition.
        -: 1346:// 'context' represents the desired unchanged prefix/suffix around the diff.
        -: 1347:// If two hunks are close enough that their contexts overlap, then they are
        -: 1348:// joined into one hunk.
    #####: 1349:std::string CreateUnifiedDiff(const std::vector<std::string>& left,
        -: 1350:                              const std::vector<std::string>& right,
        -: 1351:                              size_t context) {
    #####: 1352:  const std::vector<EditType> edits = CalculateOptimalEdits(left, right);
    %%%%%: 1352-block  0
    $$$$$: 1352-block  1
        -: 1353:
    #####: 1354:  size_t l_i = 0, r_i = 0, edit_i = 0;
    #####: 1355:  std::stringstream ss;
    %%%%%: 1355-block  0
    %%%%%: 1355-block  1
    $$$$$: 1355-block  2
    #####: 1356:  while (edit_i < edits.size()) {
    %%%%%: 1356-block  0
    %%%%%: 1356-block  1
        -: 1357:    // Find first edit.
    #####: 1358:    while (edit_i < edits.size() && edits[edit_i] == kMatch) {
    %%%%%: 1358-block  0
    %%%%%: 1358-block  1
    %%%%%: 1358-block  2
    %%%%%: 1358-block  3
    %%%%%: 1358-block  4
    #####: 1359:      ++l_i;
    #####: 1360:      ++r_i;
    #####: 1361:      ++edit_i;
    %%%%%: 1361-block  0
        -: 1362:    }
        -: 1363:
        -: 1364:    // Find the first line to include in the hunk.
    #####: 1365:    const size_t prefix_context = std::min(l_i, context);
    %%%%%: 1365-block  0
    #####: 1366:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
    $$$$$: 1366-block  0
    #####: 1367:    for (size_t i = prefix_context; i > 0; --i) {
    %%%%%: 1367-block  0
    %%%%%: 1367-block  1
    #####: 1368:      hunk.PushLine(' ', left[l_i - i].c_str());
    %%%%%: 1368-block  0
        -: 1369:    }
        -: 1370:
        -: 1371:    // Iterate the edits until we found enough suffix for the hunk or the input
        -: 1372:    // is over.
    #####: 1373:    size_t n_suffix = 0;
    %%%%%: 1373-block  0
    #####: 1374:    for (; edit_i < edits.size(); ++edit_i) {
    %%%%%: 1374-block  0
    #####: 1375:      if (n_suffix >= context) {
    %%%%%: 1375-block  0
        -: 1376:        // Continue only if the next hunk is very close.
    #####: 1377:        auto it = edits.begin() + static_cast<int>(edit_i);
    %%%%%: 1377-block  0
    #####: 1378:        while (it != edits.end() && *it == kMatch) ++it;
    %%%%%: 1378-block  0
    %%%%%: 1378-block  1
    %%%%%: 1378-block  2
    %%%%%: 1378-block  3
    %%%%%: 1378-block  4
    %%%%%: 1378-block  5
    #####: 1379:        if (it == edits.end() ||
    %%%%%: 1379-block  0
    %%%%%: 1379-block  1
    %%%%%: 1379-block  2
    #####: 1380:            static_cast<size_t>(it - edits.begin()) - edit_i >= context) {
    %%%%%: 1380-block  0
    %%%%%: 1380-block  1
        -: 1381:          // There is no next edit or it is too far away.
    #####: 1382:          break;
    %%%%%: 1382-block  0
        -: 1383:        }
        -: 1384:      }
        -: 1385:
    #####: 1386:      EditType edit = edits[edit_i];
    %%%%%: 1386-block  0
        -: 1387:      // Reset count when a non match is found.
    #####: 1388:      n_suffix = edit == kMatch ? n_suffix + 1 : 0;
    %%%%%: 1388-block  0
    %%%%%: 1388-block  1
        -: 1389:
    #####: 1390:      if (edit == kMatch || edit == kRemove || edit == kReplace) {
    %%%%%: 1390-block  0
    %%%%%: 1390-block  1
    %%%%%: 1390-block  2
    #####: 1391:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
    %%%%%: 1391-block  0
    %%%%%: 1391-block  1
    %%%%%: 1391-block  2
    %%%%%: 1391-block  3
        -: 1392:      }
    #####: 1393:      if (edit == kAdd || edit == kReplace) {
    %%%%%: 1393-block  0
    %%%%%: 1393-block  1
    #####: 1394:        hunk.PushLine('+', right[r_i].c_str());
    %%%%%: 1394-block  0
        -: 1395:      }
        -: 1396:
        -: 1397:      // Advance indices, depending on edit type.
    #####: 1398:      l_i += edit != kAdd;
    #####: 1399:      r_i += edit != kRemove;
    %%%%%: 1399-block  0
        -: 1400:    }
        -: 1401:
    #####: 1402:    if (!hunk.has_edits()) {
    %%%%%: 1402-block  0
        -: 1403:      // We are done. We don't want this hunk.
    #####: 1404:      break;
    %%%%%: 1404-block  0
        -: 1405:    }
        -: 1406:
    #####: 1407:    hunk.PrintTo(&ss);
    %%%%%: 1407-block  0
        -: 1408:  }
    #####: 1409:  return ss.str();
    %%%%%: 1409-block  0
    %%%%%: 1409-block  1
        -: 1410:}
        -: 1411:
        -: 1412:}  // namespace edit_distance
        -: 1413:
        -: 1414:namespace {
        -: 1415:
        -: 1416:// The string representation of the values received in EqFailure() are already
        -: 1417:// escaped. Split them on escaped '\n' boundaries. Leave all other escaped
        -: 1418:// characters the same.
    #####: 1419:std::vector<std::string> SplitEscapedString(const std::string& str) {
    #####: 1420:  std::vector<std::string> lines;
    %%%%%: 1420-block  0
    #####: 1421:  size_t start = 0, end = str.size();
    #####: 1422:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
    %%%%%: 1422-block  0
    %%%%%: 1422-block  1
    %%%%%: 1422-block  2
    %%%%%: 1422-block  3
    %%%%%: 1422-block  4
    #####: 1423:    ++start;
    #####: 1424:    --end;
    %%%%%: 1424-block  0
        -: 1425:  }
    #####: 1426:  bool escaped = false;
    #####: 1427:  for (size_t i = start; i + 1 < end; ++i) {
    %%%%%: 1427-block  0
    %%%%%: 1427-block  1
    %%%%%: 1427-block  2
    #####: 1428:    if (escaped) {
    %%%%%: 1428-block  0
    #####: 1429:      escaped = false;
    #####: 1430:      if (str[i] == 'n') {
    %%%%%: 1430-block  0
    #####: 1431:        lines.push_back(str.substr(start, i - start - 1));
    %%%%%: 1431-block  0
    %%%%%: 1431-block  1
    %%%%%: 1431-block  2
    $$$$$: 1431-block  3
    $$$$$: 1431-block  4
    #####: 1432:        start = i + 1;
        -: 1433:      }
        -: 1434:    } else {
    #####: 1435:      escaped = str[i] == '\\';
    %%%%%: 1435-block  0
        -: 1436:    }
        -: 1437:  }
    #####: 1438:  lines.push_back(str.substr(start, end - start));
    %%%%%: 1438-block  0
    %%%%%: 1438-block  1
    %%%%%: 1438-block  2
    $$$$$: 1438-block  3
    $$$$$: 1438-block  4
    #####: 1439:  return lines;
    %%%%%: 1439-block  0
        -: 1440:}
        -: 1441:
        -: 1442:}  // namespace
        -: 1443:
        -: 1444:// Constructs and returns the message for an equality assertion
        -: 1445:// (e.g. ASSERT_EQ, EXPECT_STREQ, etc) failure.
        -: 1446://
        -: 1447:// The first four parameters are the expressions used in the assertion
        -: 1448:// and their values, as strings.  For example, for ASSERT_EQ(foo, bar)
        -: 1449:// where foo is 5 and bar is 6, we have:
        -: 1450://
        -: 1451://   lhs_expression: "foo"
        -: 1452://   rhs_expression: "bar"
        -: 1453://   lhs_value:      "5"
        -: 1454://   rhs_value:      "6"
        -: 1455://
        -: 1456:// The ignoring_case parameter is true if and only if the assertion is a
        -: 1457:// *_STRCASEEQ*.  When it's true, the string "Ignoring case" will
        -: 1458:// be inserted into the message.
    #####: 1459:AssertionResult EqFailure(const char* lhs_expression,
        -: 1460:                          const char* rhs_expression,
        -: 1461:                          const std::string& lhs_value,
        -: 1462:                          const std::string& rhs_value,
        -: 1463:                          bool ignoring_case) {
    #####: 1464:  Message msg;
    %%%%%: 1464-block  0
    $$$$$: 1464-block  1
    #####: 1465:  msg << "Expected equality of these values:";
    %%%%%: 1465-block  0
    #####: 1466:  msg << "\n  " << lhs_expression;
    %%%%%: 1466-block  0
    %%%%%: 1466-block  1
    #####: 1467:  if (lhs_value != lhs_expression) {
    %%%%%: 1467-block  0
    %%%%%: 1467-block  1
    #####: 1468:    msg << "\n    Which is: " << lhs_value;
    %%%%%: 1468-block  0
    %%%%%: 1468-block  1
        -: 1469:  }
    #####: 1470:  msg << "\n  " << rhs_expression;
    %%%%%: 1470-block  0
    %%%%%: 1470-block  1
    #####: 1471:  if (rhs_value != rhs_expression) {
    %%%%%: 1471-block  0
    %%%%%: 1471-block  1
    #####: 1472:    msg << "\n    Which is: " << rhs_value;
    %%%%%: 1472-block  0
    %%%%%: 1472-block  1
        -: 1473:  }
        -: 1474:
    #####: 1475:  if (ignoring_case) {
    %%%%%: 1475-block  0
    #####: 1476:    msg << "\nIgnoring case";
    %%%%%: 1476-block  0
        -: 1477:  }
        -: 1478:
    #####: 1479:  if (!lhs_value.empty() && !rhs_value.empty()) {
    %%%%%: 1479-block  0
    %%%%%: 1479-block  1
    %%%%%: 1479-block  2
    %%%%%: 1479-block  3
    %%%%%: 1479-block  4
        -: 1480:    const std::vector<std::string> lhs_lines =
    #####: 1481:        SplitEscapedString(lhs_value);
    %%%%%: 1481-block  0
    $$$$$: 1481-block  1
        -: 1482:    const std::vector<std::string> rhs_lines =
    #####: 1483:        SplitEscapedString(rhs_value);
    %%%%%: 1483-block  0
    %%%%%: 1483-block  1
    $$$$$: 1483-block  2
    #####: 1484:    if (lhs_lines.size() > 1 || rhs_lines.size() > 1) {
    %%%%%: 1484-block  0
    %%%%%: 1484-block  1
    %%%%%: 1484-block  2
    %%%%%: 1484-block  3
    %%%%%: 1484-block  4
    #####: 1485:      msg << "\nWith diff:\n"
    %%%%%: 1485-block  0
    #####: 1486:          << edit_distance::CreateUnifiedDiff(lhs_lines, rhs_lines);
    %%%%%: 1486-block  0
    %%%%%: 1486-block  1
    %%%%%: 1486-block  2
    $$$$$: 1486-block  3
    $$$$$: 1486-block  4
        -: 1487:    }
        -: 1488:  }
        -: 1489:
    #####: 1490:  return AssertionFailure() << msg;
    %%%%%: 1490-block  0
    %%%%%: 1490-block  1
    %%%%%: 1490-block  2
    %%%%%: 1490-block  3
    %%%%%: 1490-block  4
    $$$$$: 1490-block  5
    $$$$$: 1490-block  6
        -: 1491:}
        -: 1492:
        -: 1493:// Constructs a failure message for Boolean assertions such as EXPECT_TRUE.
    #####: 1494:std::string GetBoolAssertionFailureMessage(
        -: 1495:    const AssertionResult& assertion_result,
        -: 1496:    const char* expression_text,
        -: 1497:    const char* actual_predicate_value,
        -: 1498:    const char* expected_predicate_value) {
    #####: 1499:  const char* actual_message = assertion_result.message();
    %%%%%: 1499-block  0
    #####: 1500:  Message msg;
    %%%%%: 1500-block  0
    $$$$$: 1500-block  1
    #####: 1501:  msg << "Value of: " << expression_text
    %%%%%: 1501-block  0
    %%%%%: 1501-block  1
    #####: 1502:      << "\n  Actual: " << actual_predicate_value;
    %%%%%: 1502-block  0
    %%%%%: 1502-block  1
    #####: 1503:  if (actual_message[0] != '\0')
    %%%%%: 1503-block  0
    #####: 1504:    msg << " (" << actual_message << ")";
    %%%%%: 1504-block  0
    %%%%%: 1504-block  1
    %%%%%: 1504-block  2
    #####: 1505:  msg << "\nExpected: " << expected_predicate_value;
    %%%%%: 1505-block  0
    %%%%%: 1505-block  1
    #####: 1506:  return msg.GetString();
    %%%%%: 1506-block  0
    %%%%%: 1506-block  1
        -: 1507:}
        -: 1508:
        -: 1509:// Helper function for implementing ASSERT_NEAR.
    #####: 1510:AssertionResult DoubleNearPredFormat(const char* expr1,
        -: 1511:                                     const char* expr2,
        -: 1512:                                     const char* abs_error_expr,
        -: 1513:                                     double val1,
        -: 1514:                                     double val2,
        -: 1515:                                     double abs_error) {
    #####: 1516:  const double diff = fabs(val1 - val2);
    #####: 1517:  if (diff <= abs_error) return AssertionSuccess();
    %%%%%: 1517-block  0
    %%%%%: 1517-block  1
        -: 1518:
        -: 1519:  // Find the value which is closest to zero.
    #####: 1520:  const double min_abs = std::min(fabs(val1), fabs(val2));
    %%%%%: 1520-block  0
        -: 1521:  // Find the distance to the next double from that value.
        -: 1522:  const double epsilon =
    #####: 1523:      nextafter(min_abs, std::numeric_limits<double>::infinity()) - min_abs;
        -: 1524:  // Detect the case where abs_error is so small that EXPECT_NEAR is
        -: 1525:  // effectively the same as EXPECT_EQUAL, and give an informative error
        -: 1526:  // message so that the situation can be more easily understood without
        -: 1527:  // requiring exotic floating-point knowledge.
        -: 1528:  // Don't do an epsilon check if abs_error is zero because that implies
        -: 1529:  // that an equality check was actually intended.
    #####: 1530:  if (!(std::isnan)(val1) && !(std::isnan)(val2) && abs_error > 0 &&
    %%%%%: 1530-block  0
    %%%%%: 1530-block  1
    %%%%%: 1530-block  2
    %%%%%: 1530-block  3
    %%%%%: 1530-block  4
    #####: 1531:      abs_error < epsilon) {
    %%%%%: 1531-block  0
    #####: 1532:    return AssertionFailure()
    %%%%%: 1532-block  0
    %%%%%: 1532-block  1
    $$$$$: 1532-block  2
    $$$$$: 1532-block  3
    #####: 1533:           << "The difference between " << expr1 << " and " << expr2 << " is "
    %%%%%: 1533-block  0
    %%%%%: 1533-block  1
    %%%%%: 1533-block  2
    %%%%%: 1533-block  3
    %%%%%: 1533-block  4
    #####: 1534:           << diff << ", where\n"
    %%%%%: 1534-block  0
    %%%%%: 1534-block  1
    #####: 1535:           << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1535-block  0
    %%%%%: 1535-block  1
    %%%%%: 1535-block  2
    %%%%%: 1535-block  3
    #####: 1536:           << expr2 << " evaluates to " << val2 << ".\nThe abs_error parameter "
    %%%%%: 1536-block  0
    %%%%%: 1536-block  1
    %%%%%: 1536-block  2
    %%%%%: 1536-block  3
    #####: 1537:           << abs_error_expr << " evaluates to " << abs_error
    %%%%%: 1537-block  0
    %%%%%: 1537-block  1
    %%%%%: 1537-block  2
        -: 1538:           << " which is smaller than the minimum distance between doubles for "
    #####: 1539:              "numbers of this magnitude which is "
    %%%%%: 1539-block  0
    #####: 1540:           << epsilon
    %%%%%: 1540-block  0
        -: 1541:           << ", thus making this EXPECT_NEAR check equivalent to "
    #####: 1542:              "EXPECT_EQUAL. Consider using EXPECT_DOUBLE_EQ instead.";
    %%%%%: 1542-block  0
    %%%%%: 1542-block  1
        -: 1543:  }
    #####: 1544:  return AssertionFailure()
    %%%%%: 1544-block  0
    %%%%%: 1544-block  1
    $$$$$: 1544-block  2
    $$$$$: 1544-block  3
    #####: 1545:      << "The difference between " << expr1 << " and " << expr2
    %%%%%: 1545-block  0
    %%%%%: 1545-block  1
    %%%%%: 1545-block  2
    %%%%%: 1545-block  3
    #####: 1546:      << " is " << diff << ", which exceeds " << abs_error_expr << ", where\n"
    %%%%%: 1546-block  0
    %%%%%: 1546-block  1
    %%%%%: 1546-block  2
    %%%%%: 1546-block  3
    %%%%%: 1546-block  4
    #####: 1547:      << expr1 << " evaluates to " << val1 << ",\n"
    %%%%%: 1547-block  0
    %%%%%: 1547-block  1
    %%%%%: 1547-block  2
    %%%%%: 1547-block  3
    #####: 1548:      << expr2 << " evaluates to " << val2 << ", and\n"
    %%%%%: 1548-block  0
    %%%%%: 1548-block  1
    %%%%%: 1548-block  2
    %%%%%: 1548-block  3
    #####: 1549:      << abs_error_expr << " evaluates to " << abs_error << ".";
    %%%%%: 1549-block  0
    %%%%%: 1549-block  1
    %%%%%: 1549-block  2
    %%%%%: 1549-block  3
    %%%%%: 1549-block  4
        -: 1550:}
        -: 1551:
        -: 1552:
        -: 1553:// Helper template for implementing FloatLE() and DoubleLE().
        -: 1554:template <typename RawType>
    #####: 1555:AssertionResult FloatingPointLE(const char* expr1,
        -: 1556:                                const char* expr2,
        -: 1557:                                RawType val1,
        -: 1558:                                RawType val2) {
        -: 1559:  // Returns success if val1 is less than val2,
    #####: 1560:  if (val1 < val2) {
    #####: 1561:    return AssertionSuccess();
        -: 1562:  }
        -: 1563:
        -: 1564:  // or if val1 is almost equal to val2.
    #####: 1565:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    #####: 1566:  if (lhs.AlmostEquals(rhs)) {
    #####: 1567:    return AssertionSuccess();
        -: 1568:  }
        -: 1569:
        -: 1570:  // Note that the above two checks will both fail if either val1 or
        -: 1571:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1572:  // any predicate involving a NaN must return false.
        -: 1573:
    #####: 1574:  ::std::stringstream val1_ss;
    #####: 1575:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1576:          << val1;
        -: 1577:
    #####: 1578:  ::std::stringstream val2_ss;
    #####: 1579:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    #####: 1580:          << val2;
        -: 1581:
    #####: 1582:  return AssertionFailure()
    #####: 1583:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    #####: 1584:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    #####: 1585:      << StringStreamToString(&val2_ss);
        -: 1586:}
------------------
_ZN7testing8internal15FloatingPointLEIdEENS_15AssertionResultEPKcS4_T_S5_:
    #####: 1555:AssertionResult FloatingPointLE(const char* expr1,
        -: 1556:                                const char* expr2,
        -: 1557:                                RawType val1,
        -: 1558:                                RawType val2) {
        -: 1559:  // Returns success if val1 is less than val2,
    #####: 1560:  if (val1 < val2) {
    %%%%%: 1560-block  0
    #####: 1561:    return AssertionSuccess();
    %%%%%: 1561-block  0
        -: 1562:  }
        -: 1563:
        -: 1564:  // or if val1 is almost equal to val2.
    #####: 1565:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1565-block  0
    #####: 1566:  if (lhs.AlmostEquals(rhs)) {
    %%%%%: 1566-block  0
    #####: 1567:    return AssertionSuccess();
    %%%%%: 1567-block  0
        -: 1568:  }
        -: 1569:
        -: 1570:  // Note that the above two checks will both fail if either val1 or
        -: 1571:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1572:  // any predicate involving a NaN must return false.
        -: 1573:
    #####: 1574:  ::std::stringstream val1_ss;
    %%%%%: 1574-block  0
    $$$$$: 1574-block  1
    #####: 1575:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1575-block  0
    #####: 1576:          << val1;
    %%%%%: 1576-block  0
        -: 1577:
    #####: 1578:  ::std::stringstream val2_ss;
    %%%%%: 1578-block  0
    $$$$$: 1578-block  1
    #####: 1579:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1579-block  0
    #####: 1580:          << val2;
    %%%%%: 1580-block  0
        -: 1581:
    #####: 1582:  return AssertionFailure()
    %%%%%: 1582-block  0
    $$$$$: 1582-block  1
    $$$$$: 1582-block  2
    #####: 1583:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1583-block  0
    %%%%%: 1583-block  1
    %%%%%: 1583-block  2
    %%%%%: 1583-block  3
    %%%%%: 1583-block  4
    #####: 1584:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1584-block  0
    %%%%%: 1584-block  1
    %%%%%: 1584-block  2
    %%%%%: 1584-block  3
    $$$$$: 1584-block  4
    $$$$$: 1584-block  5
    #####: 1585:      << StringStreamToString(&val2_ss);
    %%%%%: 1585-block  0
    %%%%%: 1585-block  1
    %%%%%: 1585-block  2
    %%%%%: 1585-block  3
    $$$$$: 1585-block  4
    $$$$$: 1585-block  5
        -: 1586:}
------------------
_ZN7testing8internal15FloatingPointLEIfEENS_15AssertionResultEPKcS4_T_S5_:
    #####: 1555:AssertionResult FloatingPointLE(const char* expr1,
        -: 1556:                                const char* expr2,
        -: 1557:                                RawType val1,
        -: 1558:                                RawType val2) {
        -: 1559:  // Returns success if val1 is less than val2,
    #####: 1560:  if (val1 < val2) {
    %%%%%: 1560-block  0
    #####: 1561:    return AssertionSuccess();
    %%%%%: 1561-block  0
        -: 1562:  }
        -: 1563:
        -: 1564:  // or if val1 is almost equal to val2.
    #####: 1565:  const FloatingPoint<RawType> lhs(val1), rhs(val2);
    %%%%%: 1565-block  0
    #####: 1566:  if (lhs.AlmostEquals(rhs)) {
    %%%%%: 1566-block  0
    #####: 1567:    return AssertionSuccess();
    %%%%%: 1567-block  0
        -: 1568:  }
        -: 1569:
        -: 1570:  // Note that the above two checks will both fail if either val1 or
        -: 1571:  // val2 is NaN, as the IEEE floating-point standard requires that
        -: 1572:  // any predicate involving a NaN must return false.
        -: 1573:
    #####: 1574:  ::std::stringstream val1_ss;
    %%%%%: 1574-block  0
    $$$$$: 1574-block  1
    #####: 1575:  val1_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1575-block  0
    #####: 1576:          << val1;
    %%%%%: 1576-block  0
        -: 1577:
    #####: 1578:  ::std::stringstream val2_ss;
    %%%%%: 1578-block  0
    $$$$$: 1578-block  1
    #####: 1579:  val2_ss << std::setprecision(std::numeric_limits<RawType>::digits10 + 2)
    %%%%%: 1579-block  0
    #####: 1580:          << val2;
    %%%%%: 1580-block  0
        -: 1581:
    #####: 1582:  return AssertionFailure()
    %%%%%: 1582-block  0
    $$$$$: 1582-block  1
    $$$$$: 1582-block  2
    #####: 1583:      << "Expected: (" << expr1 << ") <= (" << expr2 << ")\n"
    %%%%%: 1583-block  0
    %%%%%: 1583-block  1
    %%%%%: 1583-block  2
    %%%%%: 1583-block  3
    %%%%%: 1583-block  4
    #####: 1584:      << "  Actual: " << StringStreamToString(&val1_ss) << " vs "
    %%%%%: 1584-block  0
    %%%%%: 1584-block  1
    %%%%%: 1584-block  2
    %%%%%: 1584-block  3
    $$$$$: 1584-block  4
    $$$$$: 1584-block  5
    #####: 1585:      << StringStreamToString(&val2_ss);
    %%%%%: 1585-block  0
    %%%%%: 1585-block  1
    %%%%%: 1585-block  2
    %%%%%: 1585-block  3
    $$$$$: 1585-block  4
    $$$$$: 1585-block  5
        -: 1586:}
------------------
        -: 1587:
        -: 1588:}  // namespace internal
        -: 1589:
        -: 1590:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1591:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
    #####: 1592:AssertionResult FloatLE(const char* expr1, const char* expr2,
        -: 1593:                        float val1, float val2) {
    #####: 1594:  return internal::FloatingPointLE<float>(expr1, expr2, val1, val2);
    %%%%%: 1594-block  0
        -: 1595:}
        -: 1596:
        -: 1597:// Asserts that val1 is less than, or almost equal to, val2.  Fails
        -: 1598:// otherwise.  In particular, it fails if either val1 or val2 is NaN.
    #####: 1599:AssertionResult DoubleLE(const char* expr1, const char* expr2,
        -: 1600:                         double val1, double val2) {
    #####: 1601:  return internal::FloatingPointLE<double>(expr1, expr2, val1, val2);
    %%%%%: 1601-block  0
        -: 1602:}
        -: 1603:
        -: 1604:namespace internal {
        -: 1605:
        -: 1606:// The helper function for {ASSERT|EXPECT}_EQ with int or enum
        -: 1607:// arguments.
    #####: 1608:AssertionResult CmpHelperEQ(const char* lhs_expression,
        -: 1609:                            const char* rhs_expression,
        -: 1610:                            BiggestInt lhs,
        -: 1611:                            BiggestInt rhs) {
    #####: 1612:  if (lhs == rhs) {
    %%%%%: 1612-block  0
    #####: 1613:    return AssertionSuccess();
    %%%%%: 1613-block  0
        -: 1614:  }
        -: 1615:
        -: 1616:  return EqFailure(lhs_expression,
        -: 1617:                   rhs_expression,
    #####: 1618:                   FormatForComparisonFailureMessage(lhs, rhs),
    %%%%%: 1618-block  0
    $$$$$: 1618-block  1
    $$$$$: 1618-block  2
    #####: 1619:                   FormatForComparisonFailureMessage(rhs, lhs),
    %%%%%: 1619-block  0
    $$$$$: 1619-block  1
    #####: 1620:                   false);
    %%%%%: 1620-block  0
        -: 1621:}
        -: 1622:
        -: 1623:// A macro for implementing the helper functions needed to implement
        -: 1624:// ASSERT_?? and EXPECT_?? with integer or enum arguments.  It is here
        -: 1625:// just to avoid copy-and-paste of similar code.
        -: 1626:#define GTEST_IMPL_CMP_HELPER_(op_name, op)\
        -: 1627:AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
        -: 1628:                                   BiggestInt val1, BiggestInt val2) {\
        -: 1629:  if (val1 op val2) {\
        -: 1630:    return AssertionSuccess();\
        -: 1631:  } else {\
        -: 1632:    return AssertionFailure() \
        -: 1633:        << "Expected: (" << expr1 << ") " #op " (" << expr2\
        -: 1634:        << "), actual: " << FormatForComparisonFailureMessage(val1, val2)\
        -: 1635:        << " vs " << FormatForComparisonFailureMessage(val2, val1);\
        -: 1636:  }\
        -: 1637:}
        -: 1638:
        -: 1639:// Implements the helper function for {ASSERT|EXPECT}_NE with int or
        -: 1640:// enum arguments.
    #####: 1641:GTEST_IMPL_CMP_HELPER_(NE, !=)
    %%%%%: 1641-block  0
    %%%%%: 1641-block  1
    %%%%%: 1641-block  2
    %%%%%: 1641-block  3
    %%%%%: 1641-block  4
    %%%%%: 1641-block  5
    %%%%%: 1641-block  6
    %%%%%: 1641-block  7
    %%%%%: 1641-block  8
    %%%%%: 1641-block  9
    %%%%%: 1641-block 10
    %%%%%: 1641-block 11
    %%%%%: 1641-block 12
    %%%%%: 1641-block 13
    $$$$$: 1641-block 14
    $$$$$: 1641-block 15
    $$$$$: 1641-block 16
    $$$$$: 1641-block 17
    $$$$$: 1641-block 18
        -: 1642:// Implements the helper function for {ASSERT|EXPECT}_LE with int or
        -: 1643:// enum arguments.
    #####: 1644:GTEST_IMPL_CMP_HELPER_(LE, <=)
    %%%%%: 1644-block  0
    %%%%%: 1644-block  1
    %%%%%: 1644-block  2
    %%%%%: 1644-block  3
    %%%%%: 1644-block  4
    %%%%%: 1644-block  5
    %%%%%: 1644-block  6
    %%%%%: 1644-block  7
    %%%%%: 1644-block  8
    %%%%%: 1644-block  9
    %%%%%: 1644-block 10
    %%%%%: 1644-block 11
    %%%%%: 1644-block 12
    %%%%%: 1644-block 13
    $$$$$: 1644-block 14
    $$$$$: 1644-block 15
    $$$$$: 1644-block 16
    $$$$$: 1644-block 17
    $$$$$: 1644-block 18
        -: 1645:// Implements the helper function for {ASSERT|EXPECT}_LT with int or
        -: 1646:// enum arguments.
    #####: 1647:GTEST_IMPL_CMP_HELPER_(LT, < )
    %%%%%: 1647-block  0
    %%%%%: 1647-block  1
    %%%%%: 1647-block  2
    %%%%%: 1647-block  3
    %%%%%: 1647-block  4
    %%%%%: 1647-block  5
    %%%%%: 1647-block  6
    %%%%%: 1647-block  7
    %%%%%: 1647-block  8
    %%%%%: 1647-block  9
    %%%%%: 1647-block 10
    %%%%%: 1647-block 11
    %%%%%: 1647-block 12
    %%%%%: 1647-block 13
    $$$$$: 1647-block 14
    $$$$$: 1647-block 15
    $$$$$: 1647-block 16
    $$$$$: 1647-block 17
    $$$$$: 1647-block 18
        -: 1648:// Implements the helper function for {ASSERT|EXPECT}_GE with int or
        -: 1649:// enum arguments.
    #####: 1650:GTEST_IMPL_CMP_HELPER_(GE, >=)
    %%%%%: 1650-block  0
    %%%%%: 1650-block  1
    %%%%%: 1650-block  2
    %%%%%: 1650-block  3
    %%%%%: 1650-block  4
    %%%%%: 1650-block  5
    %%%%%: 1650-block  6
    %%%%%: 1650-block  7
    %%%%%: 1650-block  8
    %%%%%: 1650-block  9
    %%%%%: 1650-block 10
    %%%%%: 1650-block 11
    %%%%%: 1650-block 12
    %%%%%: 1650-block 13
    $$$$$: 1650-block 14
    $$$$$: 1650-block 15
    $$$$$: 1650-block 16
    $$$$$: 1650-block 17
    $$$$$: 1650-block 18
        -: 1651:// Implements the helper function for {ASSERT|EXPECT}_GT with int or
        -: 1652:// enum arguments.
    #####: 1653:GTEST_IMPL_CMP_HELPER_(GT, > )
    %%%%%: 1653-block  0
    %%%%%: 1653-block  1
    %%%%%: 1653-block  2
    %%%%%: 1653-block  3
    %%%%%: 1653-block  4
    %%%%%: 1653-block  5
    %%%%%: 1653-block  6
    %%%%%: 1653-block  7
    %%%%%: 1653-block  8
    %%%%%: 1653-block  9
    %%%%%: 1653-block 10
    %%%%%: 1653-block 11
    %%%%%: 1653-block 12
    %%%%%: 1653-block 13
    $$$$$: 1653-block 14
    $$$$$: 1653-block 15
    $$$$$: 1653-block 16
    $$$$$: 1653-block 17
    $$$$$: 1653-block 18
        -: 1654:
        -: 1655:#undef GTEST_IMPL_CMP_HELPER_
        -: 1656:
        -: 1657:// The helper function for {ASSERT|EXPECT}_STREQ.
    #####: 1658:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 1659:                               const char* rhs_expression,
        -: 1660:                               const char* lhs,
        -: 1661:                               const char* rhs) {
    #####: 1662:  if (String::CStringEquals(lhs, rhs)) {
    %%%%%: 1662-block  0
    #####: 1663:    return AssertionSuccess();
    %%%%%: 1663-block  0
        -: 1664:  }
        -: 1665:
        -: 1666:  return EqFailure(lhs_expression,
        -: 1667:                   rhs_expression,
    #####: 1668:                   PrintToString(lhs),
    %%%%%: 1668-block  0
    $$$$$: 1668-block  1
    $$$$$: 1668-block  2
    #####: 1669:                   PrintToString(rhs),
    %%%%%: 1669-block  0
    $$$$$: 1669-block  1
    #####: 1670:                   false);
    %%%%%: 1670-block  0
        -: 1671:}
        -: 1672:
        -: 1673:// The helper function for {ASSERT|EXPECT}_STRCASEEQ.
    #####: 1674:AssertionResult CmpHelperSTRCASEEQ(const char* lhs_expression,
        -: 1675:                                   const char* rhs_expression,
        -: 1676:                                   const char* lhs,
        -: 1677:                                   const char* rhs) {
    #####: 1678:  if (String::CaseInsensitiveCStringEquals(lhs, rhs)) {
    %%%%%: 1678-block  0
    #####: 1679:    return AssertionSuccess();
    %%%%%: 1679-block  0
        -: 1680:  }
        -: 1681:
        -: 1682:  return EqFailure(lhs_expression,
        -: 1683:                   rhs_expression,
    #####: 1684:                   PrintToString(lhs),
    %%%%%: 1684-block  0
    $$$$$: 1684-block  1
    $$$$$: 1684-block  2
    #####: 1685:                   PrintToString(rhs),
    %%%%%: 1685-block  0
    $$$$$: 1685-block  1
    #####: 1686:                   true);
    %%%%%: 1686-block  0
        -: 1687:}
        -: 1688:
        -: 1689:// The helper function for {ASSERT|EXPECT}_STRNE.
    #####: 1690:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 1691:                               const char* s2_expression,
        -: 1692:                               const char* s1,
        -: 1693:                               const char* s2) {
    #####: 1694:  if (!String::CStringEquals(s1, s2)) {
    %%%%%: 1694-block  0
    #####: 1695:    return AssertionSuccess();
    %%%%%: 1695-block  0
        -: 1696:  } else {
    #####: 1697:    return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1697-block  0
    %%%%%: 1697-block  1
    %%%%%: 1697-block  2
    %%%%%: 1697-block  3
    $$$$$: 1697-block  4
    #####: 1698:                              << s2_expression << "), actual: \""
    %%%%%: 1698-block  0
    %%%%%: 1698-block  1
    #####: 1699:                              << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1699-block  0
    %%%%%: 1699-block  1
    %%%%%: 1699-block  2
    %%%%%: 1699-block  3
    %%%%%: 1699-block  4
        -: 1700:  }
        -: 1701:}
        -: 1702:
        -: 1703:// The helper function for {ASSERT|EXPECT}_STRCASENE.
    #####: 1704:AssertionResult CmpHelperSTRCASENE(const char* s1_expression,
        -: 1705:                                   const char* s2_expression,
        -: 1706:                                   const char* s1,
        -: 1707:                                   const char* s2) {
    #####: 1708:  if (!String::CaseInsensitiveCStringEquals(s1, s2)) {
    %%%%%: 1708-block  0
    #####: 1709:    return AssertionSuccess();
    %%%%%: 1709-block  0
        -: 1710:  } else {
    #####: 1711:    return AssertionFailure()
    %%%%%: 1711-block  0
    %%%%%: 1711-block  1
    $$$$$: 1711-block  2
    #####: 1712:        << "Expected: (" << s1_expression << ") != ("
    %%%%%: 1712-block  0
    %%%%%: 1712-block  1
    #####: 1713:        << s2_expression << ") (ignoring case), actual: \""
    %%%%%: 1713-block  0
    %%%%%: 1713-block  1
    #####: 1714:        << s1 << "\" vs \"" << s2 << "\"";
    %%%%%: 1714-block  0
    %%%%%: 1714-block  1
    %%%%%: 1714-block  2
    %%%%%: 1714-block  3
    %%%%%: 1714-block  4
        -: 1715:  }
        -: 1716:}
        -: 1717:
        -: 1718:}  // namespace internal
        -: 1719:
        -: 1720:namespace {
        -: 1721:
        -: 1722:// Helper functions for implementing IsSubString() and IsNotSubstring().
        -: 1723:
        -: 1724:// This group of overloaded functions return true if and only if needle
        -: 1725:// is a substring of haystack.  NULL is considered a substring of
        -: 1726:// itself only.
        -: 1727:
    #####: 1728:bool IsSubstringPred(const char* needle, const char* haystack) {
    #####: 1729:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1729-block  0
    %%%%%: 1729-block  1
    %%%%%: 1729-block  2
        -: 1730:
    #####: 1731:  return strstr(haystack, needle) != nullptr;
    %%%%%: 1731-block  0
        -: 1732:}
        -: 1733:
    #####: 1734:bool IsSubstringPred(const wchar_t* needle, const wchar_t* haystack) {
    #####: 1735:  if (needle == nullptr || haystack == nullptr) return needle == haystack;
    %%%%%: 1735-block  0
    %%%%%: 1735-block  1
    %%%%%: 1735-block  2
        -: 1736:
    #####: 1737:  return wcsstr(haystack, needle) != nullptr;
    %%%%%: 1737-block  0
        -: 1738:}
        -: 1739:
        -: 1740:// StringType here can be either ::std::string or ::std::wstring.
        -: 1741:template <typename StringType>
    #####: 1742:bool IsSubstringPred(const StringType& needle,
        -: 1743:                     const StringType& haystack) {
    #####: 1744:  return haystack.find(needle) != StringType::npos;
    %%%%%: 1744-block  0
        -: 1745:}
        -: 1746:
        -: 1747:// This function implements either IsSubstring() or IsNotSubstring(),
        -: 1748:// depending on the value of the expected_to_be_substring parameter.
        -: 1749:// StringType here can be const char*, const wchar_t*, ::std::string,
        -: 1750:// or ::std::wstring.
        -: 1751:template <typename StringType>
    #####: 1752:AssertionResult IsSubstringImpl(
        -: 1753:    bool expected_to_be_substring,
        -: 1754:    const char* needle_expr, const char* haystack_expr,
        -: 1755:    const StringType& needle, const StringType& haystack) {
    #####: 1756:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    #####: 1757:    return AssertionSuccess();
        -: 1758:
    #####: 1759:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1760:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    #####: 1761:  return AssertionFailure()
    #####: 1762:      << "Value of: " << needle_expr << "\n"
    #####: 1763:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    #####: 1764:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    #####: 1765:      << "a substring of " << haystack_expr << "\n"
    #####: 1766:      << "Which is: " << begin_string_quote << haystack << "\"";
        -: 1767:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplISsEENS_15AssertionResultEbPKcS4_RKT_S7_:
    #####: 1752:AssertionResult IsSubstringImpl(
        -: 1753:    bool expected_to_be_substring,
        -: 1754:    const char* needle_expr, const char* haystack_expr,
        -: 1755:    const StringType& needle, const StringType& haystack) {
    #####: 1756:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1756-block  0
    #####: 1757:    return AssertionSuccess();
    %%%%%: 1757-block  0
        -: 1758:
    #####: 1759:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1760:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    #####: 1761:  return AssertionFailure()
    %%%%%: 1761-block  0
    $$$$$: 1761-block  1
    $$$$$: 1761-block  2
    #####: 1762:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1762-block  0
    %%%%%: 1762-block  1
    %%%%%: 1762-block  2
    #####: 1763:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1763-block  0
    %%%%%: 1763-block  1
    %%%%%: 1763-block  2
    %%%%%: 1763-block  3
    #####: 1764:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1764-block  0
    %%%%%: 1764-block  1
    %%%%%: 1764-block  2
    %%%%%: 1764-block  3
    %%%%%: 1764-block  4
    %%%%%: 1764-block  5
    $$$$$: 1764-block  6
    #####: 1765:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1765-block  0
    %%%%%: 1765-block  1
    %%%%%: 1765-block  2
    #####: 1766:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1766-block  0
    %%%%%: 1766-block  1
    %%%%%: 1766-block  2
    %%%%%: 1766-block  3
    %%%%%: 1766-block  4
        -: 1767:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKwEENS_15AssertionResultEbPKcS6_RKT_S9_:
    #####: 1752:AssertionResult IsSubstringImpl(
        -: 1753:    bool expected_to_be_substring,
        -: 1754:    const char* needle_expr, const char* haystack_expr,
        -: 1755:    const StringType& needle, const StringType& haystack) {
    #####: 1756:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1756-block  0
    #####: 1757:    return AssertionSuccess();
    %%%%%: 1757-block  0
        -: 1758:
    #####: 1759:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1760:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    #####: 1761:  return AssertionFailure()
    %%%%%: 1761-block  0
    $$$$$: 1761-block  1
    $$$$$: 1761-block  2
    #####: 1762:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1762-block  0
    %%%%%: 1762-block  1
    %%%%%: 1762-block  2
    #####: 1763:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1763-block  0
    %%%%%: 1763-block  1
    %%%%%: 1763-block  2
    %%%%%: 1763-block  3
    #####: 1764:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1764-block  0
    %%%%%: 1764-block  1
    %%%%%: 1764-block  2
    %%%%%: 1764-block  3
    %%%%%: 1764-block  4
    %%%%%: 1764-block  5
    $$$$$: 1764-block  6
    #####: 1765:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1765-block  0
    %%%%%: 1765-block  1
    %%%%%: 1765-block  2
    #####: 1766:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1766-block  0
    %%%%%: 1766-block  1
    %%%%%: 1766-block  2
    %%%%%: 1766-block  3
    %%%%%: 1766-block  4
        -: 1767:}
------------------
_ZN7testing12_GLOBAL__N_115IsSubstringImplIPKcEENS_15AssertionResultEbS3_S3_RKT_S7_:
    #####: 1752:AssertionResult IsSubstringImpl(
        -: 1753:    bool expected_to_be_substring,
        -: 1754:    const char* needle_expr, const char* haystack_expr,
        -: 1755:    const StringType& needle, const StringType& haystack) {
    #####: 1756:  if (IsSubstringPred(needle, haystack) == expected_to_be_substring)
    %%%%%: 1756-block  0
    #####: 1757:    return AssertionSuccess();
    %%%%%: 1757-block  0
        -: 1758:
    #####: 1759:  const bool is_wide_string = sizeof(needle[0]) > 1;
    #####: 1760:  const char* const begin_string_quote = is_wide_string ? "L\"" : "\"";
    #####: 1761:  return AssertionFailure()
    %%%%%: 1761-block  0
    $$$$$: 1761-block  1
    $$$$$: 1761-block  2
    #####: 1762:      << "Value of: " << needle_expr << "\n"
    %%%%%: 1762-block  0
    %%%%%: 1762-block  1
    %%%%%: 1762-block  2
    #####: 1763:      << "  Actual: " << begin_string_quote << needle << "\"\n"
    %%%%%: 1763-block  0
    %%%%%: 1763-block  1
    %%%%%: 1763-block  2
    %%%%%: 1763-block  3
    #####: 1764:      << "Expected: " << (expected_to_be_substring ? "" : "not ")
    %%%%%: 1764-block  0
    %%%%%: 1764-block  1
    %%%%%: 1764-block  2
    %%%%%: 1764-block  3
    %%%%%: 1764-block  4
    %%%%%: 1764-block  5
    $$$$$: 1764-block  6
    #####: 1765:      << "a substring of " << haystack_expr << "\n"
    %%%%%: 1765-block  0
    %%%%%: 1765-block  1
    %%%%%: 1765-block  2
    #####: 1766:      << "Which is: " << begin_string_quote << haystack << "\"";
    %%%%%: 1766-block  0
    %%%%%: 1766-block  1
    %%%%%: 1766-block  2
    %%%%%: 1766-block  3
    %%%%%: 1766-block  4
        -: 1767:}
------------------
        -: 1768:
        -: 1769:}  // namespace
        -: 1770:
        -: 1771:// IsSubstring() and IsNotSubstring() check whether needle is a
        -: 1772:// substring of haystack (NULL is considered a substring of itself
        -: 1773:// only), and return an appropriate error message when they fail.
        -: 1774:
    #####: 1775:AssertionResult IsSubstring(
        -: 1776:    const char* needle_expr, const char* haystack_expr,
        -: 1777:    const char* needle, const char* haystack) {
    #####: 1778:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1778-block  0
        -: 1779:}
        -: 1780:
    #####: 1781:AssertionResult IsSubstring(
        -: 1782:    const char* needle_expr, const char* haystack_expr,
        -: 1783:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1784:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1784-block  0
        -: 1785:}
        -: 1786:
    #####: 1787:AssertionResult IsNotSubstring(
        -: 1788:    const char* needle_expr, const char* haystack_expr,
        -: 1789:    const char* needle, const char* haystack) {
    #####: 1790:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1790-block  0
        -: 1791:}
        -: 1792:
    #####: 1793:AssertionResult IsNotSubstring(
        -: 1794:    const char* needle_expr, const char* haystack_expr,
        -: 1795:    const wchar_t* needle, const wchar_t* haystack) {
    #####: 1796:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1796-block  0
        -: 1797:}
        -: 1798:
    #####: 1799:AssertionResult IsSubstring(
        -: 1800:    const char* needle_expr, const char* haystack_expr,
        -: 1801:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1802:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1802-block  0
        -: 1803:}
        -: 1804:
    #####: 1805:AssertionResult IsNotSubstring(
        -: 1806:    const char* needle_expr, const char* haystack_expr,
        -: 1807:    const ::std::string& needle, const ::std::string& haystack) {
    #####: 1808:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
    %%%%%: 1808-block  0
        -: 1809:}
        -: 1810:
        -: 1811:#if GTEST_HAS_STD_WSTRING
        -: 1812:AssertionResult IsSubstring(
        -: 1813:    const char* needle_expr, const char* haystack_expr,
        -: 1814:    const ::std::wstring& needle, const ::std::wstring& haystack) {
        -: 1815:  return IsSubstringImpl(true, needle_expr, haystack_expr, needle, haystack);
        -: 1816:}
        -: 1817:
        -: 1818:AssertionResult IsNotSubstring(
        -: 1819:    const char* needle_expr, const char* haystack_expr,
        -: 1820:    const ::std::wstring& needle, const ::std::wstring& haystack) {
        -: 1821:  return IsSubstringImpl(false, needle_expr, haystack_expr, needle, haystack);
        -: 1822:}
        -: 1823:#endif  // GTEST_HAS_STD_WSTRING
        -: 1824:
        -: 1825:namespace internal {
        -: 1826:
        -: 1827:#if GTEST_OS_WINDOWS
        -: 1828:
        -: 1829:namespace {
        -: 1830:
        -: 1831:// Helper function for IsHRESULT{SuccessFailure} predicates
        -: 1832:AssertionResult HRESULTFailureHelper(const char* expr,
        -: 1833:                                     const char* expected,
        -: 1834:                                     long hr) {  // NOLINT
        -: 1835:# if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_TV_TITLE
        -: 1836:
        -: 1837:  // Windows CE doesn't support FormatMessage.
        -: 1838:  const char error_text[] = "";
        -: 1839:
        -: 1840:# else
        -: 1841:
        -: 1842:  // Looks up the human-readable system message for the HRESULT code
        -: 1843:  // and since we're not passing any params to FormatMessage, we don't
        -: 1844:  // want inserts expanded.
        -: 1845:  const DWORD kFlags = FORMAT_MESSAGE_FROM_SYSTEM |
        -: 1846:                       FORMAT_MESSAGE_IGNORE_INSERTS;
        -: 1847:  const DWORD kBufSize = 4096;
        -: 1848:  // Gets the system's human readable message string for this HRESULT.
        -: 1849:  char error_text[kBufSize] = { '\0' };
        -: 1850:  DWORD message_length = ::FormatMessageA(kFlags,
        -: 1851:                                          0,   // no source, we're asking system
        -: 1852:                                          static_cast<DWORD>(hr),  // the error
        -: 1853:                                          0,   // no line width restrictions
        -: 1854:                                          error_text,  // output buffer
        -: 1855:                                          kBufSize,    // buf size
        -: 1856:                                          nullptr);  // no arguments for inserts
        -: 1857:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
        -: 1858:  for (; message_length && IsSpace(error_text[message_length - 1]);
        -: 1859:          --message_length) {
        -: 1860:    error_text[message_length - 1] = '\0';
        -: 1861:  }
        -: 1862:
        -: 1863:# endif  // GTEST_OS_WINDOWS_MOBILE
        -: 1864:
        -: 1865:  const std::string error_hex("0x" + String::FormatHexInt(hr));
        -: 1866:  return ::testing::AssertionFailure()
        -: 1867:      << "Expected: " << expr << " " << expected << ".\n"
        -: 1868:      << "  Actual: " << error_hex << " " << error_text << "\n";
        -: 1869:}
        -: 1870:
        -: 1871:}  // namespace
        -: 1872:
        -: 1873:AssertionResult IsHRESULTSuccess(const char* expr, long hr) {  // NOLINT
        -: 1874:  if (SUCCEEDED(hr)) {
        -: 1875:    return AssertionSuccess();
        -: 1876:  }
        -: 1877:  return HRESULTFailureHelper(expr, "succeeds", hr);
        -: 1878:}
        -: 1879:
        -: 1880:AssertionResult IsHRESULTFailure(const char* expr, long hr) {  // NOLINT
        -: 1881:  if (FAILED(hr)) {
        -: 1882:    return AssertionSuccess();
        -: 1883:  }
        -: 1884:  return HRESULTFailureHelper(expr, "fails", hr);
        -: 1885:}
        -: 1886:
        -: 1887:#endif  // GTEST_OS_WINDOWS
        -: 1888:
        -: 1889:// Utility functions for encoding Unicode text (wide strings) in
        -: 1890:// UTF-8.
        -: 1891:
        -: 1892:// A Unicode code-point can have up to 21 bits, and is encoded in UTF-8
        -: 1893:// like this:
        -: 1894://
        -: 1895:// Code-point length   Encoding
        -: 1896://   0 -  7 bits       0xxxxxxx
        -: 1897://   8 - 11 bits       110xxxxx 10xxxxxx
        -: 1898://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
        -: 1899://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
        -: 1900:
        -: 1901:// The maximum code-point a one-byte UTF-8 sequence can represent.
        -: 1902:constexpr uint32_t kMaxCodePoint1 = (static_cast<uint32_t>(1) <<  7) - 1;
        -: 1903:
        -: 1904:// The maximum code-point a two-byte UTF-8 sequence can represent.
        -: 1905:constexpr uint32_t kMaxCodePoint2 = (static_cast<uint32_t>(1) << (5 + 6)) - 1;
        -: 1906:
        -: 1907:// The maximum code-point a three-byte UTF-8 sequence can represent.
        -: 1908:constexpr uint32_t kMaxCodePoint3 = (static_cast<uint32_t>(1) << (4 + 2*6)) - 1;
        -: 1909:
        -: 1910:// The maximum code-point a four-byte UTF-8 sequence can represent.
        -: 1911:constexpr uint32_t kMaxCodePoint4 = (static_cast<uint32_t>(1) << (3 + 3*6)) - 1;
        -: 1912:
        -: 1913:// Chops off the n lowest bits from a bit pattern.  Returns the n
        -: 1914:// lowest bits.  As a side effect, the original bit pattern will be
        -: 1915:// shifted to the right by n bits.
    #####: 1916:inline uint32_t ChopLowBits(uint32_t* bits, int n) {
    #####: 1917:  const uint32_t low_bits = *bits & ((static_cast<uint32_t>(1) << n) - 1);
    #####: 1918:  *bits >>= n;
    #####: 1919:  return low_bits;
    %%%%%: 1919-block  0
        -: 1920:}
        -: 1921:
        -: 1922:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
        -: 1923:// code_point parameter is of type uint32_t because wchar_t may not be
        -: 1924:// wide enough to contain a code point.
        -: 1925:// If the code_point is not a valid Unicode code point
        -: 1926:// (i.e. outside of Unicode range U+0 to U+10FFFF) it will be converted
        -: 1927:// to "(Invalid Unicode 0xXXXXXXXX)".
    #####: 1928:std::string CodePointToUtf8(uint32_t code_point) {
    #####: 1929:  if (code_point > kMaxCodePoint4) {
    %%%%%: 1929-block  0
    #####: 1930:    return "(Invalid Unicode 0x" + String::FormatHexUInt32(code_point) + ")";
    %%%%%: 1930-block  0
    %%%%%: 1930-block  1
    %%%%%: 1930-block  2
    %%%%%: 1930-block  3
    $$$$$: 1930-block  4
    $$$$$: 1930-block  5
    $$$$$: 1930-block  6
    $$$$$: 1930-block  7
        -: 1931:  }
        -: 1932:
        -: 1933:  char str[5];  // Big enough for the largest valid code point.
    #####: 1934:  if (code_point <= kMaxCodePoint1) {
    %%%%%: 1934-block  0
    #####: 1935:    str[1] = '\0';
    #####: 1936:    str[0] = static_cast<char>(code_point);                          // 0xxxxxxx
    %%%%%: 1936-block  0
    #####: 1937:  } else if (code_point <= kMaxCodePoint2) {
    %%%%%: 1937-block  0
    #####: 1938:    str[2] = '\0';
    #####: 1939:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1939-block  0
    #####: 1940:    str[0] = static_cast<char>(0xC0 | code_point);                   // 110xxxxx
    #####: 1941:  } else if (code_point <= kMaxCodePoint3) {
    %%%%%: 1941-block  0
    #####: 1942:    str[3] = '\0';
    #####: 1943:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1943-block  0
    #####: 1944:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    #####: 1945:    str[0] = static_cast<char>(0xE0 | code_point);                   // 1110xxxx
        -: 1946:  } else {  // code_point <= kMaxCodePoint4
    #####: 1947:    str[4] = '\0';
    #####: 1948:    str[3] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    %%%%%: 1948-block  0
    #####: 1949:    str[2] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    #####: 1950:    str[1] = static_cast<char>(0x80 | ChopLowBits(&code_point, 6));  // 10xxxxxx
    #####: 1951:    str[0] = static_cast<char>(0xF0 | code_point);                   // 11110xxx
        -: 1952:  }
    #####: 1953:  return str;
    %%%%%: 1953-block  0
        -: 1954:}
        -: 1955:
        -: 1956:// The following two functions only make sense if the system
        -: 1957:// uses UTF-16 for wide string encoding. All supported systems
        -: 1958:// with 16 bit wchar_t (Windows, Cygwin) do use UTF-16.
        -: 1959:
        -: 1960:// Determines if the arguments constitute UTF-16 surrogate pair
        -: 1961:// and thus should be combined into a single Unicode code point
        -: 1962:// using CreateCodePointFromUtf16SurrogatePair.
    #####: 1963:inline bool IsUtf16SurrogatePair(wchar_t first, wchar_t second) {
        -: 1964:  return sizeof(wchar_t) == 2 &&
    #####: 1965:      (first & 0xFC00) == 0xD800 && (second & 0xFC00) == 0xDC00;
    %%%%%: 1965-block  0
    %%%%%: 1965-block  1
    %%%%%: 1965-block  2
    %%%%%: 1965-block  3
    %%%%%: 1965-block  4
        -: 1966:}
        -: 1967:
        -: 1968:// Creates a Unicode code point from UTF16 surrogate pair.
    #####: 1969:inline uint32_t CreateCodePointFromUtf16SurrogatePair(wchar_t first,
        -: 1970:                                                      wchar_t second) {
    #####: 1971:  const auto first_u = static_cast<uint32_t>(first);
    #####: 1972:  const auto second_u = static_cast<uint32_t>(second);
    #####: 1973:  const uint32_t mask = (1 << 10) - 1;
        -: 1974:  return (sizeof(wchar_t) == 2)
    #####: 1975:             ? (((first_u & mask) << 10) | (second_u & mask)) + 0x10000
        -: 1976:             :
        -: 1977:             // This function should not be called when the condition is
        -: 1978:             // false, but we provide a sensible default in case it is.
    #####: 1979:             first_u;
    %%%%%: 1979-block  0
        -: 1980:}
        -: 1981:
        -: 1982:// Converts a wide string to a narrow string in UTF-8 encoding.
        -: 1983:// The wide string is assumed to have the following encoding:
        -: 1984://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin)
        -: 1985://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
        -: 1986:// Parameter str points to a null-terminated wide string.
        -: 1987:// Parameter num_chars may additionally limit the number
        -: 1988:// of wchar_t characters processed. -1 is used when the entire string
        -: 1989:// should be processed.
        -: 1990:// If the string contains code points that are not valid Unicode code points
        -: 1991:// (i.e. outside of Unicode range U+0 to U+10FFFF) they will be output
        -: 1992:// as '(Invalid Unicode 0xXXXXXXXX)'. If the string is in UTF16 encoding
        -: 1993:// and contains invalid UTF-16 surrogate pairs, values in those pairs
        -: 1994:// will be encoded as individual Unicode characters from Basic Normal Plane.
    #####: 1995:std::string WideStringToUtf8(const wchar_t* str, int num_chars) {
    #####: 1996:  if (num_chars == -1)
    %%%%%: 1996-block  0
    #####: 1997:    num_chars = static_cast<int>(wcslen(str));
    %%%%%: 1997-block  0
        -: 1998:
    #####: 1999:  ::std::stringstream stream;
    %%%%%: 1999-block  0
    %%%%%: 1999-block  1
    $$$$$: 1999-block  2
    #####: 2000:  for (int i = 0; i < num_chars; ++i) {
    %%%%%: 2000-block  0
    %%%%%: 2000-block  1
        -: 2001:    uint32_t unicode_code_point;
        -: 2002:
    #####: 2003:    if (str[i] == L'\0') {
    %%%%%: 2003-block  0
    #####: 2004:      break;
    %%%%%: 2004-block  0
    #####: 2005:    } else if (i + 1 < num_chars && IsUtf16SurrogatePair(str[i], str[i + 1])) {
    %%%%%: 2005-block  0
    %%%%%: 2005-block  1
    %%%%%: 2005-block  2
    %%%%%: 2005-block  3
    %%%%%: 2005-block  4
    #####: 2006:      unicode_code_point = CreateCodePointFromUtf16SurrogatePair(str[i],
    #####: 2007:                                                                 str[i + 1]);
    %%%%%: 2007-block  0
    #####: 2008:      i++;
        -: 2009:    } else {
    #####: 2010:      unicode_code_point = static_cast<uint32_t>(str[i]);
    %%%%%: 2010-block  0
        -: 2011:    }
        -: 2012:
    #####: 2013:    stream << CodePointToUtf8(unicode_code_point);
    %%%%%: 2013-block  0
    %%%%%: 2013-block  1
    %%%%%: 2013-block  2
    $$$$$: 2013-block  3
    $$$$$: 2013-block  4
        -: 2014:  }
    #####: 2015:  return StringStreamToString(&stream);
    %%%%%: 2015-block  0
    %%%%%: 2015-block  1
        -: 2016:}
        -: 2017:
        -: 2018:// Converts a wide C string to an std::string using the UTF-8 encoding.
        -: 2019:// NULL will be converted to "(null)".
    #####: 2020:std::string String::ShowWideCString(const wchar_t * wide_c_str) {
    #####: 2021:  if (wide_c_str == nullptr) return "(null)";
    %%%%%: 2021-block  0
    %%%%%: 2021-block  1
        -: 2022:
    #####: 2023:  return internal::WideStringToUtf8(wide_c_str, -1);
    %%%%%: 2023-block  0
        -: 2024:}
        -: 2025:
        -: 2026:// Compares two wide C strings.  Returns true if and only if they have the
        -: 2027:// same content.
        -: 2028://
        -: 2029:// Unlike wcscmp(), this function can handle NULL argument(s).  A NULL
        -: 2030:// C string is considered different to any non-NULL C string,
        -: 2031:// including the empty string.
    #####: 2032:bool String::WideCStringEquals(const wchar_t * lhs, const wchar_t * rhs) {
    #####: 2033:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2033-block  0
    %%%%%: 2033-block  1
        -: 2034:
    #####: 2035:  if (rhs == nullptr) return false;
    %%%%%: 2035-block  0
    %%%%%: 2035-block  1
        -: 2036:
    #####: 2037:  return wcscmp(lhs, rhs) == 0;
    %%%%%: 2037-block  0
        -: 2038:}
        -: 2039:
        -: 2040:// Helper function for *_STREQ on wide strings.
    #####: 2041:AssertionResult CmpHelperSTREQ(const char* lhs_expression,
        -: 2042:                               const char* rhs_expression,
        -: 2043:                               const wchar_t* lhs,
        -: 2044:                               const wchar_t* rhs) {
    #####: 2045:  if (String::WideCStringEquals(lhs, rhs)) {
    %%%%%: 2045-block  0
    #####: 2046:    return AssertionSuccess();
    %%%%%: 2046-block  0
        -: 2047:  }
        -: 2048:
        -: 2049:  return EqFailure(lhs_expression,
        -: 2050:                   rhs_expression,
    #####: 2051:                   PrintToString(lhs),
    %%%%%: 2051-block  0
    $$$$$: 2051-block  1
    $$$$$: 2051-block  2
    #####: 2052:                   PrintToString(rhs),
    %%%%%: 2052-block  0
    $$$$$: 2052-block  1
    #####: 2053:                   false);
    %%%%%: 2053-block  0
        -: 2054:}
        -: 2055:
        -: 2056:// Helper function for *_STRNE on wide strings.
    #####: 2057:AssertionResult CmpHelperSTRNE(const char* s1_expression,
        -: 2058:                               const char* s2_expression,
        -: 2059:                               const wchar_t* s1,
        -: 2060:                               const wchar_t* s2) {
    #####: 2061:  if (!String::WideCStringEquals(s1, s2)) {
    %%%%%: 2061-block  0
    #####: 2062:    return AssertionSuccess();
    %%%%%: 2062-block  0
        -: 2063:  }
        -: 2064:
    #####: 2065:  return AssertionFailure() << "Expected: (" << s1_expression << ") != ("
    %%%%%: 2065-block  0
    %%%%%: 2065-block  1
    %%%%%: 2065-block  2
    $$$$$: 2065-block  3
    #####: 2066:                            << s2_expression << "), actual: "
    %%%%%: 2066-block  0
    %%%%%: 2066-block  1
    #####: 2067:                            << PrintToString(s1)
    %%%%%: 2067-block  0
    %%%%%: 2067-block  1
    $$$$$: 2067-block  2
    $$$$$: 2067-block  3
    #####: 2068:                            << " vs " << PrintToString(s2);
    %%%%%: 2068-block  0
    %%%%%: 2068-block  1
    %%%%%: 2068-block  2
    %%%%%: 2068-block  3
    %%%%%: 2068-block  4
    $$$$$: 2068-block  5
    $$$$$: 2068-block  6
        -: 2069:}
        -: 2070:
        -: 2071:// Compares two C strings, ignoring case.  Returns true if and only if they have
        -: 2072:// the same content.
        -: 2073://
        -: 2074:// Unlike strcasecmp(), this function can handle NULL argument(s).  A
        -: 2075:// NULL C string is considered different to any non-NULL C string,
        -: 2076:// including the empty string.
        4: 2077:bool String::CaseInsensitiveCStringEquals(const char * lhs, const char * rhs) {
       4*: 2078:  if (lhs == nullptr) return rhs == nullptr;
        4: 2078-block  0
    %%%%%: 2078-block  1
       4*: 2079:  if (rhs == nullptr) return false;
        4: 2079-block  0
    %%%%%: 2079-block  1
        4: 2080:  return posix::StrCaseCmp(lhs, rhs) == 0;
        4: 2080-block  0
        -: 2081:}
        -: 2082:
        -: 2083:// Compares two wide C strings, ignoring case.  Returns true if and only if they
        -: 2084:// have the same content.
        -: 2085://
        -: 2086:// Unlike wcscasecmp(), this function can handle NULL argument(s).
        -: 2087:// A NULL C string is considered different to any non-NULL wide C string,
        -: 2088:// including the empty string.
        -: 2089:// NB: The implementations on different platforms slightly differ.
        -: 2090:// On windows, this method uses _wcsicmp which compares according to LC_CTYPE
        -: 2091:// environment variable. On GNU platform this method uses wcscasecmp
        -: 2092:// which compares according to LC_CTYPE category of the current locale.
        -: 2093:// On MacOS X, it uses towlower, which also uses LC_CTYPE category of the
        -: 2094:// current locale.
    #####: 2095:bool String::CaseInsensitiveWideCStringEquals(const wchar_t* lhs,
        -: 2096:                                              const wchar_t* rhs) {
    #####: 2097:  if (lhs == nullptr) return rhs == nullptr;
    %%%%%: 2097-block  0
    %%%%%: 2097-block  1
        -: 2098:
    #####: 2099:  if (rhs == nullptr) return false;
    %%%%%: 2099-block  0
    %%%%%: 2099-block  1
        -: 2100:
        -: 2101:#if GTEST_OS_WINDOWS
        -: 2102:  return _wcsicmp(lhs, rhs) == 0;
        -: 2103:#elif GTEST_OS_LINUX && !GTEST_OS_LINUX_ANDROID
        -: 2104:  return wcscasecmp(lhs, rhs) == 0;
        -: 2105:#else
        -: 2106:  // Android, Mac OS X and Cygwin don't define wcscasecmp.
        -: 2107:  // Other unknown OSes may not define it either.
        -: 2108:  wint_t left, right;
    #####: 2109:  do {
    %%%%%: 2109-block  0
    #####: 2110:    left = towlower(static_cast<wint_t>(*lhs++));
    #####: 2111:    right = towlower(static_cast<wint_t>(*rhs++));
    #####: 2112:  } while (left && left == right);
    %%%%%: 2112-block  0
    %%%%%: 2112-block  1
    #####: 2113:  return left == right;
    %%%%%: 2113-block  0
        -: 2114:#endif  // OS selector
        -: 2115:}
        -: 2116:
        -: 2117:// Returns true if and only if str ends with the given suffix, ignoring case.
        -: 2118:// Any string is considered to end with an empty suffix.
    #####: 2119:bool String::EndsWithCaseInsensitive(
        -: 2120:    const std::string& str, const std::string& suffix) {
    #####: 2121:  const size_t str_len = str.length();
    %%%%%: 2121-block  0
    #####: 2122:  const size_t suffix_len = suffix.length();
    #####: 2123:  return (str_len >= suffix_len) &&
    %%%%%: 2123-block  0
    %%%%%: 2123-block  1
    #####: 2124:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
    %%%%%: 2124-block  0
    #####: 2125:                                      suffix.c_str());
    %%%%%: 2125-block  0
        -: 2126:}
        -: 2127:
        -: 2128:// Formats an int value as "%02d".
    #####: 2129:std::string String::FormatIntWidth2(int value) {
    #####: 2130:  return FormatIntWidthN(value, 2);
    %%%%%: 2130-block  0
        -: 2131:}
        -: 2132:
        -: 2133:// Formats an int value to given width with leading zeros.
    #####: 2134:std::string String::FormatIntWidthN(int value, int width) {
    #####: 2135:  std::stringstream ss;
    %%%%%: 2135-block  0
    %%%%%: 2135-block  1
    $$$$$: 2135-block  2
    #####: 2136:  ss << std::setfill('0') << std::setw(width) << value;
    %%%%%: 2136-block  0
    %%%%%: 2136-block  1
    %%%%%: 2136-block  2
    #####: 2137:  return ss.str();
    %%%%%: 2137-block  0
    %%%%%: 2137-block  1
        -: 2138:}
        -: 2139:
        -: 2140:// Formats an int value as "%X".
    #####: 2141:std::string String::FormatHexUInt32(uint32_t value) {
    #####: 2142:  std::stringstream ss;
    %%%%%: 2142-block  0
    %%%%%: 2142-block  1
    $$$$$: 2142-block  2
    #####: 2143:  ss << std::hex << std::uppercase << value;
    %%%%%: 2143-block  0
    %%%%%: 2143-block  1
    %%%%%: 2143-block  2
    #####: 2144:  return ss.str();
    %%%%%: 2144-block  0
    %%%%%: 2144-block  1
        -: 2145:}
        -: 2146:
        -: 2147:// Formats an int value as "%X".
    #####: 2148:std::string String::FormatHexInt(int value) {
    #####: 2149:  return FormatHexUInt32(static_cast<uint32_t>(value));
    %%%%%: 2149-block  0
        -: 2150:}
        -: 2151:
        -: 2152:// Formats a byte as "%02X".
    #####: 2153:std::string String::FormatByte(unsigned char value) {
    #####: 2154:  std::stringstream ss;
    %%%%%: 2154-block  0
    %%%%%: 2154-block  1
    $$$$$: 2154-block  2
    #####: 2155:  ss << std::setfill('0') << std::setw(2) << std::hex << std::uppercase
    %%%%%: 2155-block  0
    %%%%%: 2155-block  1
    %%%%%: 2155-block  2
    %%%%%: 2155-block  3
    #####: 2156:     << static_cast<unsigned int>(value);
    %%%%%: 2156-block  0
    #####: 2157:  return ss.str();
    %%%%%: 2157-block  0
    %%%%%: 2157-block  1
        -: 2158:}
        -: 2159:
        -: 2160:// Converts the buffer in a stringstream to an std::string, converting NUL
        -: 2161:// bytes to "\\0" along the way.
       64: 2162:std::string StringStreamToString(::std::stringstream* ss) {
      128: 2163:  const ::std::string& str = ss->str();
       64: 2163-block  0
       64: 2163-block  1
    $$$$$: 2163-block  2
       64: 2164:  const char* const start = str.c_str();
       64: 2164-block  0
       64: 2165:  const char* const end = start + str.length();
        -: 2166:
       64: 2167:  std::string result;
       64: 2168:  result.reserve(static_cast<size_t>(2 * (end - start)));
      914: 2169:  for (const char* ch = start; ch != end; ++ch) {
       64: 2169-block  0
      914: 2169-block  1
      850: 2169-block  2
      850: 2170:    if (*ch == '\0') {
      850: 2170-block  0
    #####: 2171:      result += "\\0";  // Replaces NUL with "\\0";
    %%%%%: 2171-block  0
        -: 2172:    } else {
      850: 2173:      result += *ch;
      850: 2173-block  0
        -: 2174:    }
        -: 2175:  }
        -: 2176:
      128: 2177:  return result;
       64: 2177-block  0
       64: 2177-block  1
        -: 2178:}
        -: 2179:
        -: 2180:// Appends the user-supplied message to the Google-Test-generated message.
    #####: 2181:std::string AppendUserMessage(const std::string& gtest_msg,
        -: 2182:                              const Message& user_msg) {
        -: 2183:  // Appends the user message if it's non-empty.
    #####: 2184:  const std::string user_msg_string = user_msg.GetString();
    %%%%%: 2184-block  0
    %%%%%: 2184-block  1
    $$$$$: 2184-block  2
    #####: 2185:  if (user_msg_string.empty()) {
    %%%%%: 2185-block  0
    #####: 2186:    return gtest_msg;
    %%%%%: 2186-block  0
        -: 2187:  }
    #####: 2188:  if (gtest_msg.empty()) {
    %%%%%: 2188-block  0
    #####: 2189:    return user_msg_string;
    %%%%%: 2189-block  0
        -: 2190:  }
    #####: 2191:  return gtest_msg + "\n" + user_msg_string;
    %%%%%: 2191-block  0
    %%%%%: 2191-block  1
    %%%%%: 2191-block  2
    $$$$$: 2191-block  3
    $$$$$: 2191-block  4
        -: 2192:}
        -: 2193:
        -: 2194:}  // namespace internal
        -: 2195:
        -: 2196:// class TestResult
        -: 2197:
        -: 2198:// Creates an empty TestResult.
       14: 2199:TestResult::TestResult()
       14: 2200:    : death_test_count_(0), start_timestamp_(0), elapsed_time_(0) {}
       14: 2200-block  0
        -: 2201:
        -: 2202:// D'tor.
    #####: 2203:TestResult::~TestResult() {
    %%%%%: 2203-block  0
    #####: 2204:}
        -: 2205:
        -: 2206:// Returns the i-th test part result among all the results. i can
        -: 2207:// range from 0 to total_part_count() - 1. If i is not in that range,
        -: 2208:// aborts the program.
    #####: 2209:const TestPartResult& TestResult::GetTestPartResult(int i) const {
    #####: 2210:  if (i < 0 || i >= total_part_count())
    %%%%%: 2210-block  0
    %%%%%: 2210-block  1
    %%%%%: 2210-block  2
    %%%%%: 2210-block  3
    %%%%%: 2210-block  4
    #####: 2211:    internal::posix::Abort();
    %%%%%: 2211-block  0
    #####: 2212:  return test_part_results_.at(static_cast<size_t>(i));
    %%%%%: 2212-block  0
        -: 2213:}
        -: 2214:
        -: 2215:// Returns the i-th test property. i can range from 0 to
        -: 2216:// test_property_count() - 1. If i is not in that range, aborts the
        -: 2217:// program.
    #####: 2218:const TestProperty& TestResult::GetTestProperty(int i) const {
    #####: 2219:  if (i < 0 || i >= test_property_count())
    %%%%%: 2219-block  0
    %%%%%: 2219-block  1
    %%%%%: 2219-block  2
    %%%%%: 2219-block  3
    %%%%%: 2219-block  4
    #####: 2220:    internal::posix::Abort();
    %%%%%: 2220-block  0
    #####: 2221:  return test_properties_.at(static_cast<size_t>(i));
    %%%%%: 2221-block  0
        -: 2222:}
        -: 2223:
        -: 2224:// Clears the test part results.
    #####: 2225:void TestResult::ClearTestPartResults() {
    #####: 2226:  test_part_results_.clear();
    %%%%%: 2226-block  0
    #####: 2227:}
        -: 2228:
        -: 2229:// Adds a test part result to the list.
    #####: 2230:void TestResult::AddTestPartResult(const TestPartResult& test_part_result) {
    #####: 2231:  test_part_results_.push_back(test_part_result);
    %%%%%: 2231-block  0
    #####: 2232:}
        -: 2233:
        -: 2234:// Adds a test property to the list. If a property with the same key as the
        -: 2235:// supplied property is already represented, the value of this test_property
        -: 2236:// replaces the old value for that key.
    #####: 2237:void TestResult::RecordProperty(const std::string& xml_element,
        -: 2238:                                const TestProperty& test_property) {
    #####: 2239:  if (!ValidateTestProperty(xml_element, test_property)) {
    %%%%%: 2239-block  0
    %%%%%: 2239-block  1
    #####: 2240:    return;
    %%%%%: 2240-block  0
    %%%%%: 2240-block  1
        -: 2241:  }
    #####: 2242:  internal::MutexLock lock(&test_properites_mutex_);
    %%%%%: 2242-block  0
    $$$$$: 2242-block  1
        -: 2243:  const std::vector<TestProperty>::iterator property_with_matching_key =
        -: 2244:      std::find_if(test_properties_.begin(), test_properties_.end(),
    #####: 2245:                   internal::TestPropertyKeyIs(test_property.key()));
    %%%%%: 2245-block  0
    %%%%%: 2245-block  1
    %%%%%: 2245-block  2
    %%%%%: 2245-block  3
    $$$$$: 2245-block  4
    $$$$$: 2245-block  5
    $$$$$: 2245-block  6
    $$$$$: 2245-block  7
    #####: 2246:  if (property_with_matching_key == test_properties_.end()) {
    #####: 2247:    test_properties_.push_back(test_property);
    %%%%%: 2247-block  0
    #####: 2248:    return;
    %%%%%: 2248-block  0
        -: 2249:  }
    #####: 2250:  property_with_matching_key->SetValue(test_property.value());
    %%%%%: 2250-block  0
    %%%%%: 2250-block  1
    %%%%%: 2250-block  2
    $$$$$: 2250-block  3
    $$$$$: 2250-block  4
        -: 2251:}
        -: 2252:
        -: 2253:// The list of reserved attributes used in the <testsuites> element of XML
        -: 2254:// output.
        -: 2255:static const char* const kReservedTestSuitesAttributes[] = {
        -: 2256:  "disabled",
        -: 2257:  "errors",
        -: 2258:  "failures",
        -: 2259:  "name",
        -: 2260:  "random_seed",
        -: 2261:  "tests",
        -: 2262:  "time",
        -: 2263:  "timestamp"
        -: 2264:};
        -: 2265:
        -: 2266:// The list of reserved attributes used in the <testsuite> element of XML
        -: 2267:// output.
        -: 2268:static const char* const kReservedTestSuiteAttributes[] = {
        -: 2269:    "disabled", "errors", "failures",  "name",
        -: 2270:    "tests",    "time",   "timestamp", "skipped"};
        -: 2271:
        -: 2272:// The list of reserved attributes used in the <testcase> element of XML output.
        -: 2273:static const char* const kReservedTestCaseAttributes[] = {
        -: 2274:    "classname",   "name", "status", "time",  "type_param",
        -: 2275:    "value_param", "file", "line"};
        -: 2276:
        -: 2277:// Use a slightly different set for allowed output to ensure existing tests can
        -: 2278:// still RecordProperty("result") or "RecordProperty(timestamp")
        -: 2279:static const char* const kReservedOutputTestCaseAttributes[] = {
        -: 2280:    "classname",   "name", "status", "time",   "type_param",
        -: 2281:    "value_param", "file", "line",   "result", "timestamp"};
        -: 2282:
        -: 2283:template <size_t kSize>
    #####: 2284:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2285:  return std::vector<std::string>(array, array + kSize);
        -: 2286:}
------------------
_ZN7testing13ArrayAsVectorILm10EEESt6vectorISsSaISsEERAT__KPKc:
    #####: 2284:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2285:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2285-block  0
    %%%%%: 2285-block  1
        -: 2286:}
------------------
_ZN7testing13ArrayAsVectorILm8EEESt6vectorISsSaISsEERAT__KPKc:
    #####: 2284:std::vector<std::string> ArrayAsVector(const char* const (&array)[kSize]) {
    #####: 2285:  return std::vector<std::string>(array, array + kSize);
    %%%%%: 2285-block  0
    %%%%%: 2285-block  1
        -: 2286:}
------------------
        -: 2287:
    #####: 2288:static std::vector<std::string> GetReservedAttributesForElement(
        -: 2289:    const std::string& xml_element) {
    #####: 2290:  if (xml_element == "testsuites") {
    %%%%%: 2290-block  0
    #####: 2291:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2291-block  0
    #####: 2292:  } else if (xml_element == "testsuite") {
    %%%%%: 2292-block  0
    #####: 2293:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2293-block  0
    #####: 2294:  } else if (xml_element == "testcase") {
    %%%%%: 2294-block  0
    #####: 2295:    return ArrayAsVector(kReservedTestCaseAttributes);
    %%%%%: 2295-block  0
        -: 2296:  } else {
    #####: 2297:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2297-block  0
    %%%%%: 2297-block  1
    %%%%%: 2297-block  2
    %%%%%: 2297-block  3
    %%%%%: 2297-block  4
    $$$$$: 2297-block  5
        -: 2298:  }
        -: 2299:  // This code is unreachable but some compilers may not realizes that.
    #####: 2300:  return std::vector<std::string>();
    %%%%%: 2300-block  0
        -: 2301:}
        -: 2302:
        -: 2303:// TODO(jdesprez): Merge the two getReserved attributes once skip is improved
    #####: 2304:static std::vector<std::string> GetReservedOutputAttributesForElement(
        -: 2305:    const std::string& xml_element) {
    #####: 2306:  if (xml_element == "testsuites") {
    %%%%%: 2306-block  0
    #####: 2307:    return ArrayAsVector(kReservedTestSuitesAttributes);
    %%%%%: 2307-block  0
    #####: 2308:  } else if (xml_element == "testsuite") {
    %%%%%: 2308-block  0
    #####: 2309:    return ArrayAsVector(kReservedTestSuiteAttributes);
    %%%%%: 2309-block  0
    #####: 2310:  } else if (xml_element == "testcase") {
    %%%%%: 2310-block  0
    #####: 2311:    return ArrayAsVector(kReservedOutputTestCaseAttributes);
    %%%%%: 2311-block  0
        -: 2312:  } else {
    #####: 2313:    GTEST_CHECK_(false) << "Unrecognized xml_element provided: " << xml_element;
    %%%%%: 2313-block  0
    %%%%%: 2313-block  1
    %%%%%: 2313-block  2
    %%%%%: 2313-block  3
    %%%%%: 2313-block  4
    $$$$$: 2313-block  5
        -: 2314:  }
        -: 2315:  // This code is unreachable but some compilers may not realizes that.
    #####: 2316:  return std::vector<std::string>();
    %%%%%: 2316-block  0
        -: 2317:}
        -: 2318:
    #####: 2319:static std::string FormatWordList(const std::vector<std::string>& words) {
    #####: 2320:  Message word_list;
    %%%%%: 2320-block  0
    %%%%%: 2320-block  1
    $$$$$: 2320-block  2
    #####: 2321:  for (size_t i = 0; i < words.size(); ++i) {
    %%%%%: 2321-block  0
    %%%%%: 2321-block  1
    %%%%%: 2321-block  2
    #####: 2322:    if (i > 0 && words.size() > 2) {
    %%%%%: 2322-block  0
    %%%%%: 2322-block  1
    %%%%%: 2322-block  2
    %%%%%: 2322-block  3
    %%%%%: 2322-block  4
    #####: 2323:      word_list << ", ";
    %%%%%: 2323-block  0
        -: 2324:    }
    #####: 2325:    if (i == words.size() - 1) {
    %%%%%: 2325-block  0
    #####: 2326:      word_list << "and ";
    %%%%%: 2326-block  0
        -: 2327:    }
    #####: 2328:    word_list << "'" << words[i] << "'";
    %%%%%: 2328-block  0
    %%%%%: 2328-block  1
    %%%%%: 2328-block  2
        -: 2329:  }
    #####: 2330:  return word_list.GetString();
    %%%%%: 2330-block  0
    %%%%%: 2330-block  1
        -: 2331:}
        -: 2332:
    #####: 2333:static bool ValidateTestPropertyName(
        -: 2334:    const std::string& property_name,
        -: 2335:    const std::vector<std::string>& reserved_names) {
    #####: 2336:  if (std::find(reserved_names.begin(), reserved_names.end(), property_name) !=
    %%%%%: 2336-block  0
    #####: 2337:          reserved_names.end()) {
    %%%%%: 2337-block  0
    $$$$$: 2337-block  1
    #####: 2338:    ADD_FAILURE() << "Reserved key used in RecordProperty(): " << property_name
    %%%%%: 2338-block  0
    %%%%%: 2338-block  1
    %%%%%: 2338-block  2
    %%%%%: 2338-block  3
    $$$$$: 2338-block  4
    $$$$$: 2338-block  5
    $$$$$: 2338-block  6
    #####: 2339:                  << " (" << FormatWordList(reserved_names)
    %%%%%: 2339-block  0
    %%%%%: 2339-block  1
    %%%%%: 2339-block  2
    $$$$$: 2339-block  3
    $$$$$: 2339-block  4
    #####: 2340:                  << " are reserved by " << GTEST_NAME_ << ")";
    %%%%%: 2340-block  0
    %%%%%: 2340-block  1
    %%%%%: 2340-block  2
    %%%%%: 2340-block  3
    #####: 2341:    return false;
        -: 2342:  }
    #####: 2343:  return true;
    %%%%%: 2343-block  0
        -: 2344:}
        -: 2345:
        -: 2346:// Adds a failure if the key is a reserved attribute of the element named
        -: 2347:// xml_element.  Returns true if the property is valid.
    #####: 2348:bool TestResult::ValidateTestProperty(const std::string& xml_element,
        -: 2349:                                      const TestProperty& test_property) {
    #####: 2350:  return ValidateTestPropertyName(test_property.key(),
    %%%%%: 2350-block  0
    #####: 2351:                                  GetReservedAttributesForElement(xml_element));
    %%%%%: 2351-block  0
    %%%%%: 2351-block  1
    %%%%%: 2351-block  2
    $$$$$: 2351-block  3
    $$$$$: 2351-block  4
    $$$$$: 2351-block  5
        -: 2352:}
        -: 2353:
        -: 2354:// Clears the object.
       13: 2355:void TestResult::Clear() {
       13: 2356:  test_part_results_.clear();
       13: 2356-block  0
       13: 2357:  test_properties_.clear();
       13: 2358:  death_test_count_ = 0;
       13: 2359:  elapsed_time_ = 0;
       13: 2360:}
        -: 2361:
        -: 2362:// Returns true off the test part was skipped.
    #####: 2363:static bool TestPartSkipped(const TestPartResult& result) {
    #####: 2364:  return result.skipped();
    %%%%%: 2364-block  0
        -: 2365:}
        -: 2366:
        -: 2367:// Returns true if and only if the test was skipped.
       61: 2368:bool TestResult::Skipped() const {
      61*: 2369:  return !Failed() && CountIf(test_part_results_, TestPartSkipped) > 0;
       61: 2369-block  0
       61: 2369-block  1
    %%%%%: 2369-block  2
       61: 2369-block  3
       61: 2369-block  4
        -: 2370:}
        -: 2371:
        -: 2372:// Returns true if and only if the test failed.
      125: 2373:bool TestResult::Failed() const {
     125*: 2374:  for (int i = 0; i < total_part_count(); ++i) {
      125: 2374-block  0
      125: 2374-block  1
    %%%%%: 2374-block  2
    #####: 2375:    if (GetTestPartResult(i).failed())
    %%%%%: 2375-block  0
    #####: 2376:      return true;
    %%%%%: 2376-block  0
        -: 2377:  }
      125: 2378:  return false;
      125: 2378-block  0
        -: 2379:}
        -: 2380:
        -: 2381:// Returns true if and only if the test part fatally failed.
    #####: 2382:static bool TestPartFatallyFailed(const TestPartResult& result) {
    #####: 2383:  return result.fatally_failed();
    %%%%%: 2383-block  0
        -: 2384:}
        -: 2385:
        -: 2386:// Returns true if and only if the test fatally failed.
       25: 2387:bool TestResult::HasFatalFailure() const {
       25: 2388:  return CountIf(test_part_results_, TestPartFatallyFailed) > 0;
       25: 2388-block  0
        -: 2389:}
        -: 2390:
        -: 2391:// Returns true if and only if the test part non-fatally failed.
    #####: 2392:static bool TestPartNonfatallyFailed(const TestPartResult& result) {
    #####: 2393:  return result.nonfatally_failed();
    %%%%%: 2393-block  0
        -: 2394:}
        -: 2395:
        -: 2396:// Returns true if and only if the test has a non-fatal failure.
    #####: 2397:bool TestResult::HasNonfatalFailure() const {
    #####: 2398:  return CountIf(test_part_results_, TestPartNonfatallyFailed) > 0;
    %%%%%: 2398-block  0
        -: 2399:}
        -: 2400:
        -: 2401:// Gets the number of all test parts.  This is the sum of the number
        -: 2402:// of successful test parts and the number of failed test parts.
      125: 2403:int TestResult::total_part_count() const {
      125: 2404:  return static_cast<int>(test_part_results_.size());
      125: 2404-block  0
        -: 2405:}
        -: 2406:
        -: 2407:// Returns the number of the test properties.
    #####: 2408:int TestResult::test_property_count() const {
    #####: 2409:  return static_cast<int>(test_properties_.size());
    %%%%%: 2409-block  0
        -: 2410:}
        -: 2411:
        -: 2412:// class Test
        -: 2413:
        -: 2414:// Creates a Test object.
        -: 2415:
        -: 2416:// The c'tor saves the states of all flags.
       12: 2417:Test::Test()
       12: 2418:    : gtest_flag_saver_(new GTEST_FLAG_SAVER_) {
       12: 2418-block  0
       12: 2418-block  1
    $$$$$: 2418-block  2
       12: 2419:}
        -: 2420:
        -: 2421:// The d'tor restores the states of all flags.  The actual work is
        -: 2422:// done by the d'tor of the gtest_flag_saver_ field, and thus not
        -: 2423:// visible here.
      12*: 2424:Test::~Test() {
      12*: 2425:}
------------------
_ZN7testing4TestD0Ev:
    #####: 2424:Test::~Test() {
    #####: 2425:}
    %%%%%: 2425-block  0
------------------
_ZN7testing4TestD2Ev:
       12: 2424:Test::~Test() {
       12: 2424-block  0
       12: 2425:}
------------------
        -: 2426:
        -: 2427:// Sets up the test fixture.
        -: 2428://
        -: 2429:// A sub-class may override this.
       12: 2430:void Test::SetUp() {
       12: 2431:}
        -: 2432:
        -: 2433:// Tears down the test fixture.
        -: 2434://
        -: 2435:// A sub-class may override this.
       12: 2436:void Test::TearDown() {
       12: 2437:}
        -: 2438:
        -: 2439:// Allows user supplied key value pairs to be recorded for later output.
    #####: 2440:void Test::RecordProperty(const std::string& key, const std::string& value) {
    #####: 2441:  UnitTest::GetInstance()->RecordProperty(key, value);
    %%%%%: 2441-block  0
    #####: 2442:}
        -: 2443:
        -: 2444:// Allows user supplied key value pairs to be recorded for later output.
    #####: 2445:void Test::RecordProperty(const std::string& key, int value) {
    #####: 2446:  Message value_message;
    %%%%%: 2446-block  0
    $$$$$: 2446-block  1
    #####: 2447:  value_message << value;
    %%%%%: 2447-block  0
    #####: 2448:  RecordProperty(key, value_message.GetString().c_str());
    %%%%%: 2448-block  0
    %%%%%: 2448-block  1
    %%%%%: 2448-block  2
    %%%%%: 2448-block  3
    $$$$$: 2448-block  4
    $$$$$: 2448-block  5
    $$$$$: 2448-block  6
    $$$$$: 2448-block  7
    #####: 2449:}
        -: 2450:
        -: 2451:namespace internal {
        -: 2452:
    #####: 2453:void ReportFailureInUnknownLocation(TestPartResult::Type result_type,
        -: 2454:                                    const std::string& message) {
        -: 2455:  // This function is a friend of UnitTest and as such has access to
        -: 2456:  // AddTestPartResult.
    #####: 2457:  UnitTest::GetInstance()->AddTestPartResult(
    %%%%%: 2457-block  0
    %%%%%: 2457-block  1
        -: 2458:      result_type,
        -: 2459:      nullptr,  // No info about the source file where the exception occurred.
        -: 2460:      -1,       // We have no info on which line caused the exception.
        -: 2461:      message,
    #####: 2462:      "");  // No stack trace, either.
    %%%%%: 2462-block  0
    $$$$$: 2462-block  1
    $$$$$: 2462-block  2
    #####: 2463:}
        -: 2464:
        -: 2465:}  // namespace internal
        -: 2466:
        -: 2467:// Google Test requires all tests in the same test suite to use the same test
        -: 2468:// fixture class.  This function checks if the current test has the
        -: 2469:// same fixture class as the first test in the current test suite.  If
        -: 2470:// yes, it returns true; otherwise it generates a Google Test failure and
        -: 2471:// returns false.
       12: 2472:bool Test::HasSameFixtureClass() {
       12: 2473:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       12: 2473-block  0
       12: 2474:  const TestSuite* const test_suite = impl->current_test_suite();
       12: 2474-block  0
        -: 2475:
        -: 2476:  // Info about the first test in the current test suite.
       12: 2477:  const TestInfo* const first_test_info = test_suite->test_info_list()[0];
       12: 2478:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
       12: 2479:  const char* const first_test_name = first_test_info->name();
        -: 2480:
        -: 2481:  // Info about the current test.
       12: 2482:  const TestInfo* const this_test_info = impl->current_test_info();
       12: 2483:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
       12: 2484:  const char* const this_test_name = this_test_info->name();
        -: 2485:
       12: 2486:  if (this_fixture_id != first_fixture_id) {
        -: 2487:    // Is the first test defined using TEST?
    #####: 2488:    const bool first_is_TEST = first_fixture_id == internal::GetTestTypeId();
    %%%%%: 2488-block  0
        -: 2489:    // Is this test defined using TEST?
    #####: 2490:    const bool this_is_TEST = this_fixture_id == internal::GetTestTypeId();
    %%%%%: 2490-block  0
        -: 2491:
    #####: 2492:    if (first_is_TEST || this_is_TEST) {
    %%%%%: 2492-block  0
    %%%%%: 2492-block  1
        -: 2493:      // Both TEST and TEST_F appear in same test suite, which is incorrect.
        -: 2494:      // Tell the user how to fix this.
        -: 2495:
        -: 2496:      // Gets the name of the TEST and the name of the TEST_F.  Note
        -: 2497:      // that first_is_TEST and this_is_TEST cannot both be true, as
        -: 2498:      // the fixture IDs are different for the two tests.
    #####: 2499:      const char* const TEST_name =
    %%%%%: 2499-block  0
    %%%%%: 2499-block  1
    %%%%%: 2499-block  2
        -: 2500:          first_is_TEST ? first_test_name : this_test_name;
    #####: 2501:      const char* const TEST_F_name =
    %%%%%: 2501-block  0
    %%%%%: 2501-block  1
    %%%%%: 2501-block  2
        -: 2502:          first_is_TEST ? this_test_name : first_test_name;
        -: 2503:
    #####: 2504:      ADD_FAILURE()
    %%%%%: 2504-block  0
    %%%%%: 2504-block  1
    %%%%%: 2504-block  2
    $$$$$: 2504-block  3
    $$$$$: 2504-block  4
    $$$$$: 2504-block  5
    $$$$$: 2504-block  6
    #####: 2505:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2505-block  0
    #####: 2506:          << "class, so mixing TEST_F and TEST in the same test suite is\n"
    %%%%%: 2506-block  0
    #####: 2507:          << "illegal.  In test suite " << this_test_info->test_suite_name()
    %%%%%: 2507-block  0
    %%%%%: 2507-block  1
    $$$$$: 2507-block  2
    #####: 2508:          << ",\n"
    %%%%%: 2508-block  0
    #####: 2509:          << "test " << TEST_F_name << " is defined using TEST_F but\n"
    %%%%%: 2509-block  0
    %%%%%: 2509-block  1
    %%%%%: 2509-block  2
    #####: 2510:          << "test " << TEST_name << " is defined using TEST.  You probably\n"
    %%%%%: 2510-block  0
    %%%%%: 2510-block  1
    %%%%%: 2510-block  2
    #####: 2511:          << "want to change the TEST to TEST_F or move it to another test\n"
    %%%%%: 2511-block  0
    #####: 2512:          << "case.";
    %%%%%: 2512-block  0
    %%%%%: 2512-block  1
        -: 2513:    } else {
        -: 2514:      // Two fixture classes with the same name appear in two different
        -: 2515:      // namespaces, which is not allowed. Tell the user how to fix this.
    #####: 2516:      ADD_FAILURE()
    %%%%%: 2516-block  0
    %%%%%: 2516-block  1
    %%%%%: 2516-block  2
    $$$$$: 2516-block  3
    $$$$$: 2516-block  4
    $$$$$: 2516-block  5
    $$$$$: 2516-block  6
    #####: 2517:          << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2517-block  0
    #####: 2518:          << "class.  However, in test suite "
    %%%%%: 2518-block  0
    #####: 2519:          << this_test_info->test_suite_name() << ",\n"
    %%%%%: 2519-block  0
    %%%%%: 2519-block  1
    $$$$$: 2519-block  2
    #####: 2520:          << "you defined test " << first_test_name << " and test "
    %%%%%: 2520-block  0
    %%%%%: 2520-block  1
    %%%%%: 2520-block  2
    #####: 2521:          << this_test_name << "\n"
    %%%%%: 2521-block  0
    %%%%%: 2521-block  1
    #####: 2522:          << "using two different test fixture classes.  This can happen if\n"
    %%%%%: 2522-block  0
    #####: 2523:          << "the two classes are from different namespaces or translation\n"
    %%%%%: 2523-block  0
    #####: 2524:          << "units and have the same name.  You should probably rename one\n"
    %%%%%: 2524-block  0
    #####: 2525:          << "of the classes to put the tests into different test suites.";
    %%%%%: 2525-block  0
    %%%%%: 2525-block  1
        -: 2526:    }
    #####: 2527:    return false;
    %%%%%: 2527-block  0
        -: 2528:  }
        -: 2529:
       12: 2530:  return true;
       12: 2530-block  0
        -: 2531:}
        -: 2532:
        -: 2533:#if GTEST_HAS_SEH
        -: 2534:
        -: 2535:// Adds an "exception thrown" fatal failure to the current test.  This
        -: 2536:// function returns its result via an output parameter pointer because VC++
        -: 2537:// prohibits creation of objects with destructors on stack in functions
        -: 2538:// using __try (see error C2712).
        -: 2539:static std::string* FormatSehExceptionMessage(DWORD exception_code,
        -: 2540:                                              const char* location) {
        -: 2541:  Message message;
        -: 2542:  message << "SEH exception with code 0x" << std::setbase(16) <<
        -: 2543:    exception_code << std::setbase(10) << " thrown in " << location << ".";
        -: 2544:
        -: 2545:  return new std::string(message.GetString());
        -: 2546:}
        -: 2547:
        -: 2548:#endif  // GTEST_HAS_SEH
        -: 2549:
        -: 2550:namespace internal {
        -: 2551:
        -: 2552:#if GTEST_HAS_EXCEPTIONS
        -: 2553:
        -: 2554:// Adds an "exception thrown" fatal failure to the current test.
    #####: 2555:static std::string FormatCxxExceptionMessage(const char* description,
        -: 2556:                                             const char* location) {
    #####: 2557:  Message message;
    %%%%%: 2557-block  0
    %%%%%: 2557-block  1
    $$$$$: 2557-block  2
    #####: 2558:  if (description != nullptr) {
    %%%%%: 2558-block  0
    #####: 2559:    message << "C++ exception with description \"" << description << "\"";
    %%%%%: 2559-block  0
    %%%%%: 2559-block  1
    %%%%%: 2559-block  2
        -: 2560:  } else {
    #####: 2561:    message << "Unknown C++ exception";
    %%%%%: 2561-block  0
        -: 2562:  }
    #####: 2563:  message << " thrown in " << location << ".";
    %%%%%: 2563-block  0
    %%%%%: 2563-block  1
    %%%%%: 2563-block  2
        -: 2564:
    #####: 2565:  return message.GetString();
    %%%%%: 2565-block  0
    %%%%%: 2565-block  1
        -: 2566:}
        -: 2567:
        -: 2568:static std::string PrintTestPartResultToString(
        -: 2569:    const TestPartResult& test_part_result);
        -: 2570:
    #####: 2571:GoogleTestFailureException::GoogleTestFailureException(
    #####: 2572:    const TestPartResult& failure)
    #####: 2573:    : ::std::runtime_error(PrintTestPartResultToString(failure).c_str()) {}
    %%%%%: 2573-block  0
    %%%%%: 2573-block  1
    $$$$$: 2573-block  2
        -: 2574:
        -: 2575:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2576:
        -: 2577:// We put these helper functions in the internal namespace as IBM's xlC
        -: 2578:// compiler rejects the code if they were declared static.
        -: 2579:
        -: 2580:// Runs the given method and handles SEH exceptions it throws, when
        -: 2581:// SEH is supported; returns the 0-value for type Result in case of an
        -: 2582:// SEH exception.  (Microsoft compilers cannot handle SEH and C++
        -: 2583:// exceptions in the same function.  Therefore, we provide a separate
        -: 2584:// wrapper function for handling SEH exceptions.)
        -: 2585:template <class T, typename Result>
       63: 2586:Result HandleSehExceptionsInMethodIfSupported(
        -: 2587:    T* object, Result (T::*method)(), const char* location) {
        -: 2588:#if GTEST_HAS_SEH
        -: 2589:  __try {
        -: 2590:    return (object->*method)();
        -: 2591:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2592:      GetExceptionCode())) {
        -: 2593:    // We create the exception message on the heap because VC++ prohibits
        -: 2594:    // creation of objects with destructors on stack in functions using __try
        -: 2595:    // (see error C2712).
        -: 2596:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2597:        GetExceptionCode(), location);
        -: 2598:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2599:                                             *exception_message);
        -: 2600:    delete exception_message;
        -: 2601:    return static_cast<Result>(0);
        -: 2602:  }
        -: 2603:#else
        -: 2604:  (void)location;
      63*: 2605:  return (object->*method)();
        -: 2606:#endif  // GTEST_HAS_SEH
        -: 2607:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
        1: 2586:Result HandleSehExceptionsInMethodIfSupported(
        -: 2587:    T* object, Result (T::*method)(), const char* location) {
        -: 2588:#if GTEST_HAS_SEH
        -: 2589:  __try {
        -: 2590:    return (object->*method)();
        -: 2591:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2592:      GetExceptionCode())) {
        -: 2593:    // We create the exception message on the heap because VC++ prohibits
        -: 2594:    // creation of objects with destructors on stack in functions using __try
        -: 2595:    // (see error C2712).
        -: 2596:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2597:        GetExceptionCode(), location);
        -: 2598:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2599:                                             *exception_message);
        -: 2600:    delete exception_message;
        -: 2601:    return static_cast<Result>(0);
        -: 2602:  }
        -: 2603:#else
        -: 2604:  (void)location;
       1*: 2605:  return (object->*method)();
        1: 2605-block  0
    %%%%%: 2605-block  1
        1: 2605-block  2
        1: 2605-block  3
        -: 2606:#endif  // GTEST_HAS_SEH
        -: 2607:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
        2: 2586:Result HandleSehExceptionsInMethodIfSupported(
        -: 2587:    T* object, Result (T::*method)(), const char* location) {
        -: 2588:#if GTEST_HAS_SEH
        -: 2589:  __try {
        -: 2590:    return (object->*method)();
        -: 2591:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2592:      GetExceptionCode())) {
        -: 2593:    // We create the exception message on the heap because VC++ prohibits
        -: 2594:    // creation of objects with destructors on stack in functions using __try
        -: 2595:    // (see error C2712).
        -: 2596:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2597:        GetExceptionCode(), location);
        -: 2598:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2599:                                             *exception_message);
        -: 2600:    delete exception_message;
        -: 2601:    return static_cast<Result>(0);
        -: 2602:  }
        -: 2603:#else
        -: 2604:  (void)location;
       2*: 2605:  return (object->*method)();
        2: 2605-block  0
    %%%%%: 2605-block  1
        2: 2605-block  2
        2: 2605-block  3
        -: 2606:#endif  // GTEST_HAS_SEH
        -: 2607:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
       12: 2586:Result HandleSehExceptionsInMethodIfSupported(
        -: 2587:    T* object, Result (T::*method)(), const char* location) {
        -: 2588:#if GTEST_HAS_SEH
        -: 2589:  __try {
        -: 2590:    return (object->*method)();
        -: 2591:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2592:      GetExceptionCode())) {
        -: 2593:    // We create the exception message on the heap because VC++ prohibits
        -: 2594:    // creation of objects with destructors on stack in functions using __try
        -: 2595:    // (see error C2712).
        -: 2596:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2597:        GetExceptionCode(), location);
        -: 2598:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2599:                                             *exception_message);
        -: 2600:    delete exception_message;
        -: 2601:    return static_cast<Result>(0);
        -: 2602:  }
        -: 2603:#else
        -: 2604:  (void)location;
      12*: 2605:  return (object->*method)();
       12: 2605-block  0
       12: 2605-block  1
    %%%%%: 2605-block  2
       12: 2605-block  3
        -: 2606:#endif  // GTEST_HAS_SEH
        -: 2607:}
------------------
_ZN7testing8internal38HandleSehExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
       48: 2586:Result HandleSehExceptionsInMethodIfSupported(
        -: 2587:    T* object, Result (T::*method)(), const char* location) {
        -: 2588:#if GTEST_HAS_SEH
        -: 2589:  __try {
        -: 2590:    return (object->*method)();
        -: 2591:  } __except (internal::UnitTestOptions::GTestShouldProcessSEH(  // NOLINT
        -: 2592:      GetExceptionCode())) {
        -: 2593:    // We create the exception message on the heap because VC++ prohibits
        -: 2594:    // creation of objects with destructors on stack in functions using __try
        -: 2595:    // (see error C2712).
        -: 2596:    std::string* exception_message = FormatSehExceptionMessage(
        -: 2597:        GetExceptionCode(), location);
        -: 2598:    internal::ReportFailureInUnknownLocation(TestPartResult::kFatalFailure,
        -: 2599:                                             *exception_message);
        -: 2600:    delete exception_message;
        -: 2601:    return static_cast<Result>(0);
        -: 2602:  }
        -: 2603:#else
        -: 2604:  (void)location;
       48: 2605:  return (object->*method)();
       48: 2605-block  0
       36: 2605-block  1
       12: 2605-block  2
       48: 2605-block  3
        -: 2606:#endif  // GTEST_HAS_SEH
        -: 2607:}
------------------
        -: 2608:
        -: 2609:// Runs the given method and catches and reports C++ and/or SEH-style
        -: 2610:// exceptions, if they are supported; returns the 0-value for type
        -: 2611:// Result in case of an SEH exception.
        -: 2612:template <class T, typename Result>
       63: 2613:Result HandleExceptionsInMethodIfSupported(
        -: 2614:    T* object, Result (T::*method)(), const char* location) {
        -: 2615:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2616:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2617:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2618:  // after the exception is caught and either report or re-throw the
        -: 2619:  // exception based on the flag's value:
        -: 2620:  //
        -: 2621:  // try {
        -: 2622:  //   // Perform the test method.
        -: 2623:  // } catch (...) {
        -: 2624:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2625:  //     // Report the exception as failure.
        -: 2626:  //   else
        -: 2627:  //     throw;  // Re-throws the original exception.
        -: 2628:  // }
        -: 2629:  //
        -: 2630:  // However, the purpose of this flag is to allow the program to drop into
        -: 2631:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2632:  // control enters the catch block, the exception origin information is
        -: 2633:  // lost and the debugger will stop the program at the point of the
        -: 2634:  // re-throw in this function -- instead of at the point of the original
        -: 2635:  // throw statement in the code under test.  For this reason, we perform
        -: 2636:  // the check early, sacrificing the ability to affect Google Test's
        -: 2637:  // exception handling in the method where the exception is thrown.
       63: 2638:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        -: 2639:#if GTEST_HAS_EXCEPTIONS
        -: 2640:    try {
       63: 2641:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
    =====: 2642:    } catch (const AssertionException&) {  // NOLINT
        -: 2643:      // This failure was reported already.
    =====: 2644:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
        -: 2645:      // This exception type can only be thrown by a failed Google
        -: 2646:      // Test assertion with the intention of letting another testing
        -: 2647:      // framework catch it.  Therefore we just re-throw it.
    =====: 2648:      throw;
    =====: 2649:    } catch (const std::exception& e) {  // NOLINT
    =====: 2650:      internal::ReportFailureInUnknownLocation(
        -: 2651:          TestPartResult::kFatalFailure,
    =====: 2652:          FormatCxxExceptionMessage(e.what(), location));
    =====: 2653:    } catch (...) {  // NOLINT
    =====: 2654:      internal::ReportFailureInUnknownLocation(
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(nullptr, location));
        -: 2657:    }
    =====: 2658:    return static_cast<Result>(0);
        -: 2659:#else
        -: 2660:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2661:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2662:  } else {
    #####: 2663:    return (object->*method)();
        -: 2664:  }
        -: 2665:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_12UnitTestImplEbEET0_PT_MS4_FS3_vEPKc:
        1: 2613:Result HandleExceptionsInMethodIfSupported(
        -: 2614:    T* object, Result (T::*method)(), const char* location) {
        -: 2615:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2616:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2617:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2618:  // after the exception is caught and either report or re-throw the
        -: 2619:  // exception based on the flag's value:
        -: 2620:  //
        -: 2621:  // try {
        -: 2622:  //   // Perform the test method.
        -: 2623:  // } catch (...) {
        -: 2624:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2625:  //     // Report the exception as failure.
        -: 2626:  //   else
        -: 2627:  //     throw;  // Re-throws the original exception.
        -: 2628:  // }
        -: 2629:  //
        -: 2630:  // However, the purpose of this flag is to allow the program to drop into
        -: 2631:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2632:  // control enters the catch block, the exception origin information is
        -: 2633:  // lost and the debugger will stop the program at the point of the
        -: 2634:  // re-throw in this function -- instead of at the point of the original
        -: 2635:  // throw statement in the code under test.  For this reason, we perform
        -: 2636:  // the check early, sacrificing the ability to affect Google Test's
        -: 2637:  // exception handling in the method where the exception is thrown.
        1: 2638:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        1: 2638-block  0
        -: 2639:#if GTEST_HAS_EXCEPTIONS
        -: 2640:    try {
        1: 2641:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        1: 2641-block  0
        1: 2641-block  1
    =====: 2642:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2642-block  0
    $$$$$: 2642-block  1
        -: 2643:      // This failure was reported already.
    =====: 2644:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2644-block  0
    $$$$$: 2644-block  1
        -: 2645:      // This exception type can only be thrown by a failed Google
        -: 2646:      // Test assertion with the intention of letting another testing
        -: 2647:      // framework catch it.  Therefore we just re-throw it.
    =====: 2648:      throw;
    =====: 2649:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2649-block  0
    $$$$$: 2649-block  1
    =====: 2650:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2650-block  0
        -: 2651:          TestPartResult::kFatalFailure,
    =====: 2652:          FormatCxxExceptionMessage(e.what(), location));
    $$$$$: 2652-block  0
    $$$$$: 2652-block  1
    $$$$$: 2652-block  2
    =====: 2653:    } catch (...) {  // NOLINT
    $$$$$: 2653-block  0
    $$$$$: 2653-block  1
    =====: 2654:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2654-block  0
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(nullptr, location));
    $$$$$: 2656-block  0
    $$$$$: 2656-block  1
    $$$$$: 2656-block  2
        -: 2657:    }
    =====: 2658:    return static_cast<Result>(0);
    $$$$$: 2658-block  0
        -: 2659:#else
        -: 2660:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2661:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2662:  } else {
    #####: 2663:    return (object->*method)();
    %%%%%: 2663-block  0
    %%%%%: 2663-block  1
    %%%%%: 2663-block  2
    %%%%%: 2663-block  3
        -: 2664:  }
        -: 2665:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_9TestSuiteEvEET0_PT_MS4_FS3_vEPKc:
        2: 2613:Result HandleExceptionsInMethodIfSupported(
        -: 2614:    T* object, Result (T::*method)(), const char* location) {
        -: 2615:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2616:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2617:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2618:  // after the exception is caught and either report or re-throw the
        -: 2619:  // exception based on the flag's value:
        -: 2620:  //
        -: 2621:  // try {
        -: 2622:  //   // Perform the test method.
        -: 2623:  // } catch (...) {
        -: 2624:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2625:  //     // Report the exception as failure.
        -: 2626:  //   else
        -: 2627:  //     throw;  // Re-throws the original exception.
        -: 2628:  // }
        -: 2629:  //
        -: 2630:  // However, the purpose of this flag is to allow the program to drop into
        -: 2631:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2632:  // control enters the catch block, the exception origin information is
        -: 2633:  // lost and the debugger will stop the program at the point of the
        -: 2634:  // re-throw in this function -- instead of at the point of the original
        -: 2635:  // throw statement in the code under test.  For this reason, we perform
        -: 2636:  // the check early, sacrificing the ability to affect Google Test's
        -: 2637:  // exception handling in the method where the exception is thrown.
        2: 2638:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
        2: 2638-block  0
        -: 2639:#if GTEST_HAS_EXCEPTIONS
        -: 2640:    try {
        2: 2641:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
        2: 2641-block  0
        2: 2641-block  1
    =====: 2642:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2642-block  0
    $$$$$: 2642-block  1
        -: 2643:      // This failure was reported already.
    =====: 2644:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2644-block  0
    $$$$$: 2644-block  1
        -: 2645:      // This exception type can only be thrown by a failed Google
        -: 2646:      // Test assertion with the intention of letting another testing
        -: 2647:      // framework catch it.  Therefore we just re-throw it.
    =====: 2648:      throw;
    =====: 2649:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2649-block  0
    $$$$$: 2649-block  1
    =====: 2650:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2650-block  0
        -: 2651:          TestPartResult::kFatalFailure,
    =====: 2652:          FormatCxxExceptionMessage(e.what(), location));
    $$$$$: 2652-block  0
    $$$$$: 2652-block  1
    $$$$$: 2652-block  2
    =====: 2653:    } catch (...) {  // NOLINT
    $$$$$: 2653-block  0
    $$$$$: 2653-block  1
    =====: 2654:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2654-block  0
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(nullptr, location));
    $$$$$: 2656-block  0
    $$$$$: 2656-block  1
    $$$$$: 2656-block  2
        -: 2657:    }
    =====: 2658:    return static_cast<Result>(0);
    $$$$$: 2658-block  0
        -: 2659:#else
        -: 2660:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2661:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2662:  } else {
    #####: 2663:    return (object->*method)();
    %%%%%: 2663-block  0
    %%%%%: 2663-block  1
    %%%%%: 2663-block  2
    %%%%%: 2663-block  3
        -: 2664:  }
        -: 2665:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS0_15TestFactoryBaseEPNS_4TestEEET0_PT_MS6_FS5_vEPKc:
       12: 2613:Result HandleExceptionsInMethodIfSupported(
        -: 2614:    T* object, Result (T::*method)(), const char* location) {
        -: 2615:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2616:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2617:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2618:  // after the exception is caught and either report or re-throw the
        -: 2619:  // exception based on the flag's value:
        -: 2620:  //
        -: 2621:  // try {
        -: 2622:  //   // Perform the test method.
        -: 2623:  // } catch (...) {
        -: 2624:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2625:  //     // Report the exception as failure.
        -: 2626:  //   else
        -: 2627:  //     throw;  // Re-throws the original exception.
        -: 2628:  // }
        -: 2629:  //
        -: 2630:  // However, the purpose of this flag is to allow the program to drop into
        -: 2631:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2632:  // control enters the catch block, the exception origin information is
        -: 2633:  // lost and the debugger will stop the program at the point of the
        -: 2634:  // re-throw in this function -- instead of at the point of the original
        -: 2635:  // throw statement in the code under test.  For this reason, we perform
        -: 2636:  // the check early, sacrificing the ability to affect Google Test's
        -: 2637:  // exception handling in the method where the exception is thrown.
       12: 2638:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       12: 2638-block  0
        -: 2639:#if GTEST_HAS_EXCEPTIONS
        -: 2640:    try {
       12: 2641:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       12: 2641-block  0
       12: 2641-block  1
    =====: 2642:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2642-block  0
    $$$$$: 2642-block  1
        -: 2643:      // This failure was reported already.
    =====: 2644:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2644-block  0
    $$$$$: 2644-block  1
        -: 2645:      // This exception type can only be thrown by a failed Google
        -: 2646:      // Test assertion with the intention of letting another testing
        -: 2647:      // framework catch it.  Therefore we just re-throw it.
    =====: 2648:      throw;
    =====: 2649:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2649-block  0
    $$$$$: 2649-block  1
    =====: 2650:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2650-block  0
        -: 2651:          TestPartResult::kFatalFailure,
    =====: 2652:          FormatCxxExceptionMessage(e.what(), location));
    $$$$$: 2652-block  0
    $$$$$: 2652-block  1
    $$$$$: 2652-block  2
    =====: 2653:    } catch (...) {  // NOLINT
    $$$$$: 2653-block  0
    $$$$$: 2653-block  1
    =====: 2654:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2654-block  0
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(nullptr, location));
    $$$$$: 2656-block  0
    $$$$$: 2656-block  1
    $$$$$: 2656-block  2
        -: 2657:    }
    =====: 2658:    return static_cast<Result>(0);
    $$$$$: 2658-block  0
        -: 2659:#else
        -: 2660:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2661:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2662:  } else {
    #####: 2663:    return (object->*method)();
    %%%%%: 2663-block  0
    %%%%%: 2663-block  1
    %%%%%: 2663-block  2
    %%%%%: 2663-block  3
        -: 2664:  }
        -: 2665:}
------------------
_ZN7testing8internal35HandleExceptionsInMethodIfSupportedINS_4TestEvEET0_PT_MS4_FS3_vEPKc:
       48: 2613:Result HandleExceptionsInMethodIfSupported(
        -: 2614:    T* object, Result (T::*method)(), const char* location) {
        -: 2615:  // NOTE: The user code can affect the way in which Google Test handles
        -: 2616:  // exceptions by setting GTEST_FLAG(catch_exceptions), but only before
        -: 2617:  // RUN_ALL_TESTS() starts. It is technically possible to check the flag
        -: 2618:  // after the exception is caught and either report or re-throw the
        -: 2619:  // exception based on the flag's value:
        -: 2620:  //
        -: 2621:  // try {
        -: 2622:  //   // Perform the test method.
        -: 2623:  // } catch (...) {
        -: 2624:  //   if (GTEST_FLAG(catch_exceptions))
        -: 2625:  //     // Report the exception as failure.
        -: 2626:  //   else
        -: 2627:  //     throw;  // Re-throws the original exception.
        -: 2628:  // }
        -: 2629:  //
        -: 2630:  // However, the purpose of this flag is to allow the program to drop into
        -: 2631:  // the debugger when the exception is thrown. On most platforms, once the
        -: 2632:  // control enters the catch block, the exception origin information is
        -: 2633:  // lost and the debugger will stop the program at the point of the
        -: 2634:  // re-throw in this function -- instead of at the point of the original
        -: 2635:  // throw statement in the code under test.  For this reason, we perform
        -: 2636:  // the check early, sacrificing the ability to affect Google Test's
        -: 2637:  // exception handling in the method where the exception is thrown.
       48: 2638:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
       48: 2638-block  0
        -: 2639:#if GTEST_HAS_EXCEPTIONS
        -: 2640:    try {
       48: 2641:      return HandleSehExceptionsInMethodIfSupported(object, method, location);
       48: 2641-block  0
       48: 2641-block  1
    =====: 2642:    } catch (const AssertionException&) {  // NOLINT
    $$$$$: 2642-block  0
    $$$$$: 2642-block  1
        -: 2643:      // This failure was reported already.
    =====: 2644:    } catch (const internal::GoogleTestFailureException&) {  // NOLINT
    $$$$$: 2644-block  0
    $$$$$: 2644-block  1
        -: 2645:      // This exception type can only be thrown by a failed Google
        -: 2646:      // Test assertion with the intention of letting another testing
        -: 2647:      // framework catch it.  Therefore we just re-throw it.
    =====: 2648:      throw;
    =====: 2649:    } catch (const std::exception& e) {  // NOLINT
    $$$$$: 2649-block  0
    $$$$$: 2649-block  1
    =====: 2650:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2650-block  0
        -: 2651:          TestPartResult::kFatalFailure,
    =====: 2652:          FormatCxxExceptionMessage(e.what(), location));
    $$$$$: 2652-block  0
    $$$$$: 2652-block  1
    $$$$$: 2652-block  2
    =====: 2653:    } catch (...) {  // NOLINT
    $$$$$: 2653-block  0
    $$$$$: 2653-block  1
    =====: 2654:      internal::ReportFailureInUnknownLocation(
    $$$$$: 2654-block  0
        -: 2655:          TestPartResult::kFatalFailure,
    =====: 2656:          FormatCxxExceptionMessage(nullptr, location));
    $$$$$: 2656-block  0
    $$$$$: 2656-block  1
    $$$$$: 2656-block  2
        -: 2657:    }
    =====: 2658:    return static_cast<Result>(0);
    $$$$$: 2658-block  0
        -: 2659:#else
        -: 2660:    return HandleSehExceptionsInMethodIfSupported(object, method, location);
        -: 2661:#endif  // GTEST_HAS_EXCEPTIONS
        -: 2662:  } else {
    #####: 2663:    return (object->*method)();
    %%%%%: 2663-block  0
    %%%%%: 2663-block  1
    %%%%%: 2663-block  2
    %%%%%: 2663-block  3
        -: 2664:  }
        -: 2665:}
------------------
        -: 2666:
        -: 2667:}  // namespace internal
        -: 2668:
        -: 2669:// Runs the test and updates the test result.
       12: 2670:void Test::Run() {
      12*: 2671:  if (!HasSameFixtureClass()) return;
       12: 2671-block  0
    %%%%%: 2671-block  1
        -: 2672:
       12: 2673:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       12: 2673-block  0
       12: 2674:  impl->os_stack_trace_getter()->UponLeavingGTest();
       12: 2675:  internal::HandleExceptionsInMethodIfSupported(this, &Test::SetUp, "SetUp()");
        -: 2676:  // We will run the test only if SetUp() was successful and didn't call
        -: 2677:  // GTEST_SKIP().
      12*: 2678:  if (!HasFatalFailure() && !IsSkipped()) {
       12: 2678-block  0
       12: 2678-block  1
    %%%%%: 2678-block  2
       12: 2678-block  3
       12: 2679:    impl->os_stack_trace_getter()->UponLeavingGTest();
       12: 2679-block  0
       12: 2680:    internal::HandleExceptionsInMethodIfSupported(
        -: 2681:        this, &Test::TestBody, "the test body");
        -: 2682:  }
        -: 2683:
        -: 2684:  // However, we want to clean up as much as possible.  Hence we will
        -: 2685:  // always call TearDown(), even if SetUp() or the test body has
        -: 2686:  // failed.
       12: 2687:  impl->os_stack_trace_getter()->UponLeavingGTest();
       12: 2687-block  0
       12: 2688:  internal::HandleExceptionsInMethodIfSupported(
        -: 2689:      this, &Test::TearDown, "TearDown()");
        -: 2690:}
        -: 2691:
        -: 2692:// Returns true if and only if the current test has a fatal failure.
       25: 2693:bool Test::HasFatalFailure() {
       25: 2694:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
       25: 2694-block  0
        -: 2695:}
        -: 2696:
        -: 2697:// Returns true if and only if the current test has a non-fatal failure.
    #####: 2698:bool Test::HasNonfatalFailure() {
        -: 2699:  return internal::GetUnitTestImpl()->current_test_result()->
    #####: 2700:      HasNonfatalFailure();
    %%%%%: 2700-block  0
        -: 2701:}
        -: 2702:
        -: 2703:// Returns true if and only if the current test was skipped.
       25: 2704:bool Test::IsSkipped() {
       25: 2705:  return internal::GetUnitTestImpl()->current_test_result()->Skipped();
       25: 2705-block  0
        -: 2706:}
        -: 2707:
        -: 2708:// class TestInfo
        -: 2709:
        -: 2710:// Constructs a TestInfo object. It assumes ownership of the test factory
        -: 2711:// object.
       12: 2712:TestInfo::TestInfo(const std::string& a_test_suite_name,
        -: 2713:                   const std::string& a_name, const char* a_type_param,
        -: 2714:                   const char* a_value_param,
        -: 2715:                   internal::CodeLocation a_code_location,
        -: 2716:                   internal::TypeId fixture_class_id,
       12: 2717:                   internal::TestFactoryBase* factory)
        -: 2718:    : test_suite_name_(a_test_suite_name),
        -: 2719:      name_(a_name),
    #####: 2720:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2720-block  0
    %%%%%: 2720-block  1
    $$$$$: 2720-block  2
    #####: 2721:      value_param_(a_value_param ? new std::string(a_value_param) : nullptr),
    %%%%%: 2721-block  0
    %%%%%: 2721-block  1
    $$$$$: 2721-block  2
        -: 2722:      location_(a_code_location),
        -: 2723:      fixture_class_id_(fixture_class_id),
        -: 2724:      should_run_(false),
        -: 2725:      is_disabled_(false),
        -: 2726:      matches_filter_(false),
        -: 2727:      is_in_another_shard_(false),
        -: 2728:      factory_(factory),
      36*: 2729:      result_() {}
       12: 2729-block  0
       12: 2729-block  1
    %%%%%: 2729-block  2
       12: 2729-block  3
       12: 2729-block  4
       12: 2729-block  5
    %%%%%: 2729-block  6
       12: 2729-block  7
       12: 2729-block  8
       12: 2729-block  9
       12: 2729-block 10
       12: 2729-block 11
    $$$$$: 2729-block 12
    $$$$$: 2729-block 13
    $$$$$: 2729-block 14
    $$$$$: 2729-block 15
    $$$$$: 2729-block 16
        -: 2730:
        -: 2731:// Destructs a TestInfo object.
    #####: 2732:TestInfo::~TestInfo() { delete factory_; }
    %%%%%: 2732-block  0
    %%%%%: 2732-block  1
    %%%%%: 2732-block  2
        -: 2733:
        -: 2734:namespace internal {
        -: 2735:
        -: 2736:// Creates a new TestInfo object and registers it with Google Test;
        -: 2737:// returns the created object.
        -: 2738://
        -: 2739:// Arguments:
        -: 2740://
        -: 2741://   test_suite_name:  name of the test suite
        -: 2742://   name:             name of the test
        -: 2743://   type_param:       the name of the test's type parameter, or NULL if
        -: 2744://                     this is not a typed or a type-parameterized test.
        -: 2745://   value_param:      text representation of the test's value parameter,
        -: 2746://                     or NULL if this is not a value-parameterized test.
        -: 2747://   code_location:    code location where the test is defined
        -: 2748://   fixture_class_id: ID of the test fixture class
        -: 2749://   set_up_tc:        pointer to the function that sets up the test suite
        -: 2750://   tear_down_tc:     pointer to the function that tears down the test suite
        -: 2751://   factory:          pointer to the factory that creates a test object.
        -: 2752://                     The newly created TestInfo instance will assume
        -: 2753://                     ownership of the factory object.
       12: 2754:TestInfo* MakeAndRegisterTestInfo(
        -: 2755:    const char* test_suite_name, const char* name, const char* type_param,
        -: 2756:    const char* value_param, CodeLocation code_location,
        -: 2757:    TypeId fixture_class_id, SetUpTestSuiteFunc set_up_tc,
        -: 2758:    TearDownTestSuiteFunc tear_down_tc, TestFactoryBase* factory) {
        -: 2759:  TestInfo* const test_info =
        -: 2760:      new TestInfo(test_suite_name, name, type_param, value_param,
       12: 2761:                   code_location, fixture_class_id, factory);
       12: 2761-block  0
       12: 2761-block  1
       12: 2761-block  2
       12: 2761-block  3
       12: 2761-block  4
       12: 2761-block  5
    $$$$$: 2761-block  6
    $$$$$: 2761-block  7
    $$$$$: 2761-block  8
    $$$$$: 2761-block  9
    $$$$$: 2761-block 10
    $$$$$: 2761-block 11
    $$$$$: 2761-block 12
       12: 2762:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
       12: 2763:  return test_info;
       12: 2763-block  0
        -: 2764:}
        -: 2765:
    #####: 2766:void ReportInvalidTestSuiteType(const char* test_suite_name,
        -: 2767:                                CodeLocation code_location) {
    #####: 2768:  Message errors;
    %%%%%: 2768-block  0
    $$$$$: 2768-block  1
        -: 2769:  errors
    #####: 2770:      << "Attempted redefinition of test suite " << test_suite_name << ".\n"
    %%%%%: 2770-block  0
    %%%%%: 2770-block  1
    %%%%%: 2770-block  2
    #####: 2771:      << "All tests in the same test suite must use the same test fixture\n"
    %%%%%: 2771-block  0
    #####: 2772:      << "class.  However, in test suite " << test_suite_name << ", you tried\n"
    %%%%%: 2772-block  0
    %%%%%: 2772-block  1
    %%%%%: 2772-block  2
    #####: 2773:      << "to define a test using a fixture class different from the one\n"
    %%%%%: 2773-block  0
    #####: 2774:      << "used earlier. This can happen if the two fixture classes are\n"
    %%%%%: 2774-block  0
    #####: 2775:      << "from different namespaces and have the same name. You should\n"
    %%%%%: 2775-block  0
    #####: 2776:      << "probably rename one of the classes to put the tests into different\n"
    %%%%%: 2776-block  0
    #####: 2777:      << "test suites.";
    %%%%%: 2777-block  0
        -: 2778:
    #####: 2779:  GTEST_LOG_(ERROR) << FormatFileLocation(code_location.file.c_str(),
    %%%%%: 2779-block  0
    %%%%%: 2779-block  1
    $$$$$: 2779-block  2
    $$$$$: 2779-block  3
    $$$$$: 2779-block  4
    $$$$$: 2779-block  5
    #####: 2780:                                          code_location.line)
    #####: 2781:                    << " " << errors.GetString();
    %%%%%: 2781-block  0
    %%%%%: 2781-block  1
    %%%%%: 2781-block  2
    %%%%%: 2781-block  3
    %%%%%: 2781-block  4
    $$$$$: 2781-block  5
    $$$$$: 2781-block  6
    #####: 2782:}
        -: 2783:}  // namespace internal
        -: 2784:
        -: 2785:namespace {
        -: 2786:
        -: 2787:// A predicate that checks the test name of a TestInfo against a known
        -: 2788:// value.
        -: 2789://
        -: 2790:// This is used for implementation of the TestSuite class only.  We put
        -: 2791:// it in the anonymous namespace to prevent polluting the outer
        -: 2792:// namespace.
        -: 2793://
        -: 2794:// TestNameIs is copyable.
        -: 2795:class TestNameIs {
        -: 2796: public:
        -: 2797:  // Constructor.
        -: 2798:  //
        -: 2799:  // TestNameIs has NO default constructor.
        -: 2800:  explicit TestNameIs(const char* name)
        -: 2801:      : name_(name) {}
        -: 2802:
        -: 2803:  // Returns true if and only if the test name of test_info matches name_.
        -: 2804:  bool operator()(const TestInfo * test_info) const {
        -: 2805:    return test_info && test_info->name() == name_;
        -: 2806:  }
        -: 2807:
        -: 2808: private:
        -: 2809:  std::string name_;
        -: 2810:};
        -: 2811:
        -: 2812:}  // namespace
        -: 2813:
        -: 2814:namespace internal {
        -: 2815:
        -: 2816:// This method expands all parameterized tests registered with macros TEST_P
        -: 2817:// and INSTANTIATE_TEST_SUITE_P into regular tests and registers those.
        -: 2818:// This will be done just once during the program runtime.
        1: 2819:void UnitTestImpl::RegisterParameterizedTests() {
        1: 2820:  if (!parameterized_tests_registered_) {
        1: 2820-block  0
        1: 2821:    parameterized_test_registry_.RegisterTests();
        1: 2821-block  0
        1: 2822:    type_parameterized_test_registry_.CheckForInstantiations();
        1: 2823:    parameterized_tests_registered_ = true;
        -: 2824:  }
        1: 2825:}
        -: 2826:
        -: 2827:}  // namespace internal
        -: 2828:
        -: 2829:// Creates the test object, runs it, records its result, and then
        -: 2830:// deletes it.
       12: 2831:void TestInfo::Run() {
      12*: 2832:  if (!should_run_) return;
       12: 2832-block  0
    %%%%%: 2832-block  1
        -: 2833:
        -: 2834:  // Tells UnitTest where to store test result.
       12: 2835:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
       12: 2835-block  0
       12: 2836:  impl->set_current_test_info(this);
        -: 2837:
       12: 2838:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        -: 2839:
        -: 2840:  // Notifies the unit test event listeners that a test is about to start.
       12: 2841:  repeater->OnTestStart(*this);
        -: 2842:
       12: 2843:  const TimeInMillis start = internal::GetTimeInMillis();
        -: 2844:
       12: 2845:  impl->os_stack_trace_getter()->UponLeavingGTest();
        -: 2846:
        -: 2847:  // Creates the test object.
       24: 2848:  Test* const test = internal::HandleExceptionsInMethodIfSupported(
       12: 2849:      factory_, &internal::TestFactoryBase::CreateTest,
        -: 2850:      "the test fixture's constructor");
        -: 2851:
        -: 2852:  // Runs the test if the constructor didn't generate a fatal failure or invoke
        -: 2853:  // GTEST_SKIP().
        -: 2854:  // Note that the object will not be null
      12*: 2855:  if (!Test::HasFatalFailure() && !Test::IsSkipped()) {
       12: 2855-block  0
       12: 2855-block  1
    %%%%%: 2855-block  2
       12: 2855-block  3
        -: 2856:    // This doesn't throw as all user code that can throw are wrapped into
        -: 2857:    // exception handling code.
       12: 2858:    test->Run();
       12: 2858-block  0
        -: 2859:  }
        -: 2860:
       12: 2861:  if (test != nullptr) {
       12: 2861-block  0
        -: 2862:    // Deletes the test object.
       12: 2863:    impl->os_stack_trace_getter()->UponLeavingGTest();
       12: 2863-block  0
       12: 2864:    internal::HandleExceptionsInMethodIfSupported(
        -: 2865:        test, &Test::DeleteSelf_, "the test fixture's destructor");
        -: 2866:  }
        -: 2867:
       12: 2868:  result_.set_start_timestamp(start);
       12: 2868-block  0
       12: 2869:  result_.set_elapsed_time(internal::GetTimeInMillis() - start);
        -: 2870:
        -: 2871:  // Notifies the unit test event listener that a test has just finished.
       12: 2872:  repeater->OnTestEnd(*this);
        -: 2873:
        -: 2874:  // Tells UnitTest to stop associating assertion results to this
        -: 2875:  // test.
       12: 2876:  impl->set_current_test_info(nullptr);
        -: 2877:}
        -: 2878:
        -: 2879:// Skip and records a skipped test result for this object.
    #####: 2880:void TestInfo::Skip() {
    #####: 2881:  if (!should_run_) return;
    %%%%%: 2881-block  0
    %%%%%: 2881-block  1
        -: 2882:
    #####: 2883:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 2883-block  0
    #####: 2884:  impl->set_current_test_info(this);
    %%%%%: 2884-block  0
        -: 2885:
    #####: 2886:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
    %%%%%: 2886-block  0
        -: 2887:
        -: 2888:  // Notifies the unit test event listeners that a test is about to start.
    #####: 2889:  repeater->OnTestStart(*this);
        -: 2890:
        -: 2891:  const TestPartResult test_part_result =
    #####: 2892:      TestPartResult(TestPartResult::kSkip, this->file(), this->line(), "");
    %%%%%: 2892-block  0
    $$$$$: 2892-block  1
    #####: 2893:  impl->GetTestPartResultReporterForCurrentThread()->ReportTestPartResult(
    %%%%%: 2893-block  0
    #####: 2894:      test_part_result);
    %%%%%: 2894-block  0
        -: 2895:
        -: 2896:  // Notifies the unit test event listener that a test has just finished.
    #####: 2897:  repeater->OnTestEnd(*this);
    %%%%%: 2897-block  0
    #####: 2898:  impl->set_current_test_info(nullptr);
    %%%%%: 2898-block  0
        -: 2899:}
        -: 2900:
        -: 2901:// class TestSuite
        -: 2902:
        -: 2903:// Gets the number of successful tests in this test suite.
        1: 2904:int TestSuite::successful_test_count() const {
        1: 2905:  return CountIf(test_info_list_, TestPassed);
        1: 2905-block  0
        -: 2906:}
        -: 2907:
        -: 2908:// Gets the number of successful tests in this test suite.
        1: 2909:int TestSuite::skipped_test_count() const {
        1: 2910:  return CountIf(test_info_list_, TestSkipped);
        1: 2910-block  0
        -: 2911:}
        -: 2912:
        -: 2913:// Gets the number of failed tests in this test suite.
        2: 2914:int TestSuite::failed_test_count() const {
        2: 2915:  return CountIf(test_info_list_, TestFailed);
        2: 2915-block  0
        -: 2916:}
        -: 2917:
        -: 2918:// Gets the number of disabled tests that will be reported in the XML report.
        1: 2919:int TestSuite::reportable_disabled_test_count() const {
        1: 2920:  return CountIf(test_info_list_, TestReportableDisabled);
        1: 2920-block  0
        -: 2921:}
        -: 2922:
        -: 2923:// Gets the number of disabled tests in this test suite.
    #####: 2924:int TestSuite::disabled_test_count() const {
    #####: 2925:  return CountIf(test_info_list_, TestDisabled);
    %%%%%: 2925-block  0
        -: 2926:}
        -: 2927:
        -: 2928:// Gets the number of tests to be printed in the XML report.
    #####: 2929:int TestSuite::reportable_test_count() const {
    #####: 2930:  return CountIf(test_info_list_, TestReportable);
    %%%%%: 2930-block  0
        -: 2931:}
        -: 2932:
        -: 2933:// Get the number of tests in this test suite that should run.
        4: 2934:int TestSuite::test_to_run_count() const {
        4: 2935:  return CountIf(test_info_list_, ShouldRunTest);
        4: 2935-block  0
        -: 2936:}
        -: 2937:
        -: 2938:// Gets the number of all tests.
       13: 2939:int TestSuite::total_test_count() const {
       13: 2940:  return static_cast<int>(test_info_list_.size());
       13: 2940-block  0
        -: 2941:}
        -: 2942:
        -: 2943:// Creates a TestSuite with the given name.
        -: 2944://
        -: 2945:// Arguments:
        -: 2946://
        -: 2947://   a_name:       name of the test suite
        -: 2948://   a_type_param: the name of the test suite's type parameter, or NULL if
        -: 2949://                 this is not a typed or a type-parameterized test suite.
        -: 2950://   set_up_tc:    pointer to the function that sets up the test suite
        -: 2951://   tear_down_tc: pointer to the function that tears down the test suite
        1: 2952:TestSuite::TestSuite(const char* a_name, const char* a_type_param,
        -: 2953:                     internal::SetUpTestSuiteFunc set_up_tc,
        1: 2954:                     internal::TearDownTestSuiteFunc tear_down_tc)
        -: 2955:    : name_(a_name),
    #####: 2956:      type_param_(a_type_param ? new std::string(a_type_param) : nullptr),
    %%%%%: 2956-block  0
    %%%%%: 2956-block  1
    $$$$$: 2956-block  2
        -: 2957:      set_up_tc_(set_up_tc),
        -: 2958:      tear_down_tc_(tear_down_tc),
        -: 2959:      should_run_(false),
        -: 2960:      start_timestamp_(0),
       3*: 2961:      elapsed_time_(0) {}
        1: 2961-block  0
    %%%%%: 2961-block  1
        1: 2961-block  2
        1: 2961-block  3
        1: 2961-block  4
        1: 2961-block  5
    $$$$$: 2961-block  6
    $$$$$: 2961-block  7
    $$$$$: 2961-block  8
    $$$$$: 2961-block  9
        -: 2962:
        -: 2963:// Destructor of TestSuite.
    #####: 2964:TestSuite::~TestSuite() {
        -: 2965:  // Deletes every Test in the collection.
    #####: 2966:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2967:}
------------------
_ZN7testing9TestSuiteD0Ev:
    #####: 2964:TestSuite::~TestSuite() {
        -: 2965:  // Deletes every Test in the collection.
        -: 2966:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    #####: 2967:}
    %%%%%: 2967-block  0
------------------
_ZN7testing9TestSuiteD2Ev:
    #####: 2964:TestSuite::~TestSuite() {
        -: 2965:  // Deletes every Test in the collection.
    #####: 2966:  ForEach(test_info_list_, internal::Delete<TestInfo>);
    %%%%%: 2966-block  0
    #####: 2967:}
------------------
        -: 2968:
        -: 2969:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2970:// total_test_count() - 1. If i is not in that range, returns NULL.
    #####: 2971:const TestInfo* TestSuite::GetTestInfo(int i) const {
    #####: 2972:  const int index = GetElementOr(test_indices_, i, -1);
    %%%%%: 2972-block  0
    #####: 2973:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
    %%%%%: 2973-block  0
    %%%%%: 2973-block  1
    %%%%%: 2973-block  2
        -: 2974:}
        -: 2975:
        -: 2976:// Returns the i-th test among all the tests. i can range from 0 to
        -: 2977:// total_test_count() - 1. If i is not in that range, returns NULL.
       12: 2978:TestInfo* TestSuite::GetMutableTestInfo(int i) {
       12: 2979:  const int index = GetElementOr(test_indices_, i, -1);
       12: 2979-block  0
      12*: 2980:  return index < 0 ? nullptr : test_info_list_[static_cast<size_t>(index)];
       12: 2980-block  0
    %%%%%: 2980-block  1
       12: 2980-block  2
        -: 2981:}
        -: 2982:
        -: 2983:// Adds a test to this test suite.  Will delete the test upon
        -: 2984:// destruction of the TestSuite object.
       12: 2985:void TestSuite::AddTestInfo(TestInfo* test_info) {
       12: 2986:  test_info_list_.push_back(test_info);
       12: 2986-block  0
       12: 2987:  test_indices_.push_back(static_cast<int>(test_indices_.size()));
       12: 2988:}
       12: 2988-block  0
        -: 2989:
        -: 2990:// Runs every test in this TestSuite.
        1: 2991:void TestSuite::Run() {
       1*: 2992:  if (!should_run_) return;
        1: 2992-block  0
    %%%%%: 2992-block  1
        -: 2993:
        1: 2994:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
        1: 2994-block  0
        1: 2995:  impl->set_current_test_suite(this);
        -: 2996:
        1: 2997:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        -: 2998:
        -: 2999:  // Call both legacy and the new API
        1: 3000:  repeater->OnTestSuiteStart(*this);
        -: 3001://  Legacy API is deprecated but still available
        -: 3002:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3003:  repeater->OnTestCaseStart(*this);
        -: 3004:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3005:
        1: 3006:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3007:  internal::HandleExceptionsInMethodIfSupported(
        -: 3008:      this, &TestSuite::RunSetUpTestSuite, "SetUpTestSuite()");
        -: 3009:
        1: 3010:  start_timestamp_ = internal::GetTimeInMillis();
       13: 3011:  for (int i = 0; i < total_test_count(); i++) {
       13: 3011-block  0
       12: 3011-block  1
       12: 3012:    GetMutableTestInfo(i)->Run();
       12: 3012-block  0
      12*: 3013:    if (GTEST_FLAG(fail_fast) && GetMutableTestInfo(i)->result()->Failed()) {
    %%%%%: 3013-block  0
    %%%%%: 3013-block  1
       12: 3013-block  2
       12: 3013-block  3
    #####: 3014:      for (int j = i + 1; j < total_test_count(); j++) {
    %%%%%: 3014-block  0
    %%%%%: 3014-block  1
    #####: 3015:        GetMutableTestInfo(j)->Skip();
    %%%%%: 3015-block  0
        -: 3016:      }
    #####: 3017:      break;
    %%%%%: 3017-block  0
        -: 3018:    }
        -: 3019:  }
        1: 3020:  elapsed_time_ = internal::GetTimeInMillis() - start_timestamp_;
        1: 3020-block  0
        -: 3021:
        1: 3022:  impl->os_stack_trace_getter()->UponLeavingGTest();
        1: 3023:  internal::HandleExceptionsInMethodIfSupported(
        -: 3024:      this, &TestSuite::RunTearDownTestSuite, "TearDownTestSuite()");
        -: 3025:
        -: 3026:  // Call both legacy and the new API
        1: 3027:  repeater->OnTestSuiteEnd(*this);
        -: 3028://  Legacy API is deprecated but still available
        -: 3029:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3030:  repeater->OnTestCaseEnd(*this);
        -: 3031:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3032:
        1: 3033:  impl->set_current_test_suite(nullptr);
        -: 3034:}
        -: 3035:
        -: 3036:// Skips all tests under this TestSuite.
    #####: 3037:void TestSuite::Skip() {
    #####: 3038:  if (!should_run_) return;
    %%%%%: 3038-block  0
    %%%%%: 3038-block  1
        -: 3039:
    #####: 3040:  internal::UnitTestImpl* const impl = internal::GetUnitTestImpl();
    %%%%%: 3040-block  0
    #####: 3041:  impl->set_current_test_suite(this);
        -: 3042:
    #####: 3043:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
        -: 3044:
        -: 3045:  // Call both legacy and the new API
    #####: 3046:  repeater->OnTestSuiteStart(*this);
        -: 3047://  Legacy API is deprecated but still available
        -: 3048:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3049:  repeater->OnTestCaseStart(*this);
        -: 3050:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3051:
    #####: 3052:  for (int i = 0; i < total_test_count(); i++) {
    %%%%%: 3052-block  0
    #####: 3053:    GetMutableTestInfo(i)->Skip();
    %%%%%: 3053-block  0
        -: 3054:  }
        -: 3055:
        -: 3056:  // Call both legacy and the new API
    #####: 3057:  repeater->OnTestSuiteEnd(*this);
    %%%%%: 3057-block  0
        -: 3058:  // Legacy API is deprecated but still available
        -: 3059:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3060:  repeater->OnTestCaseEnd(*this);
        -: 3061:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3062:
    #####: 3063:  impl->set_current_test_suite(nullptr);
        -: 3064:}
        -: 3065:
        -: 3066:// Clears the results of all tests in this test suite.
        1: 3067:void TestSuite::ClearResult() {
        1: 3068:  ad_hoc_test_result_.Clear();
        1: 3068-block  0
        1: 3069:  ForEach(test_info_list_, TestInfo::ClearTestResult);
        1: 3070:}
        -: 3071:
        -: 3072:// Shuffles the tests in this test suite.
    #####: 3073:void TestSuite::ShuffleTests(internal::Random* random) {
    #####: 3074:  Shuffle(random, &test_indices_);
    %%%%%: 3074-block  0
    #####: 3075:}
        -: 3076:
        -: 3077:// Restores the test order to before the first shuffle.
        1: 3078:void TestSuite::UnshuffleTests() {
       13: 3079:  for (size_t i = 0; i < test_indices_.size(); i++) {
        1: 3079-block  0
       13: 3079-block  1
       12: 3080:    test_indices_[i] = static_cast<int>(i);
       12: 3080-block  0
        -: 3081:  }
        1: 3082:}
        -: 3083:
        -: 3084:// Formats a countable noun.  Depending on its quantity, either the
        -: 3085:// singular form or the plural form is used. e.g.
        -: 3086://
        -: 3087:// FormatCountableNoun(1, "formula", "formuli") returns "1 formula".
        -: 3088:// FormatCountableNoun(5, "book", "books") returns "5 books".
        7: 3089:static std::string FormatCountableNoun(int count,
        -: 3090:                                       const char * singular_form,
        -: 3091:                                       const char * plural_form) {
       14: 3092:  return internal::StreamableToString(count) + " " +
        7: 3092-block  0
        7: 3092-block  1
    $$$$$: 3092-block  2
    $$$$$: 3092-block  3
    $$$$$: 3092-block  4
       21: 3093:      (count == 1 ? singular_form : plural_form);
        7: 3093-block  0
        2: 3093-block  1
        5: 3093-block  2
        7: 3093-block  3
        7: 3093-block  4
        -: 3094:}
        -: 3095:
        -: 3096:// Formats the count of tests.
        3: 3097:static std::string FormatTestCount(int test_count) {
        3: 3098:  return FormatCountableNoun(test_count, "test", "tests");
        3: 3098-block  0
        -: 3099:}
        -: 3100:
        -: 3101:// Formats the count of test suites.
        2: 3102:static std::string FormatTestSuiteCount(int test_suite_count) {
        2: 3103:  return FormatCountableNoun(test_suite_count, "test suite", "test suites");
        2: 3103-block  0
        -: 3104:}
        -: 3105:
        -: 3106:// Converts a TestPartResult::Type enum to human-friendly string
        -: 3107:// representation.  Both kNonFatalFailure and kFatalFailure are translated
        -: 3108:// to "Failure", as the user usually doesn't care about the difference
        -: 3109:// between the two when viewing the test result.
    #####: 3110:static const char * TestPartResultTypeToString(TestPartResult::Type type) {
    #####: 3111:  switch (type) {
    %%%%%: 3111-block  0
    #####: 3112:    case TestPartResult::kSkip:
    #####: 3113:      return "Skipped\n";
    %%%%%: 3113-block  0
    #####: 3114:    case TestPartResult::kSuccess:
    #####: 3115:      return "Success";
    %%%%%: 3115-block  0
        -: 3116:
    #####: 3117:    case TestPartResult::kNonFatalFailure:
        -: 3118:    case TestPartResult::kFatalFailure:
        -: 3119:#ifdef _MSC_VER
        -: 3120:      return "error: ";
        -: 3121:#else
    #####: 3122:      return "Failure\n";
    %%%%%: 3122-block  0
        -: 3123:#endif
    #####: 3124:    default:
    #####: 3125:      return "Unknown result type";
    %%%%%: 3125-block  0
        -: 3126:  }
        -: 3127:}
        -: 3128:
        -: 3129:namespace internal {
        -: 3130:namespace {
        -: 3131:enum class GTestColor { kDefault, kRed, kGreen, kYellow };
        -: 3132:}  // namespace
        -: 3133:
        -: 3134:// Prints a TestPartResult to an std::string.
    #####: 3135:static std::string PrintTestPartResultToString(
        -: 3136:    const TestPartResult& test_part_result) {
    #####: 3137:  return (Message()
    %%%%%: 3137-block  0
    $$$$$: 3137-block  1
    #####: 3138:          << internal::FormatFileLocation(test_part_result.file_name(),
    $$$$$: 3138-block  0
    $$$$$: 3138-block  1
    #####: 3139:                                          test_part_result.line_number())
    %%%%%: 3139-block  0
    #####: 3140:          << " " << TestPartResultTypeToString(test_part_result.type())
    %%%%%: 3140-block  0
    %%%%%: 3140-block  1
    $$$$$: 3140-block  2
    #####: 3141:          << test_part_result.message()).GetString();
    %%%%%: 3141-block  0
    %%%%%: 3141-block  1
    %%%%%: 3141-block  2
    %%%%%: 3141-block  3
    $$$$$: 3141-block  4
        -: 3142:}
        -: 3143:
        -: 3144:// Prints a TestPartResult.
    #####: 3145:static void PrintTestPartResult(const TestPartResult& test_part_result) {
        -: 3146:  const std::string& result =
    #####: 3147:      PrintTestPartResultToString(test_part_result);
    %%%%%: 3147-block  0
    %%%%%: 3147-block  1
    $$$$$: 3147-block  2
    #####: 3148:  printf("%s\n", result.c_str());
    %%%%%: 3148-block  0
    #####: 3149:  fflush(stdout);
    %%%%%: 3149-block  0
    %%%%%: 3149-block  1
        -: 3150:  // If the test program runs in Visual Studio or a debugger, the
        -: 3151:  // following statements add the test part result message to the Output
        -: 3152:  // window such that the user can double-click on it to jump to the
        -: 3153:  // corresponding source code location; otherwise they do nothing.
        -: 3154:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3155:  // We don't call OutputDebugString*() on Windows Mobile, as printing
        -: 3156:  // to stdout is done by OutputDebugString() there already - we don't
        -: 3157:  // want the same message printed twice.
        -: 3158:  ::OutputDebugStringA(result.c_str());
        -: 3159:  ::OutputDebugStringA("\n");
        -: 3160:#endif
    #####: 3161:}
        -: 3162:
        -: 3163:// class PrettyUnitTestResultPrinter
        -: 3164:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3165:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3166:
        -: 3167:// Returns the character attribute for the given color.
        -: 3168:static WORD GetColorAttribute(GTestColor color) {
        -: 3169:  switch (color) {
        -: 3170:    case GTestColor::kRed:
        -: 3171:      return FOREGROUND_RED;
        -: 3172:    case GTestColor::kGreen:
        -: 3173:      return FOREGROUND_GREEN;
        -: 3174:    case GTestColor::kYellow:
        -: 3175:      return FOREGROUND_RED | FOREGROUND_GREEN;
        -: 3176:    default:           return 0;
        -: 3177:  }
        -: 3178:}
        -: 3179:
        -: 3180:static int GetBitOffset(WORD color_mask) {
        -: 3181:  if (color_mask == 0) return 0;
        -: 3182:
        -: 3183:  int bitOffset = 0;
        -: 3184:  while ((color_mask & 1) == 0) {
        -: 3185:    color_mask >>= 1;
        -: 3186:    ++bitOffset;
        -: 3187:  }
        -: 3188:  return bitOffset;
        -: 3189:}
        -: 3190:
        -: 3191:static WORD GetNewColor(GTestColor color, WORD old_color_attrs) {
        -: 3192:  // Let's reuse the BG
        -: 3193:  static const WORD background_mask = BACKGROUND_BLUE | BACKGROUND_GREEN |
        -: 3194:                                      BACKGROUND_RED | BACKGROUND_INTENSITY;
        -: 3195:  static const WORD foreground_mask = FOREGROUND_BLUE | FOREGROUND_GREEN |
        -: 3196:                                      FOREGROUND_RED | FOREGROUND_INTENSITY;
        -: 3197:  const WORD existing_bg = old_color_attrs & background_mask;
        -: 3198:
        -: 3199:  WORD new_color =
        -: 3200:      GetColorAttribute(color) | existing_bg | FOREGROUND_INTENSITY;
        -: 3201:  static const int bg_bitOffset = GetBitOffset(background_mask);
        -: 3202:  static const int fg_bitOffset = GetBitOffset(foreground_mask);
        -: 3203:
        -: 3204:  if (((new_color & background_mask) >> bg_bitOffset) ==
        -: 3205:      ((new_color & foreground_mask) >> fg_bitOffset)) {
        -: 3206:    new_color ^= FOREGROUND_INTENSITY;  // invert intensity
        -: 3207:  }
        -: 3208:  return new_color;
        -: 3209:}
        -: 3210:
        -: 3211:#else
        -: 3212:
        -: 3213:// Returns the ANSI color code for the given color. GTestColor::kDefault is
        -: 3214:// an invalid input.
    #####: 3215:static const char* GetAnsiColorCode(GTestColor color) {
    #####: 3216:  switch (color) {
    %%%%%: 3216-block  0
    #####: 3217:    case GTestColor::kRed:
    #####: 3218:      return "1";
    %%%%%: 3218-block  0
    #####: 3219:    case GTestColor::kGreen:
    #####: 3220:      return "2";
    %%%%%: 3220-block  0
    #####: 3221:    case GTestColor::kYellow:
    #####: 3222:      return "3";
    %%%%%: 3222-block  0
    #####: 3223:    default:
    #####: 3224:      return nullptr;
    %%%%%: 3224-block  0
        -: 3225:  }
        -: 3226:}
        -: 3227:
        -: 3228:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
        -: 3229:
        -: 3230:// Returns true if and only if Google Test should use colors in the output.
        1: 3231:bool ShouldUseColor(bool stdout_is_tty) {
        1: 3232:  const char* const gtest_color = GTEST_FLAG(color).c_str();
        1: 3232-block  0
        -: 3233:
        1: 3234:  if (String::CaseInsensitiveCStringEquals(gtest_color, "auto")) {
        -: 3235:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MINGW
        -: 3236:    // On Windows the TERM variable is usually not set, but the
        -: 3237:    // console there does support colors.
        -: 3238:    return stdout_is_tty;
        -: 3239:#else
        -: 3240:    // On non-Windows platforms, we rely on the TERM variable.
    #####: 3241:    const char* const term = posix::GetEnv("TERM");
    %%%%%: 3241-block  0
        -: 3242:    const bool term_supports_color =
    #####: 3243:        String::CStringEquals(term, "xterm") ||
    #####: 3244:        String::CStringEquals(term, "xterm-color") ||
    %%%%%: 3244-block  0
    #####: 3245:        String::CStringEquals(term, "xterm-256color") ||
    %%%%%: 3245-block  0
    #####: 3246:        String::CStringEquals(term, "screen") ||
    %%%%%: 3246-block  0
    #####: 3247:        String::CStringEquals(term, "screen-256color") ||
    %%%%%: 3247-block  0
    #####: 3248:        String::CStringEquals(term, "tmux") ||
    %%%%%: 3248-block  0
    #####: 3249:        String::CStringEquals(term, "tmux-256color") ||
    %%%%%: 3249-block  0
    #####: 3250:        String::CStringEquals(term, "rxvt-unicode") ||
    %%%%%: 3250-block  0
    #####: 3251:        String::CStringEquals(term, "rxvt-unicode-256color") ||
    %%%%%: 3251-block  0
    #####: 3252:        String::CStringEquals(term, "linux") ||
    %%%%%: 3252-block  0
    %%%%%: 3252-block  1
    %%%%%: 3252-block  2
    #####: 3253:        String::CStringEquals(term, "cygwin");
    %%%%%: 3253-block  0
    #####: 3254:    return stdout_is_tty && term_supports_color;
    %%%%%: 3254-block  0
    %%%%%: 3254-block  1
    %%%%%: 3254-block  2
    %%%%%: 3254-block  3
    %%%%%: 3254-block  4
        -: 3255:#endif  // GTEST_OS_WINDOWS
        -: 3256:  }
        -: 3257:
        1: 3258:  return String::CaseInsensitiveCStringEquals(gtest_color, "yes") ||
        1: 3258-block  0
        1: 3259:      String::CaseInsensitiveCStringEquals(gtest_color, "true") ||
        1: 3259-block  0
       3*: 3260:      String::CaseInsensitiveCStringEquals(gtest_color, "t") ||
        1: 3260-block  0
    %%%%%: 3260-block  1
        1: 3260-block  2
        2: 3261:      String::CStringEquals(gtest_color, "1");
        1: 3261-block  0
        1: 3261-block  1
        -: 3262:  // We take "yes", "true", "t", and "1" as meaning "yes".  If the
        -: 3263:  // value is neither one of these nor "auto", we treat it as "no" to
        -: 3264:  // be conservative.
        -: 3265:}
        -: 3266:
        -: 3267:// Helpers for printing colored strings to stdout. Note that on Windows, we
        -: 3268:// cannot simply emit special characters and have the terminal change colors.
        -: 3269:// This routine must actually emit the characters rather than return a string
        -: 3270:// that would be colored when printed, as can be done on Linux.
        -: 3271:
       31: 3272:static void ColoredPrintf(GTestColor color, const char* fmt, ...) {
        -: 3273:  va_list args;
       31: 3274:  va_start(args, fmt);
        -: 3275:
        -: 3276:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS || GTEST_OS_IOS || \
        -: 3277:    GTEST_OS_WINDOWS_PHONE || GTEST_OS_WINDOWS_RT || defined(ESP_PLATFORM)
        -: 3278:  const bool use_color = AlwaysFalse();
        -: 3279:#else
        -: 3280:  static const bool in_color_mode =
       31: 3281:      ShouldUseColor(posix::IsATTY(posix::FileNo(stdout)) != 0);
       31: 3281-block  0
        1: 3281-block  1
        1: 3281-block  2
        1: 3281-block  3
        1: 3281-block  4
        1: 3281-block  5
        1: 3281-block  6
    $$$$$: 3281-block  7
    $$$$$: 3281-block  8
      31*: 3282:  const bool use_color = in_color_mode && (color != GTestColor::kDefault);
       31: 3282-block  0
    %%%%%: 3282-block  1
    %%%%%: 3282-block  2
       31: 3282-block  3
        -: 3283:#endif  // GTEST_OS_WINDOWS_MOBILE || GTEST_OS_ZOS
        -: 3284:
       31: 3285:  if (!use_color) {
       31: 3285-block  0
       31: 3286:    vprintf(fmt, args);
       31: 3286-block  0
       31: 3287:    va_end(args);
       31: 3288:    return;
       31: 3288-block  0
        -: 3289:  }
        -: 3290:
        -: 3291:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE && \
        -: 3292:    !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT && !GTEST_OS_WINDOWS_MINGW
        -: 3293:  const HANDLE stdout_handle = GetStdHandle(STD_OUTPUT_HANDLE);
        -: 3294:
        -: 3295:  // Gets the current text color.
        -: 3296:  CONSOLE_SCREEN_BUFFER_INFO buffer_info;
        -: 3297:  GetConsoleScreenBufferInfo(stdout_handle, &buffer_info);
        -: 3298:  const WORD old_color_attrs = buffer_info.wAttributes;
        -: 3299:  const WORD new_color = GetNewColor(color, old_color_attrs);
        -: 3300:
        -: 3301:  // We need to flush the stream buffers into the console before each
        -: 3302:  // SetConsoleTextAttribute call lest it affect the text that is already
        -: 3303:  // printed but has not yet reached the console.
        -: 3304:  fflush(stdout);
        -: 3305:  SetConsoleTextAttribute(stdout_handle, new_color);
        -: 3306:
        -: 3307:  vprintf(fmt, args);
        -: 3308:
        -: 3309:  fflush(stdout);
        -: 3310:  // Restores the text color.
        -: 3311:  SetConsoleTextAttribute(stdout_handle, old_color_attrs);
        -: 3312:#else
    #####: 3313:  printf("\033[0;3%sm", GetAnsiColorCode(color));
    %%%%%: 3313-block  0
    #####: 3314:  vprintf(fmt, args);
    %%%%%: 3314-block  0
    #####: 3315:  printf("\033[m");  // Resets the terminal to default.
    %%%%%: 3315-block  0
        -: 3316:#endif  // GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_MOBILE
    #####: 3317:  va_end(args);
    %%%%%: 3317-block  0
        -: 3318:}
        -: 3319:
        -: 3320:// Text printed in Google Test's text output and --gtest_list_tests
        -: 3321:// output to label the type parameter and value parameter for a test.
        -: 3322:static const char kTypeParamLabel[] = "TypeParam";
        -: 3323:static const char kValueParamLabel[] = "GetParam()";
        -: 3324:
    #####: 3325:static void PrintFullTestCommentIfPresent(const TestInfo& test_info) {
    #####: 3326:  const char* const type_param = test_info.type_param();
    %%%%%: 3326-block  0
    #####: 3327:  const char* const value_param = test_info.value_param();
        -: 3328:
    #####: 3329:  if (type_param != nullptr || value_param != nullptr) {
    %%%%%: 3329-block  0
    #####: 3330:    printf(", where ");
    %%%%%: 3330-block  0
    #####: 3331:    if (type_param != nullptr) {
    #####: 3332:      printf("%s = %s", kTypeParamLabel, type_param);
    %%%%%: 3332-block  0
    #####: 3333:      if (value_param != nullptr) printf(" and ");
    %%%%%: 3333-block  0
        -: 3334:    }
    #####: 3335:    if (value_param != nullptr) {
    %%%%%: 3335-block  0
    #####: 3336:      printf("%s = %s", kValueParamLabel, value_param);
    %%%%%: 3336-block  0
        -: 3337:    }
        -: 3338:  }
    #####: 3339:}
        -: 3340:
        -: 3341:// This class implements the TestEventListener interface.
        -: 3342://
        -: 3343:// Class PrettyUnitTestResultPrinter is copyable.
        -: 3344:class PrettyUnitTestResultPrinter : public TestEventListener {
        -: 3345: public:
        1: 3346:  PrettyUnitTestResultPrinter() {}
        1: 3346-block  0
       24: 3347:  static void PrintTestName(const char* test_suite, const char* test) {
       24: 3348:    printf("%s.%s", test_suite, test);
       24: 3348-block  0
       24: 3349:  }
        -: 3350:
        -: 3351:  // The following methods override what's in the TestEventListener class.
        1: 3352:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
        -: 3353:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3354:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        1: 3355:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3356:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3357:  void OnTestCaseStart(const TestCase& test_case) override;
        -: 3358:#else
        -: 3359:  void OnTestSuiteStart(const TestSuite& test_suite) override;
        -: 3360:#endif  // OnTestCaseStart
        -: 3361:
        -: 3362:  void OnTestStart(const TestInfo& test_info) override;
        -: 3363:
        -: 3364:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3365:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3366:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3367:  void OnTestCaseEnd(const TestCase& test_case) override;
        -: 3368:#else
        -: 3369:  void OnTestSuiteEnd(const TestSuite& test_suite) override;
        -: 3370:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3371:
        -: 3372:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        1: 3373:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3374:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        1: 3375:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3376:
        -: 3377: private:
        -: 3378:  static void PrintFailedTests(const UnitTest& unit_test);
        -: 3379:  static void PrintFailedTestSuites(const UnitTest& unit_test);
        -: 3380:  static void PrintSkippedTests(const UnitTest& unit_test);
        -: 3381:};
        -: 3382:
        -: 3383:  // Fired before each iteration of tests starts.
        1: 3384:void PrettyUnitTestResultPrinter::OnTestIterationStart(
        -: 3385:    const UnitTest& unit_test, int iteration) {
        1: 3386:  if (GTEST_FLAG(repeat) != 1)
        1: 3386-block  0
    #####: 3387:    printf("\nRepeating all tests (iteration %d) . . .\n\n", iteration + 1);
    %%%%%: 3387-block  0
        -: 3388:
        1: 3389:  const char* const filter = GTEST_FLAG(filter).c_str();
        1: 3389-block  0
        -: 3390:
        -: 3391:  // Prints the filter if it's not *.  This reminds the user that some
        -: 3392:  // tests may be skipped.
        1: 3393:  if (!String::CStringEquals(filter, kUniversalFilter)) {
    #####: 3394:    ColoredPrintf(GTestColor::kYellow, "Note: %s filter = %s\n", GTEST_NAME_,
    %%%%%: 3394-block  0
        -: 3395:                  filter);
        -: 3396:  }
        -: 3397:
        1: 3398:  if (internal::ShouldShard(kTestTotalShards, kTestShardIndex, false)) {
        1: 3398-block  0
    #####: 3399:    const int32_t shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
    %%%%%: 3399-block  0
    #####: 3400:    ColoredPrintf(GTestColor::kYellow, "Note: This is test shard %d of %s.\n",
        -: 3401:                  static_cast<int>(shard_index) + 1,
        -: 3402:                  internal::posix::GetEnv(kTestTotalShards));
        -: 3403:  }
        -: 3404:
        1: 3405:  if (GTEST_FLAG(shuffle)) {
        1: 3405-block  0
    #####: 3406:    ColoredPrintf(GTestColor::kYellow,
    %%%%%: 3406-block  0
        -: 3407:                  "Note: Randomizing tests' orders with a seed of %d .\n",
        -: 3408:                  unit_test.random_seed());
        -: 3409:  }
        -: 3410:
        1: 3411:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3411-block  0
        2: 3412:  printf("Running %s from %s.\n",
        1: 3412-block  0
        2: 3413:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
        1: 3413-block  0
        1: 3413-block  1
    $$$$$: 3413-block  2
    $$$$$: 3413-block  3
        2: 3414:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
    $$$$$: 3414-block  0
        1: 3415:  fflush(stdout);
        1: 3416:}
        -: 3417:
        1: 3418:void PrettyUnitTestResultPrinter::OnEnvironmentsSetUpStart(
        -: 3419:    const UnitTest& /*unit_test*/) {
        1: 3420:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3420-block  0
        1: 3421:  printf("Global test environment set-up.\n");
        1: 3422:  fflush(stdout);
        1: 3423:}
        -: 3424:
        -: 3425:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3426:void PrettyUnitTestResultPrinter::OnTestCaseStart(const TestCase& test_case) {
        -: 3427:  const std::string counts =
        2: 3428:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3428-block  0
        1: 3428-block  1
        1: 3428-block  2
    $$$$$: 3428-block  3
        1: 3429:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3429-block  0
        1: 3430:  printf("%s from %s", counts.c_str(), test_case.name());
        1: 3430-block  0
        1: 3431:  if (test_case.type_param() == nullptr) {
        1: 3431-block  0
        1: 3432:    printf("\n");
        1: 3432-block  0
        -: 3433:  } else {
    #####: 3434:    printf(", where %s = %s\n", kTypeParamLabel, test_case.type_param());
    %%%%%: 3434-block  0
        -: 3435:  }
        1: 3436:  fflush(stdout);
        1: 3436-block  0
        1: 3436-block  1
        1: 3437:}
        -: 3438:#else
        -: 3439:void PrettyUnitTestResultPrinter::OnTestSuiteStart(
        -: 3440:    const TestSuite& test_suite) {
        -: 3441:  const std::string counts =
        -: 3442:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3443:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3444:  printf("%s from %s", counts.c_str(), test_suite.name());
        -: 3445:  if (test_suite.type_param() == nullptr) {
        -: 3446:    printf("\n");
        -: 3447:  } else {
        -: 3448:    printf(", where %s = %s\n", kTypeParamLabel, test_suite.type_param());
        -: 3449:  }
        -: 3450:  fflush(stdout);
        -: 3451:}
        -: 3452:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3453:
       12: 3454:void PrettyUnitTestResultPrinter::OnTestStart(const TestInfo& test_info) {
       12: 3455:  ColoredPrintf(GTestColor::kGreen, "[ RUN      ] ");
       12: 3455-block  0
       12: 3456:  PrintTestName(test_info.test_suite_name(), test_info.name());
       12: 3457:  printf("\n");
       12: 3458:  fflush(stdout);
       12: 3459:}
        -: 3460:
        -: 3461:// Called after an assertion failure.
    #####: 3462:void PrettyUnitTestResultPrinter::OnTestPartResult(
        -: 3463:    const TestPartResult& result) {
    #####: 3464:  switch (result.type()) {
    %%%%%: 3464-block  0
        -: 3465:    // If the test part succeeded, we don't need to do anything.
    #####: 3466:    case TestPartResult::kSuccess:
    #####: 3467:      return;
    %%%%%: 3467-block  0
    #####: 3468:    default:
        -: 3469:      // Print failure message from the assertion
        -: 3470:      // (e.g. expected this and got that).
    #####: 3471:      PrintTestPartResult(result);
    %%%%%: 3471-block  0
    #####: 3472:      fflush(stdout);
        -: 3473:  }
        -: 3474:}
        -: 3475:
       12: 3476:void PrettyUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
       12: 3477:  if (test_info.result()->Passed()) {
       12: 3477-block  0
       12: 3478:    ColoredPrintf(GTestColor::kGreen, "[       OK ] ");
       12: 3478-block  0
    #####: 3479:  } else if (test_info.result()->Skipped()) {
    %%%%%: 3479-block  0
    #####: 3480:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3480-block  0
        -: 3481:  } else {
    #####: 3482:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3482-block  0
        -: 3483:  }
       12: 3484:  PrintTestName(test_info.test_suite_name(), test_info.name());
       12: 3484-block  0
       12: 3485:  if (test_info.result()->Failed())
    #####: 3486:    PrintFullTestCommentIfPresent(test_info);
    %%%%%: 3486-block  0
        -: 3487:
       12: 3488:  if (GTEST_FLAG(print_time)) {
       12: 3488-block  0
       12: 3489:    printf(" (%s ms)\n", internal::StreamableToString(
       12: 3489-block  0
       12: 3489-block  1
    $$$$$: 3489-block  2
    $$$$$: 3489-block  3
       24: 3490:           test_info.result()->elapsed_time()).c_str());
       12: 3490-block  0
        -: 3491:  } else {
    #####: 3492:    printf("\n");
    %%%%%: 3492-block  0
        -: 3493:  }
       12: 3494:  fflush(stdout);
       12: 3494-block  0
       12: 3495:}
        -: 3496:
        -: 3497:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        1: 3498:void PrettyUnitTestResultPrinter::OnTestCaseEnd(const TestCase& test_case) {
       1*: 3499:  if (!GTEST_FLAG(print_time)) return;
        1: 3499-block  0
    %%%%%: 3499-block  1
        -: 3500:
        -: 3501:  const std::string counts =
        2: 3502:      FormatCountableNoun(test_case.test_to_run_count(), "test", "tests");
        1: 3502-block  0
        1: 3502-block  1
        1: 3502-block  2
    $$$$$: 3502-block  3
        1: 3503:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3503-block  0
        1: 3504:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_case.name(),
        1: 3504-block  0
        2: 3505:         internal::StreamableToString(test_case.elapsed_time()).c_str());
        1: 3505-block  0
        1: 3505-block  1
    $$$$$: 3505-block  2
    $$$$$: 3505-block  3
    $$$$$: 3505-block  4
        1: 3506:  fflush(stdout);
        1: 3506-block  0
        -: 3507:}
        -: 3508:#else
        -: 3509:void PrettyUnitTestResultPrinter::OnTestSuiteEnd(const TestSuite& test_suite) {
        -: 3510:  if (!GTEST_FLAG(print_time)) return;
        -: 3511:
        -: 3512:  const std::string counts =
        -: 3513:      FormatCountableNoun(test_suite.test_to_run_count(), "test", "tests");
        -: 3514:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        -: 3515:  printf("%s from %s (%s ms total)\n\n", counts.c_str(), test_suite.name(),
        -: 3516:         internal::StreamableToString(test_suite.elapsed_time()).c_str());
        -: 3517:  fflush(stdout);
        -: 3518:}
        -: 3519:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3520:
        1: 3521:void PrettyUnitTestResultPrinter::OnEnvironmentsTearDownStart(
        -: 3522:    const UnitTest& /*unit_test*/) {
        1: 3523:  ColoredPrintf(GTestColor::kGreen, "[----------] ");
        1: 3523-block  0
        1: 3524:  printf("Global test environment tear-down\n");
        1: 3525:  fflush(stdout);
        1: 3526:}
        -: 3527:
        -: 3528:// Internal helper for printing the list of failed tests.
    #####: 3529:void PrettyUnitTestResultPrinter::PrintFailedTests(const UnitTest& unit_test) {
    #####: 3530:  const int failed_test_count = unit_test.failed_test_count();
    %%%%%: 3530-block  0
    #####: 3531:  ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    #####: 3532:  printf("%s, listed below:\n", FormatTestCount(failed_test_count).c_str());
    %%%%%: 3532-block  0
    $$$$$: 3532-block  1
        -: 3533:
    #####: 3534:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3534-block  0
    %%%%%: 3534-block  1
    #####: 3535:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3535-block  0
    #####: 3536:    if (!test_suite.should_run() || (test_suite.failed_test_count() == 0)) {
    %%%%%: 3536-block  0
    %%%%%: 3536-block  1
    %%%%%: 3536-block  2
    %%%%%: 3536-block  3
    #####: 3537:      continue;
    %%%%%: 3537-block  0
        -: 3538:    }
    #####: 3539:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3539-block  0
    %%%%%: 3539-block  1
    %%%%%: 3539-block  2
    #####: 3540:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3540-block  0
    #####: 3541:      if (!test_info.should_run() || !test_info.result()->Failed()) {
    %%%%%: 3541-block  0
    %%%%%: 3541-block  1
    %%%%%: 3541-block  2
    %%%%%: 3541-block  3
    #####: 3542:        continue;
    %%%%%: 3542-block  0
        -: 3543:      }
    #####: 3544:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3544-block  0
    #####: 3545:      printf("%s.%s", test_suite.name(), test_info.name());
    #####: 3546:      PrintFullTestCommentIfPresent(test_info);
    #####: 3547:      printf("\n");
        -: 3548:    }
        -: 3549:  }
    #####: 3550:  printf("\n%2d FAILED %s\n", failed_test_count,
    %%%%%: 3550-block  0
    %%%%%: 3550-block  1
    %%%%%: 3550-block  2
    %%%%%: 3550-block  3
        -: 3551:         failed_test_count == 1 ? "TEST" : "TESTS");
    #####: 3552:}
        -: 3553:
        -: 3554:// Internal helper for printing the list of test suite failures not covered by
        -: 3555:// PrintFailedTests.
    #####: 3556:void PrettyUnitTestResultPrinter::PrintFailedTestSuites(
        -: 3557:    const UnitTest& unit_test) {
    #####: 3558:  int suite_failure_count = 0;
    #####: 3559:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3559-block  0
    %%%%%: 3559-block  1
    %%%%%: 3559-block  2
    #####: 3560:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3560-block  0
    #####: 3561:    if (!test_suite.should_run()) {
    #####: 3562:      continue;
    %%%%%: 3562-block  0
        -: 3563:    }
    #####: 3564:    if (test_suite.ad_hoc_test_result().Failed()) {
    %%%%%: 3564-block  0
    #####: 3565:      ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3565-block  0
    #####: 3566:      printf("%s: SetUpTestSuite or TearDownTestSuite\n", test_suite.name());
    #####: 3567:      ++suite_failure_count;
        -: 3568:    }
        -: 3569:  }
    #####: 3570:  if (suite_failure_count > 0) {
    %%%%%: 3570-block  0
    #####: 3571:    printf("\n%2d FAILED TEST %s\n", suite_failure_count,
    %%%%%: 3571-block  0
    %%%%%: 3571-block  1
    %%%%%: 3571-block  2
    %%%%%: 3571-block  3
        -: 3572:           suite_failure_count == 1 ? "SUITE" : "SUITES");
        -: 3573:  }
    #####: 3574:}
        -: 3575:
        -: 3576:// Internal helper for printing the list of skipped tests.
    #####: 3577:void PrettyUnitTestResultPrinter::PrintSkippedTests(const UnitTest& unit_test) {
    #####: 3578:  const int skipped_test_count = unit_test.skipped_test_count();
    %%%%%: 3578-block  0
    #####: 3579:  if (skipped_test_count == 0) {
    #####: 3580:    return;
    %%%%%: 3580-block  0
        -: 3581:  }
        -: 3582:
    #####: 3583:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 3583-block  0
    %%%%%: 3583-block  1
    %%%%%: 3583-block  2
    #####: 3584:    const TestSuite& test_suite = *unit_test.GetTestSuite(i);
    %%%%%: 3584-block  0
    #####: 3585:    if (!test_suite.should_run() || (test_suite.skipped_test_count() == 0)) {
    %%%%%: 3585-block  0
    %%%%%: 3585-block  1
    %%%%%: 3585-block  2
    %%%%%: 3585-block  3
    #####: 3586:      continue;
    %%%%%: 3586-block  0
        -: 3587:    }
    #####: 3588:    for (int j = 0; j < test_suite.total_test_count(); ++j) {
    %%%%%: 3588-block  0
    %%%%%: 3588-block  1
    %%%%%: 3588-block  2
    #####: 3589:      const TestInfo& test_info = *test_suite.GetTestInfo(j);
    %%%%%: 3589-block  0
    #####: 3590:      if (!test_info.should_run() || !test_info.result()->Skipped()) {
    %%%%%: 3590-block  0
    %%%%%: 3590-block  1
    %%%%%: 3590-block  2
    %%%%%: 3590-block  3
    #####: 3591:        continue;
    %%%%%: 3591-block  0
        -: 3592:      }
    #####: 3593:      ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3593-block  0
    #####: 3594:      printf("%s.%s", test_suite.name(), test_info.name());
    #####: 3595:      printf("\n");
        -: 3596:    }
        -: 3597:  }
        -: 3598:}
        -: 3599:
        1: 3600:void PrettyUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3601:                                                     int /*iteration*/) {
        1: 3602:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
        1: 3602-block  0
        2: 3603:  printf("%s from %s ran.",
        1: 3603-block  0
        2: 3604:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
        1: 3604-block  0
        1: 3604-block  1
    $$$$$: 3604-block  2
    $$$$$: 3604-block  3
        2: 3605:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
    $$$$$: 3605-block  0
    $$$$$: 3605-block  1
        1: 3606:  if (GTEST_FLAG(print_time)) {
        1: 3607:    printf(" (%s ms total)",
        1: 3607-block  0
        2: 3608:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
        1: 3608-block  0
        1: 3608-block  1
    $$$$$: 3608-block  2
    $$$$$: 3608-block  3
    $$$$$: 3608-block  4
        -: 3609:  }
        1: 3610:  printf("\n");
        1: 3610-block  0
        1: 3611:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
        1: 3612:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
        1: 3612-block  0
    $$$$$: 3612-block  1
    $$$$$: 3612-block  2
        -: 3613:
        1: 3614:  const int skipped_test_count = unit_test.skipped_test_count();
        1: 3615:  if (skipped_test_count > 0) {
    #####: 3616:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3616-block  0
    #####: 3617:    printf("%s, listed below:\n", FormatTestCount(skipped_test_count).c_str());
    %%%%%: 3617-block  0
    $$$$$: 3617-block  1
    #####: 3618:    PrintSkippedTests(unit_test);
        -: 3619:  }
        -: 3620:
        1: 3621:  if (!unit_test.Passed()) {
        1: 3621-block  0
    #####: 3622:    PrintFailedTests(unit_test);
    %%%%%: 3622-block  0
    #####: 3623:    PrintFailedTestSuites(unit_test);
        -: 3624:  }
        -: 3625:
        1: 3626:  int num_disabled = unit_test.reportable_disabled_test_count();
        1: 3626-block  0
       1*: 3627:  if (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) {
    %%%%%: 3627-block  0
    #####: 3628:    if (unit_test.Passed()) {
    %%%%%: 3628-block  0
    #####: 3629:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3629-block  0
        -: 3630:    }
    #####: 3631:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3631-block  0
    %%%%%: 3631-block  1
    %%%%%: 3631-block  2
    %%%%%: 3631-block  3
        -: 3632:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3633:  }
        -: 3634:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
        1: 3635:  fflush(stdout);
        1: 3635-block  0
        1: 3636:}
        -: 3637:
        -: 3638:// End PrettyUnitTestResultPrinter
        -: 3639:
        -: 3640:// This class implements the TestEventListener interface.
        -: 3641://
        -: 3642:// Class BriefUnitTestResultPrinter is copyable.
        -: 3643:class BriefUnitTestResultPrinter : public TestEventListener {
        -: 3644: public:
    #####: 3645:  BriefUnitTestResultPrinter() {}
    %%%%%: 3645-block  0
    #####: 3646:  static void PrintTestName(const char* test_suite, const char* test) {
    #####: 3647:    printf("%s.%s", test_suite, test);
    %%%%%: 3647-block  0
    #####: 3648:  }
        -: 3649:
        -: 3650:  // The following methods override what's in the TestEventListener class.
    #####: 3651:  void OnTestProgramStart(const UnitTest& /*unit_test*/) override {}
    #####: 3652:  void OnTestIterationStart(const UnitTest& /*unit_test*/,
    #####: 3653:                            int /*iteration*/) override {}
    #####: 3654:  void OnEnvironmentsSetUpStart(const UnitTest& /*unit_test*/) override {}
    #####: 3655:  void OnEnvironmentsSetUpEnd(const UnitTest& /*unit_test*/) override {}
        -: 3656:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3657:  void OnTestCaseStart(const TestCase& /*test_case*/) override {}
        -: 3658:#else
        -: 3659:  void OnTestSuiteStart(const TestSuite& /*test_suite*/) override {}
        -: 3660:#endif  // OnTestCaseStart
        -: 3661:
    #####: 3662:  void OnTestStart(const TestInfo& /*test_info*/) override {}
        -: 3663:
        -: 3664:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3665:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3666:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 3667:  void OnTestCaseEnd(const TestCase& /*test_case*/) override {}
        -: 3668:#else
        -: 3669:  void OnTestSuiteEnd(const TestSuite& /*test_suite*/) override {}
        -: 3670:#endif  // GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3671:
    #####: 3672:  void OnEnvironmentsTearDownStart(const UnitTest& /*unit_test*/) override {}
    #####: 3673:  void OnEnvironmentsTearDownEnd(const UnitTest& /*unit_test*/) override {}
        -: 3674:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
    #####: 3675:  void OnTestProgramEnd(const UnitTest& /*unit_test*/) override {}
        -: 3676:};
        -: 3677:
        -: 3678:// Called after an assertion failure.
    #####: 3679:void BriefUnitTestResultPrinter::OnTestPartResult(
        -: 3680:    const TestPartResult& result) {
    #####: 3681:  switch (result.type()) {
    %%%%%: 3681-block  0
        -: 3682:    // If the test part succeeded, we don't need to do anything.
    #####: 3683:    case TestPartResult::kSuccess:
    #####: 3684:      return;
    %%%%%: 3684-block  0
    #####: 3685:    default:
        -: 3686:      // Print failure message from the assertion
        -: 3687:      // (e.g. expected this and got that).
    #####: 3688:      PrintTestPartResult(result);
    %%%%%: 3688-block  0
    #####: 3689:      fflush(stdout);
        -: 3690:  }
        -: 3691:}
        -: 3692:
    #####: 3693:void BriefUnitTestResultPrinter::OnTestEnd(const TestInfo& test_info) {
    #####: 3694:  if (test_info.result()->Failed()) {
    %%%%%: 3694-block  0
    #####: 3695:    ColoredPrintf(GTestColor::kRed, "[  FAILED  ] ");
    %%%%%: 3695-block  0
    #####: 3696:    PrintTestName(test_info.test_suite_name(), test_info.name());
    #####: 3697:    PrintFullTestCommentIfPresent(test_info);
        -: 3698:
    #####: 3699:    if (GTEST_FLAG(print_time)) {
    #####: 3700:      printf(" (%s ms)\n",
    %%%%%: 3700-block  0
    #####: 3701:             internal::StreamableToString(test_info.result()->elapsed_time())
    %%%%%: 3701-block  0
    %%%%%: 3701-block  1
    $$$$$: 3701-block  2
    $$$$$: 3701-block  3
        -: 3702:                 .c_str());
        -: 3703:    } else {
    #####: 3704:      printf("\n");
    %%%%%: 3704-block  0
        -: 3705:    }
    #####: 3706:    fflush(stdout);
    %%%%%: 3706-block  0
        -: 3707:  }
    #####: 3708:}
    %%%%%: 3708-block  0
        -: 3709:
    #####: 3710:void BriefUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3711:                                                    int /*iteration*/) {
    #####: 3712:  ColoredPrintf(GTestColor::kGreen, "[==========] ");
    %%%%%: 3712-block  0
    #####: 3713:  printf("%s from %s ran.",
    %%%%%: 3713-block  0
    #####: 3714:         FormatTestCount(unit_test.test_to_run_count()).c_str(),
    %%%%%: 3714-block  0
    %%%%%: 3714-block  1
    $$$$$: 3714-block  2
    $$$$$: 3714-block  3
    #####: 3715:         FormatTestSuiteCount(unit_test.test_suite_to_run_count()).c_str());
    $$$$$: 3715-block  0
    $$$$$: 3715-block  1
    #####: 3716:  if (GTEST_FLAG(print_time)) {
    #####: 3717:    printf(" (%s ms total)",
    %%%%%: 3717-block  0
    #####: 3718:           internal::StreamableToString(unit_test.elapsed_time()).c_str());
    %%%%%: 3718-block  0
    %%%%%: 3718-block  1
    $$$$$: 3718-block  2
    $$$$$: 3718-block  3
    $$$$$: 3718-block  4
        -: 3719:  }
    #####: 3720:  printf("\n");
    %%%%%: 3720-block  0
    #####: 3721:  ColoredPrintf(GTestColor::kGreen, "[  PASSED  ] ");
    #####: 3722:  printf("%s.\n", FormatTestCount(unit_test.successful_test_count()).c_str());
    %%%%%: 3722-block  0
    $$$$$: 3722-block  1
    $$$$$: 3722-block  2
        -: 3723:
    #####: 3724:  const int skipped_test_count = unit_test.skipped_test_count();
    #####: 3725:  if (skipped_test_count > 0) {
    #####: 3726:    ColoredPrintf(GTestColor::kGreen, "[  SKIPPED ] ");
    %%%%%: 3726-block  0
    #####: 3727:    printf("%s.\n", FormatTestCount(skipped_test_count).c_str());
    %%%%%: 3727-block  0
    $$$$$: 3727-block  1
        -: 3728:  }
        -: 3729:
    #####: 3730:  int num_disabled = unit_test.reportable_disabled_test_count();
    %%%%%: 3730-block  0
    #####: 3731:  if (num_disabled && !GTEST_FLAG(also_run_disabled_tests)) {
    %%%%%: 3731-block  0
    #####: 3732:    if (unit_test.Passed()) {
    %%%%%: 3732-block  0
    #####: 3733:      printf("\n");  // Add a spacer if no FAILURE banner is displayed.
    %%%%%: 3733-block  0
        -: 3734:    }
    #####: 3735:    ColoredPrintf(GTestColor::kYellow, "  YOU HAVE %d DISABLED %s\n\n",
    %%%%%: 3735-block  0
    %%%%%: 3735-block  1
    %%%%%: 3735-block  2
    %%%%%: 3735-block  3
        -: 3736:                  num_disabled, num_disabled == 1 ? "TEST" : "TESTS");
        -: 3737:  }
        -: 3738:  // Ensure that Google Test output is printed before, e.g., heapchecker output.
    #####: 3739:  fflush(stdout);
    %%%%%: 3739-block  0
    #####: 3740:}
        -: 3741:
        -: 3742:// End BriefUnitTestResultPrinter
        -: 3743:
        -: 3744:// class TestEventRepeater
        -: 3745://
        -: 3746:// This class forwards events to other event listeners.
        -: 3747:class TestEventRepeater : public TestEventListener {
        -: 3748: public:
        1: 3749:  TestEventRepeater() : forwarding_enabled_(true) {}
        1: 3749-block  0
        -: 3750:  ~TestEventRepeater() override;
        -: 3751:  void Append(TestEventListener *listener);
        -: 3752:  TestEventListener* Release(TestEventListener* listener);
        -: 3753:
        -: 3754:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3755:  // in death test child processes.
    #####: 3756:  bool forwarding_enabled() const { return forwarding_enabled_; }
    %%%%%: 3756-block  0
    #####: 3757:  void set_forwarding_enabled(bool enable) { forwarding_enabled_ = enable; }
        -: 3758:
        -: 3759:  void OnTestProgramStart(const UnitTest& unit_test) override;
        -: 3760:  void OnTestIterationStart(const UnitTest& unit_test, int iteration) override;
        -: 3761:  void OnEnvironmentsSetUpStart(const UnitTest& unit_test) override;
        -: 3762:  void OnEnvironmentsSetUpEnd(const UnitTest& unit_test) override;
        -: 3763://  Legacy API is deprecated but still available
        -: 3764:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3765:  void OnTestCaseStart(const TestSuite& parameter) override;
        -: 3766:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3767:  void OnTestSuiteStart(const TestSuite& parameter) override;
        -: 3768:  void OnTestStart(const TestInfo& test_info) override;
        -: 3769:  void OnTestPartResult(const TestPartResult& result) override;
        -: 3770:  void OnTestEnd(const TestInfo& test_info) override;
        -: 3771://  Legacy API is deprecated but still available
        -: 3772:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3773:  void OnTestCaseEnd(const TestCase& parameter) override;
        -: 3774:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 3775:  void OnTestSuiteEnd(const TestSuite& parameter) override;
        -: 3776:  void OnEnvironmentsTearDownStart(const UnitTest& unit_test) override;
        -: 3777:  void OnEnvironmentsTearDownEnd(const UnitTest& unit_test) override;
        -: 3778:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3779:  void OnTestProgramEnd(const UnitTest& unit_test) override;
        -: 3780:
        -: 3781: private:
        -: 3782:  // Controls whether events will be forwarded to listeners_. Set to false
        -: 3783:  // in death test child processes.
        -: 3784:  bool forwarding_enabled_;
        -: 3785:  // The list of listeners that receive events.
        -: 3786:  std::vector<TestEventListener*> listeners_;
        -: 3787:
        -: 3788:  GTEST_DISALLOW_COPY_AND_ASSIGN_(TestEventRepeater);
        -: 3789:};
        -: 3790:
    #####: 3791:TestEventRepeater::~TestEventRepeater() {
    #####: 3792:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3793:}
------------------
_ZN7testing8internal17TestEventRepeaterD0Ev:
    #####: 3791:TestEventRepeater::~TestEventRepeater() {
        -: 3792:  ForEach(listeners_, Delete<TestEventListener>);
    #####: 3793:}
    %%%%%: 3793-block  0
------------------
_ZN7testing8internal17TestEventRepeaterD2Ev:
    #####: 3791:TestEventRepeater::~TestEventRepeater() {
    #####: 3792:  ForEach(listeners_, Delete<TestEventListener>);
    %%%%%: 3792-block  0
    #####: 3793:}
------------------
        -: 3794:
        1: 3795:void TestEventRepeater::Append(TestEventListener *listener) {
        1: 3796:  listeners_.push_back(listener);
        1: 3796-block  0
        1: 3797:}
        -: 3798:
        1: 3799:TestEventListener* TestEventRepeater::Release(TestEventListener *listener) {
       1*: 3800:  for (size_t i = 0; i < listeners_.size(); ++i) {
        1: 3800-block  0
        1: 3800-block  1
    %%%%%: 3800-block  2
    #####: 3801:    if (listeners_[i] == listener) {
    %%%%%: 3801-block  0
    #####: 3802:      listeners_.erase(listeners_.begin() + static_cast<int>(i));
    %%%%%: 3802-block  0
    $$$$$: 3802-block  1
    $$$$$: 3802-block  2
    #####: 3803:      return listener;
    %%%%%: 3803-block  0
        -: 3804:    }
        -: 3805:  }
        -: 3806:
        1: 3807:  return nullptr;
        1: 3807-block  0
        -: 3808:}
        -: 3809:
        -: 3810:// Since most methods are very similar, use macros to reduce boilerplate.
        -: 3811:// This defines a member that forwards the call to all listeners.
        -: 3812:#define GTEST_REPEATER_METHOD_(Name, Type) \
        -: 3813:void TestEventRepeater::Name(const Type& parameter) { \
        -: 3814:  if (forwarding_enabled_) { \
        -: 3815:    for (size_t i = 0; i < listeners_.size(); i++) { \
        -: 3816:      listeners_[i]->Name(parameter); \
        -: 3817:    } \
        -: 3818:  } \
        -: 3819:}
        -: 3820:// This defines a member that forwards the call to all listeners in reverse
        -: 3821:// order.
        -: 3822:#define GTEST_REVERSE_REPEATER_METHOD_(Name, Type)      \
        -: 3823:  void TestEventRepeater::Name(const Type& parameter) { \
        -: 3824:    if (forwarding_enabled_) {                          \
        -: 3825:      for (size_t i = listeners_.size(); i != 0; i--) { \
        -: 3826:        listeners_[i - 1]->Name(parameter);             \
        -: 3827:      }                                                 \
        -: 3828:    }                                                   \
        -: 3829:  }
        -: 3830:
        2: 3831:GTEST_REPEATER_METHOD_(OnTestProgramStart, UnitTest)
        1: 3831-block  0
        1: 3831-block  1
        2: 3831-block  2
        1: 3831-block  3
        2: 3832:GTEST_REPEATER_METHOD_(OnEnvironmentsSetUpStart, UnitTest)
        1: 3832-block  0
        1: 3832-block  1
        2: 3832-block  2
        1: 3832-block  3
        -: 3833://  Legacy API is deprecated but still available
        -: 3834:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        2: 3835:GTEST_REPEATER_METHOD_(OnTestCaseStart, TestSuite)
        1: 3835-block  0
        1: 3835-block  1
        2: 3835-block  2
        1: 3835-block  3
        -: 3836:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        2: 3837:GTEST_REPEATER_METHOD_(OnTestSuiteStart, TestSuite)
        1: 3837-block  0
        1: 3837-block  1
        2: 3837-block  2
        1: 3837-block  3
       24: 3838:GTEST_REPEATER_METHOD_(OnTestStart, TestInfo)
       12: 3838-block  0
       12: 3838-block  1
       24: 3838-block  2
       12: 3838-block  3
    #####: 3839:GTEST_REPEATER_METHOD_(OnTestPartResult, TestPartResult)
    %%%%%: 3839-block  0
    %%%%%: 3839-block  1
    %%%%%: 3839-block  2
    %%%%%: 3839-block  3
        2: 3840:GTEST_REPEATER_METHOD_(OnEnvironmentsTearDownStart, UnitTest)
        1: 3840-block  0
        1: 3840-block  1
        2: 3840-block  2
        1: 3840-block  3
        2: 3841:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsSetUpEnd, UnitTest)
        1: 3841-block  0
        1: 3841-block  1
        2: 3841-block  2
        1: 3841-block  3
        2: 3842:GTEST_REVERSE_REPEATER_METHOD_(OnEnvironmentsTearDownEnd, UnitTest)
        1: 3842-block  0
        1: 3842-block  1
        2: 3842-block  2
        1: 3842-block  3
       24: 3843:GTEST_REVERSE_REPEATER_METHOD_(OnTestEnd, TestInfo)
       12: 3843-block  0
       12: 3843-block  1
       24: 3843-block  2
       12: 3843-block  3
        -: 3844://  Legacy API is deprecated but still available
        -: 3845:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        2: 3846:GTEST_REVERSE_REPEATER_METHOD_(OnTestCaseEnd, TestSuite)
        1: 3846-block  0
        1: 3846-block  1
        2: 3846-block  2
        1: 3846-block  3
        -: 3847:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        2: 3848:GTEST_REVERSE_REPEATER_METHOD_(OnTestSuiteEnd, TestSuite)
        1: 3848-block  0
        1: 3848-block  1
        2: 3848-block  2
        1: 3848-block  3
        2: 3849:GTEST_REVERSE_REPEATER_METHOD_(OnTestProgramEnd, UnitTest)
        1: 3849-block  0
        1: 3849-block  1
        2: 3849-block  2
        1: 3849-block  3
        -: 3850:
        -: 3851:#undef GTEST_REPEATER_METHOD_
        -: 3852:#undef GTEST_REVERSE_REPEATER_METHOD_
        -: 3853:
        1: 3854:void TestEventRepeater::OnTestIterationStart(const UnitTest& unit_test,
        -: 3855:                                             int iteration) {
        1: 3856:  if (forwarding_enabled_) {
        1: 3856-block  0
        2: 3857:    for (size_t i = 0; i < listeners_.size(); i++) {
        1: 3857-block  0
        2: 3857-block  1
        1: 3858:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
        1: 3858-block  0
        -: 3859:    }
        -: 3860:  }
        1: 3861:}
        -: 3862:
        1: 3863:void TestEventRepeater::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3864:                                           int iteration) {
        1: 3865:  if (forwarding_enabled_) {
        1: 3865-block  0
        2: 3866:    for (size_t i = listeners_.size(); i > 0; i--) {
        1: 3866-block  0
        2: 3866-block  1
        1: 3867:      listeners_[i - 1]->OnTestIterationEnd(unit_test, iteration);
        1: 3867-block  0
        -: 3868:    }
        -: 3869:  }
        1: 3870:}
        -: 3871:
        -: 3872:// End TestEventRepeater
        -: 3873:
        -: 3874:// This class generates an XML output file.
        -: 3875:class XmlUnitTestResultPrinter : public EmptyTestEventListener {
        -: 3876: public:
        -: 3877:  explicit XmlUnitTestResultPrinter(const char* output_file);
        -: 3878:
        -: 3879:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 3880:  void ListTestsMatchingFilter(const std::vector<TestSuite*>& test_suites);
        -: 3881:
        -: 3882:  // Prints an XML summary of all unit tests.
        -: 3883:  static void PrintXmlTestsList(std::ostream* stream,
        -: 3884:                                const std::vector<TestSuite*>& test_suites);
        -: 3885:
        -: 3886: private:
        -: 3887:  // Is c a whitespace character that is normalized to a space character
        -: 3888:  // when it appears in an XML attribute value?
    #####: 3889:  static bool IsNormalizableWhitespace(char c) {
    #####: 3890:    return c == 0x9 || c == 0xA || c == 0xD;
    %%%%%: 3890-block  0
    %%%%%: 3890-block  1
    %%%%%: 3890-block  2
    %%%%%: 3890-block  3
    %%%%%: 3890-block  4
    %%%%%: 3890-block  5
        -: 3891:  }
        -: 3892:
        -: 3893:  // May c appear in a well-formed XML document?
    #####: 3894:  static bool IsValidXmlCharacter(char c) {
    #####: 3895:    return IsNormalizableWhitespace(c) || c >= 0x20;
    %%%%%: 3895-block  0
    %%%%%: 3895-block  1
    %%%%%: 3895-block  2
    %%%%%: 3895-block  3
    %%%%%: 3895-block  4
        -: 3896:  }
        -: 3897:
        -: 3898:  // Returns an XML-escaped copy of the input string str.  If
        -: 3899:  // is_attribute is true, the text is meant to appear as an attribute
        -: 3900:  // value, and normalizable whitespace is preserved by replacing it
        -: 3901:  // with character references.
        -: 3902:  static std::string EscapeXml(const std::string& str, bool is_attribute);
        -: 3903:
        -: 3904:  // Returns the given string with all characters invalid in XML removed.
        -: 3905:  static std::string RemoveInvalidXmlCharacters(const std::string& str);
        -: 3906:
        -: 3907:  // Convenience wrapper around EscapeXml when str is an attribute value.
    #####: 3908:  static std::string EscapeXmlAttribute(const std::string& str) {
    #####: 3909:    return EscapeXml(str, true);
    %%%%%: 3909-block  0
        -: 3910:  }
        -: 3911:
        -: 3912:  // Convenience wrapper around EscapeXml when str is not an attribute value.
        -: 3913:  static std::string EscapeXmlText(const char* str) {
        -: 3914:    return EscapeXml(str, false);
        -: 3915:  }
        -: 3916:
        -: 3917:  // Verifies that the given attribute belongs to the given element and
        -: 3918:  // streams the attribute as XML.
        -: 3919:  static void OutputXmlAttribute(std::ostream* stream,
        -: 3920:                                 const std::string& element_name,
        -: 3921:                                 const std::string& name,
        -: 3922:                                 const std::string& value);
        -: 3923:
        -: 3924:  // Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
        -: 3925:  static void OutputXmlCDataSection(::std::ostream* stream, const char* data);
        -: 3926:
        -: 3927:  // Streams an XML representation of a TestInfo object.
        -: 3928:  static void OutputXmlTestInfo(::std::ostream* stream,
        -: 3929:                                const char* test_suite_name,
        -: 3930:                                const TestInfo& test_info);
        -: 3931:
        -: 3932:  // Prints an XML representation of a TestSuite object
        -: 3933:  static void PrintXmlTestSuite(::std::ostream* stream,
        -: 3934:                                const TestSuite& test_suite);
        -: 3935:
        -: 3936:  // Prints an XML summary of unit_test to output stream out.
        -: 3937:  static void PrintXmlUnitTest(::std::ostream* stream,
        -: 3938:                               const UnitTest& unit_test);
        -: 3939:
        -: 3940:  // Produces a string representing the test properties in a result as space
        -: 3941:  // delimited XML attributes based on the property key="value" pairs.
        -: 3942:  // When the std::string is not empty, it includes a space at the beginning,
        -: 3943:  // to delimit this attribute from prior attributes.
        -: 3944:  static std::string TestPropertiesAsXmlAttributes(const TestResult& result);
        -: 3945:
        -: 3946:  // Streams an XML representation of the test properties of a TestResult
        -: 3947:  // object.
        -: 3948:  static void OutputXmlTestProperties(std::ostream* stream,
        -: 3949:                                      const TestResult& result);
        -: 3950:
        -: 3951:  // The output file.
        -: 3952:  const std::string output_file_;
        -: 3953:
        -: 3954:  GTEST_DISALLOW_COPY_AND_ASSIGN_(XmlUnitTestResultPrinter);
        -: 3955:};
        -: 3956:
        -: 3957:// Creates a new XmlUnitTestResultPrinter.
    #####: 3958:XmlUnitTestResultPrinter::XmlUnitTestResultPrinter(const char* output_file)
    #####: 3959:    : output_file_(output_file) {
    %%%%%: 3959-block  0
    $$$$$: 3959-block  1
    $$$$$: 3959-block  2
    #####: 3960:  if (output_file_.empty()) {
    #####: 3961:    GTEST_LOG_(FATAL) << "XML output file may not be null";
    %%%%%: 3961-block  0
    %%%%%: 3961-block  1
    %%%%%: 3961-block  2
    $$$$$: 3961-block  3
    $$$$$: 3961-block  4
        -: 3962:  }
    #####: 3963:}
    %%%%%: 3963-block  0
        -: 3964:
        -: 3965:// Called after the unit test ends.
    #####: 3966:void XmlUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 3967:                                                  int /*iteration*/) {
    #####: 3968:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3968-block  0
    #####: 3969:  std::stringstream stream;
    %%%%%: 3969-block  0
    %%%%%: 3969-block  1
    $$$$$: 3969-block  2
    #####: 3970:  PrintXmlUnitTest(&stream, unit_test);
    %%%%%: 3970-block  0
    #####: 3971:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3971-block  0
    %%%%%: 3971-block  1
    %%%%%: 3971-block  2
    $$$$$: 3971-block  3
    $$$$$: 3971-block  4
    #####: 3972:  fclose(xmlout);
    #####: 3973:}
        -: 3974:
    #####: 3975:void XmlUnitTestResultPrinter::ListTestsMatchingFilter(
        -: 3976:    const std::vector<TestSuite*>& test_suites) {
    #####: 3977:  FILE* xmlout = OpenFileForWriting(output_file_);
    %%%%%: 3977-block  0
    #####: 3978:  std::stringstream stream;
    %%%%%: 3978-block  0
    %%%%%: 3978-block  1
    $$$$$: 3978-block  2
    #####: 3979:  PrintXmlTestsList(&stream, test_suites);
    %%%%%: 3979-block  0
    #####: 3980:  fprintf(xmlout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 3980-block  0
    %%%%%: 3980-block  1
    %%%%%: 3980-block  2
    $$$$$: 3980-block  3
    $$$$$: 3980-block  4
    #####: 3981:  fclose(xmlout);
    #####: 3982:}
        -: 3983:
        -: 3984:// Returns an XML-escaped copy of the input string str.  If is_attribute
        -: 3985:// is true, the text is meant to appear as an attribute value, and
        -: 3986:// normalizable whitespace is preserved by replacing it with character
        -: 3987:// references.
        -: 3988://
        -: 3989:// Invalid XML characters in str, if any, are stripped from the output.
        -: 3990:// It is expected that most, if not all, of the text processed by this
        -: 3991:// module will consist of ordinary English text.
        -: 3992:// If this module is ever modified to produce version 1.1 XML output,
        -: 3993:// most invalid characters can be retained using character references.
    #####: 3994:std::string XmlUnitTestResultPrinter::EscapeXml(
        -: 3995:    const std::string& str, bool is_attribute) {
    #####: 3996:  Message m;
    %%%%%: 3996-block  0
    %%%%%: 3996-block  1
    $$$$$: 3996-block  2
        -: 3997:
    #####: 3998:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 3998-block  0
    %%%%%: 3998-block  1
    %%%%%: 3998-block  2
    #####: 3999:    const char ch = str[i];
    %%%%%: 3999-block  0
    #####: 4000:    switch (ch) {
    #####: 4001:      case '<':
    #####: 4002:        m << "&lt;";
    %%%%%: 4002-block  0
    #####: 4003:        break;
    %%%%%: 4003-block  0
    #####: 4004:      case '>':
    #####: 4005:        m << "&gt;";
    %%%%%: 4005-block  0
    #####: 4006:        break;
    %%%%%: 4006-block  0
    #####: 4007:      case '&':
    #####: 4008:        m << "&amp;";
    %%%%%: 4008-block  0
    #####: 4009:        break;
    %%%%%: 4009-block  0
    #####: 4010:      case '\'':
    #####: 4011:        if (is_attribute)
    %%%%%: 4011-block  0
    #####: 4012:          m << "&apos;";
    %%%%%: 4012-block  0
        -: 4013:        else
    #####: 4014:          m << '\'';
    %%%%%: 4014-block  0
    %%%%%: 4014-block  1
    $$$$$: 4014-block  2
    #####: 4015:        break;
    %%%%%: 4015-block  0
    #####: 4016:      case '"':
    #####: 4017:        if (is_attribute)
    %%%%%: 4017-block  0
    #####: 4018:          m << "&quot;";
    %%%%%: 4018-block  0
        -: 4019:        else
    #####: 4020:          m << '"';
    %%%%%: 4020-block  0
    %%%%%: 4020-block  1
    $$$$$: 4020-block  2
    #####: 4021:        break;
    %%%%%: 4021-block  0
    #####: 4022:      default:
    #####: 4023:        if (IsValidXmlCharacter(ch)) {
    %%%%%: 4023-block  0
    #####: 4024:          if (is_attribute && IsNormalizableWhitespace(ch))
    %%%%%: 4024-block  0
    %%%%%: 4024-block  1
    %%%%%: 4024-block  2
    %%%%%: 4024-block  3
    %%%%%: 4024-block  4
    #####: 4025:            m << "&#x" << String::FormatByte(static_cast<unsigned char>(ch))
    %%%%%: 4025-block  0
    %%%%%: 4025-block  1
    %%%%%: 4025-block  2
    %%%%%: 4025-block  3
    $$$$$: 4025-block  4
    $$$$$: 4025-block  5
    #####: 4026:              << ";";
    %%%%%: 4026-block  0
        -: 4027:          else
    #####: 4028:            m << ch;
    %%%%%: 4028-block  0
        -: 4029:        }
    #####: 4030:        break;
    %%%%%: 4030-block  0
        -: 4031:    }
        -: 4032:  }
        -: 4033:
    #####: 4034:  return m.GetString();
    %%%%%: 4034-block  0
    %%%%%: 4034-block  1
        -: 4035:}
        -: 4036:
        -: 4037:// Returns the given string with all characters invalid in XML removed.
        -: 4038:// Currently invalid characters are dropped from the string. An
        -: 4039:// alternative is to replace them with certain characters such as . or ?.
    #####: 4040:std::string XmlUnitTestResultPrinter::RemoveInvalidXmlCharacters(
        -: 4041:    const std::string& str) {
    #####: 4042:  std::string output;
    %%%%%: 4042-block  0
    #####: 4043:  output.reserve(str.size());
    #####: 4044:  for (std::string::const_iterator it = str.begin(); it != str.end(); ++it)
    %%%%%: 4044-block  0
    %%%%%: 4044-block  1
    %%%%%: 4044-block  2
    #####: 4045:    if (IsValidXmlCharacter(*it))
    %%%%%: 4045-block  0
    #####: 4046:      output.push_back(*it);
    %%%%%: 4046-block  0
        -: 4047:
    #####: 4048:  return output;
    %%%%%: 4048-block  0
    %%%%%: 4048-block  1
        -: 4049:}
        -: 4050:
        -: 4051:// The following routines generate an XML representation of a UnitTest
        -: 4052:// object.
        -: 4053:// GOOGLETEST_CM0009 DO NOT DELETE
        -: 4054://
        -: 4055:// This is how Google Test concepts map to the DTD:
        -: 4056://
        -: 4057:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
        -: 4058://   <testsuite name="testcase-name">  <-- corresponds to a TestSuite object
        -: 4059://     <testcase name="test-name">     <-- corresponds to a TestInfo object
        -: 4060://       <failure message="...">...</failure>
        -: 4061://       <failure message="...">...</failure>
        -: 4062://       <failure message="...">...</failure>
        -: 4063://                                     <-- individual assertion failures
        -: 4064://     </testcase>
        -: 4065://   </testsuite>
        -: 4066:// </testsuites>
        -: 4067:
        -: 4068:// Formats the given time in milliseconds as seconds.
    #####: 4069:std::string FormatTimeInMillisAsSeconds(TimeInMillis ms) {
    #####: 4070:  ::std::stringstream ss;
    %%%%%: 4070-block  0
    %%%%%: 4070-block  1
    $$$$$: 4070-block  2
    #####: 4071:  ss << (static_cast<double>(ms) * 1e-3);
    %%%%%: 4071-block  0
    #####: 4072:  return ss.str();
    %%%%%: 4072-block  0
    %%%%%: 4072-block  1
        -: 4073:}
        -: 4074:
    #####: 4075:static bool PortableLocaltime(time_t seconds, struct tm* out) {
        -: 4076:#if defined(_MSC_VER)
        -: 4077:  return localtime_s(out, &seconds) == 0;
        -: 4078:#elif defined(__MINGW32__) || defined(__MINGW64__)
        -: 4079:  // MINGW <time.h> provides neither localtime_r nor localtime_s, but uses
        -: 4080:  // Windows' localtime(), which has a thread-local tm buffer.
        -: 4081:  struct tm* tm_ptr = localtime(&seconds);  // NOLINT
        -: 4082:  if (tm_ptr == nullptr) return false;
        -: 4083:  *out = *tm_ptr;
        -: 4084:  return true;
        -: 4085:#else
    #####: 4086:  return localtime_r(&seconds, out) != nullptr;
    %%%%%: 4086-block  0
        -: 4087:#endif
        -: 4088:}
        -: 4089:
        -: 4090:// Converts the given epoch time in milliseconds to a date string in the ISO
        -: 4091:// 8601 format, without the timezone information.
    #####: 4092:std::string FormatEpochTimeInMillisAsIso8601(TimeInMillis ms) {
        -: 4093:  struct tm time_struct;
    #####: 4094:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4094-block  0
    %%%%%: 4094-block  1
    #####: 4095:    return "";
    %%%%%: 4095-block  0
        -: 4096:  // YYYY-MM-DDThh:mm:ss.sss
    #####: 4097:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4097-block  0
    %%%%%: 4097-block  1
    $$$$$: 4097-block  2
    $$$$$: 4097-block  3
    $$$$$: 4097-block  4
    $$$$$: 4097-block  5
    $$$$$: 4097-block  6
    $$$$$: 4097-block  7
    $$$$$: 4097-block  8
    #####: 4098:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4098-block  0
    %%%%%: 4098-block  1
    %%%%%: 4098-block  2
    $$$$$: 4098-block  3
    $$$$$: 4098-block  4
    $$$$$: 4098-block  5
    $$$$$: 4098-block  6
    $$$$$: 4098-block  7
    $$$$$: 4098-block  8
    #####: 4099:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4099-block  0
    %%%%%: 4099-block  1
    %%%%%: 4099-block  2
    $$$$$: 4099-block  3
    $$$$$: 4099-block  4
    $$$$$: 4099-block  5
    $$$$$: 4099-block  6
    $$$$$: 4099-block  7
    $$$$$: 4099-block  8
    #####: 4100:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4100-block  0
    %%%%%: 4100-block  1
    %%%%%: 4100-block  2
    $$$$$: 4100-block  3
    $$$$$: 4100-block  4
    $$$$$: 4100-block  5
    $$$$$: 4100-block  6
    $$$$$: 4100-block  7
    $$$$$: 4100-block  8
    #####: 4101:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4101-block  0
    %%%%%: 4101-block  1
    %%%%%: 4101-block  2
    $$$$$: 4101-block  3
    $$$$$: 4101-block  4
    $$$$$: 4101-block  5
    $$$$$: 4101-block  6
    $$$$$: 4101-block  7
    $$$$$: 4101-block  8
    #####: 4102:      String::FormatIntWidth2(time_struct.tm_sec) + "." +
    %%%%%: 4102-block  0
    %%%%%: 4102-block  1
    %%%%%: 4102-block  2
    %%%%%: 4102-block  3
    $$$$$: 4102-block  4
    $$$$$: 4102-block  5
    $$$$$: 4102-block  6
    $$$$$: 4102-block  7
    #####: 4103:      String::FormatIntWidthN(static_cast<int>(ms % 1000), 3);
    %%%%%: 4103-block  0
    %%%%%: 4103-block  1
    $$$$$: 4103-block  2
    $$$$$: 4103-block  3
        -: 4104:}
        -: 4105:
        -: 4106:// Streams an XML CDATA section, escaping invalid CDATA sequences as needed.
    #####: 4107:void XmlUnitTestResultPrinter::OutputXmlCDataSection(::std::ostream* stream,
        -: 4108:                                                     const char* data) {
    #####: 4109:  const char* segment = data;
    #####: 4110:  *stream << "<![CDATA[";
    %%%%%: 4110-block  0
        -: 4111:  for (;;) {
    #####: 4112:    const char* const next_segment = strstr(segment, "]]>");
    #####: 4113:    if (next_segment != nullptr) {
    %%%%%: 4113-block  0
        -: 4114:      stream->write(
    #####: 4115:          segment, static_cast<std::streamsize>(next_segment - segment));
    %%%%%: 4115-block  0
    #####: 4116:      *stream << "]]>]]&gt;<![CDATA[";
    #####: 4117:      segment = next_segment + strlen("]]>");
        -: 4118:    } else {
    #####: 4119:      *stream << segment;
    %%%%%: 4119-block  0
    #####: 4120:      break;
        -: 4121:    }
    #####: 4122:  }
    %%%%%: 4122-block  0
    #####: 4123:  *stream << "]]>";
    %%%%%: 4123-block  0
    #####: 4124:}
        -: 4125:
    #####: 4126:void XmlUnitTestResultPrinter::OutputXmlAttribute(
        -: 4127:    std::ostream* stream,
        -: 4128:    const std::string& element_name,
        -: 4129:    const std::string& name,
        -: 4130:    const std::string& value) {
        -: 4131:  const std::vector<std::string>& allowed_names =
    #####: 4132:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4132-block  0
    $$$$$: 4132-block  1
        -: 4133:
    #####: 4134:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4134-block  0
    %%%%%: 4134-block  1
    %%%%%: 4134-block  2
    %%%%%: 4134-block  3
    %%%%%: 4134-block  4
    $$$$$: 4134-block  5
    $$$$$: 4134-block  6
    $$$$$: 4134-block  7
        -: 4135:                   allowed_names.end())
        -: 4136:      << "Attribute " << name << " is not allowed for element <" << element_name
    #####: 4137:      << ">.";
    %%%%%: 4137-block  0
    %%%%%: 4137-block  1
    %%%%%: 4137-block  2
    %%%%%: 4137-block  3
    %%%%%: 4137-block  4
        -: 4138:
    #####: 4139:  *stream << " " << name << "=\"" << EscapeXmlAttribute(value) << "\"";
    %%%%%: 4139-block  0
    %%%%%: 4139-block  1
    %%%%%: 4139-block  2
    %%%%%: 4139-block  3
    %%%%%: 4139-block  4
    %%%%%: 4139-block  5
    %%%%%: 4139-block  6
    $$$$$: 4139-block  7
    $$$$$: 4139-block  8
    #####: 4140:}
        -: 4141:
        -: 4142:// Prints an XML representation of a TestInfo object.
    #####: 4143:void XmlUnitTestResultPrinter::OutputXmlTestInfo(::std::ostream* stream,
        -: 4144:                                                 const char* test_suite_name,
        -: 4145:                                                 const TestInfo& test_info) {
    #####: 4146:  const TestResult& result = *test_info.result();
    %%%%%: 4146-block  0
    #####: 4147:  const std::string kTestsuite = "testcase";
    $$$$$: 4147-block  0
        -: 4148:
    #####: 4149:  if (test_info.is_in_another_shard()) {
    #####: 4150:    return;
    %%%%%: 4150-block  0
        -: 4151:  }
        -: 4152:
    #####: 4153:  *stream << "    <testcase";
    %%%%%: 4153-block  0
    #####: 4154:  OutputXmlAttribute(stream, kTestsuite, "name", test_info.name());
    %%%%%: 4154-block  0
    %%%%%: 4154-block  1
    %%%%%: 4154-block  2
    %%%%%: 4154-block  3
    $$$$$: 4154-block  4
    $$$$$: 4154-block  5
    $$$$$: 4154-block  6
    $$$$$: 4154-block  7
        -: 4155:
    #####: 4156:  if (test_info.value_param() != nullptr) {
    #####: 4157:    OutputXmlAttribute(stream, kTestsuite, "value_param",
    %%%%%: 4157-block  0
    #####: 4158:                       test_info.value_param());
    %%%%%: 4158-block  0
    %%%%%: 4158-block  1
    %%%%%: 4158-block  2
    $$$$$: 4158-block  3
    $$$$$: 4158-block  4
    $$$$$: 4158-block  5
    $$$$$: 4158-block  6
        -: 4159:  }
    #####: 4160:  if (test_info.type_param() != nullptr) {
    %%%%%: 4160-block  0
    #####: 4161:    OutputXmlAttribute(stream, kTestsuite, "type_param",
    %%%%%: 4161-block  0
    #####: 4162:                       test_info.type_param());
    %%%%%: 4162-block  0
    %%%%%: 4162-block  1
    %%%%%: 4162-block  2
    $$$$$: 4162-block  3
    $$$$$: 4162-block  4
    $$$$$: 4162-block  5
    $$$$$: 4162-block  6
        -: 4163:  }
    #####: 4164:  if (GTEST_FLAG(list_tests)) {
    %%%%%: 4164-block  0
    #####: 4165:    OutputXmlAttribute(stream, kTestsuite, "file", test_info.file());
    %%%%%: 4165-block  0
    %%%%%: 4165-block  1
    %%%%%: 4165-block  2
    %%%%%: 4165-block  3
    $$$$$: 4165-block  4
    $$$$$: 4165-block  5
    $$$$$: 4165-block  6
    $$$$$: 4165-block  7
    #####: 4166:    OutputXmlAttribute(stream, kTestsuite, "line",
    %%%%%: 4166-block  0
    #####: 4167:                       StreamableToString(test_info.line()));
    %%%%%: 4167-block  0
    %%%%%: 4167-block  1
    $$$$$: 4167-block  2
    $$$$$: 4167-block  3
    $$$$$: 4167-block  4
    $$$$$: 4167-block  5
    $$$$$: 4167-block  6
    #####: 4168:    *stream << " />\n";
    #####: 4169:    return;
    %%%%%: 4169-block  0
        -: 4170:  }
        -: 4171:
    #####: 4172:  OutputXmlAttribute(stream, kTestsuite, "status",
    %%%%%: 4172-block  0
    #####: 4173:                     test_info.should_run() ? "run" : "notrun");
    %%%%%: 4173-block  0
    %%%%%: 4173-block  1
    %%%%%: 4173-block  2
    %%%%%: 4173-block  3
    %%%%%: 4173-block  4
    %%%%%: 4173-block  5
    $$$$$: 4173-block  6
    $$$$$: 4173-block  7
    $$$$$: 4173-block  8
    $$$$$: 4173-block  9
    #####: 4174:  OutputXmlAttribute(stream, kTestsuite, "result",
    %%%%%: 4174-block  0
    #####: 4175:                     test_info.should_run()
    #####: 4176:                         ? (result.Skipped() ? "skipped" : "completed")
    %%%%%: 4176-block  0
    %%%%%: 4176-block  1
    %%%%%: 4176-block  2
    %%%%%: 4176-block  3
    #####: 4177:                         : "suppressed");
    %%%%%: 4177-block  0
    %%%%%: 4177-block  1
    %%%%%: 4177-block  2
    %%%%%: 4177-block  3
    %%%%%: 4177-block  4
    $$$$$: 4177-block  5
    $$$$$: 4177-block  6
    $$$$$: 4177-block  7
    $$$$$: 4177-block  8
    #####: 4178:  OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4178-block  0
    #####: 4179:                     FormatTimeInMillisAsSeconds(result.elapsed_time()));
    %%%%%: 4179-block  0
    %%%%%: 4179-block  1
    $$$$$: 4179-block  2
    $$$$$: 4179-block  3
    $$$$$: 4179-block  4
    $$$$$: 4179-block  5
    #####: 4180:  OutputXmlAttribute(
    %%%%%: 4180-block  0
        -: 4181:      stream, kTestsuite, "timestamp",
    #####: 4182:      FormatEpochTimeInMillisAsIso8601(result.start_timestamp()));
    %%%%%: 4182-block  0
    %%%%%: 4182-block  1
    $$$$$: 4182-block  2
    $$$$$: 4182-block  3
    $$$$$: 4182-block  4
    $$$$$: 4182-block  5
    #####: 4183:  OutputXmlAttribute(stream, kTestsuite, "classname", test_suite_name);
    %%%%%: 4183-block  0
    %%%%%: 4183-block  1
    %%%%%: 4183-block  2
    $$$$$: 4183-block  3
    $$$$$: 4183-block  4
    $$$$$: 4183-block  5
    $$$$$: 4183-block  6
        -: 4184:
    #####: 4185:  int failures = 0;
    #####: 4186:  int skips = 0;
    #####: 4187:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4187-block  0
    %%%%%: 4187-block  1
    #####: 4188:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4188-block  0
    #####: 4189:    if (part.failed()) {
    %%%%%: 4189-block  0
    #####: 4190:      if (++failures == 1 && skips == 0) {
    %%%%%: 4190-block  0
    %%%%%: 4190-block  1
    %%%%%: 4190-block  2
    %%%%%: 4190-block  3
    %%%%%: 4190-block  4
    #####: 4191:        *stream << ">\n";
    %%%%%: 4191-block  0
        -: 4192:      }
        -: 4193:      const std::string location =
        -: 4194:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4195:                                                          part.line_number());
    %%%%%: 4195-block  0
    $$$$$: 4195-block  1
    #####: 4196:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4196-block  0
    %%%%%: 4196-block  1
    $$$$$: 4196-block  2
    $$$$$: 4196-block  3
        -: 4197:      *stream << "      <failure message=\""
    #####: 4198:              << EscapeXmlAttribute(summary)
    %%%%%: 4198-block  0
    $$$$$: 4198-block  1
    $$$$$: 4198-block  2
    #####: 4199:              << "\" type=\"\">";
    %%%%%: 4199-block  0
    %%%%%: 4199-block  1
    %%%%%: 4199-block  2
    #####: 4200:      const std::string detail = location + "\n" + part.message();
    %%%%%: 4200-block  0
    %%%%%: 4200-block  1
    $$$$$: 4200-block  2
    $$$$$: 4200-block  3
    #####: 4201:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
    %%%%%: 4201-block  0
    %%%%%: 4201-block  1
    $$$$$: 4201-block  2
    $$$$$: 4201-block  3
    #####: 4202:      *stream << "</failure>\n";
    #####: 4203:    } else if (part.skipped()) {
    %%%%%: 4203-block  0
    #####: 4204:      if (++skips == 1 && failures == 0) {
    %%%%%: 4204-block  0
    %%%%%: 4204-block  1
    %%%%%: 4204-block  2
    %%%%%: 4204-block  3
    %%%%%: 4204-block  4
    #####: 4205:        *stream << ">\n";
    %%%%%: 4205-block  0
        -: 4206:      }
        -: 4207:      const std::string location =
        -: 4208:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4209:                                                          part.line_number());
    %%%%%: 4209-block  0
    $$$$$: 4209-block  1
    #####: 4210:      const std::string summary = location + "\n" + part.summary();
    %%%%%: 4210-block  0
    %%%%%: 4210-block  1
    $$$$$: 4210-block  2
    $$$$$: 4210-block  3
        -: 4211:      *stream << "      <skipped message=\""
    #####: 4212:              << EscapeXmlAttribute(summary.c_str()) << "\">";
    %%%%%: 4212-block  0
    %%%%%: 4212-block  1
    %%%%%: 4212-block  2
    %%%%%: 4212-block  3
    %%%%%: 4212-block  4
    $$$$$: 4212-block  5
    $$$$$: 4212-block  6
    $$$$$: 4212-block  7
    $$$$$: 4212-block  8
    #####: 4213:      const std::string detail = location + "\n" + part.message();
    %%%%%: 4213-block  0
    %%%%%: 4213-block  1
    $$$$$: 4213-block  2
    $$$$$: 4213-block  3
    #####: 4214:      OutputXmlCDataSection(stream, RemoveInvalidXmlCharacters(detail).c_str());
    %%%%%: 4214-block  0
    %%%%%: 4214-block  1
    $$$$$: 4214-block  2
    $$$$$: 4214-block  3
    #####: 4215:      *stream << "</skipped>\n";
        -: 4216:    }
        -: 4217:  }
        -: 4218:
    #####: 4219:  if (failures == 0 && skips == 0 && result.test_property_count() == 0) {
    %%%%%: 4219-block  0
    %%%%%: 4219-block  1
    %%%%%: 4219-block  2
    %%%%%: 4219-block  3
    %%%%%: 4219-block  4
    %%%%%: 4219-block  5
    #####: 4220:    *stream << " />\n";
    %%%%%: 4220-block  0
        -: 4221:  } else {
    #####: 4222:    if (failures == 0 && skips == 0) {
    %%%%%: 4222-block  0
    %%%%%: 4222-block  1
    #####: 4223:      *stream << ">\n";
    %%%%%: 4223-block  0
        -: 4224:    }
    #####: 4225:    OutputXmlTestProperties(stream, result);
    %%%%%: 4225-block  0
    #####: 4226:    *stream << "    </testcase>\n";
    %%%%%: 4226-block  0
        -: 4227:  }
        -: 4228:}
        -: 4229:
        -: 4230:// Prints an XML representation of a TestSuite object
    #####: 4231:void XmlUnitTestResultPrinter::PrintXmlTestSuite(std::ostream* stream,
        -: 4232:                                                 const TestSuite& test_suite) {
    #####: 4233:  const std::string kTestsuite = "testsuite";
    %%%%%: 4233-block  0
    %%%%%: 4233-block  1
    $$$$$: 4233-block  2
    #####: 4234:  *stream << "  <" << kTestsuite;
    %%%%%: 4234-block  0
    #####: 4235:  OutputXmlAttribute(stream, kTestsuite, "name", test_suite.name());
    %%%%%: 4235-block  0
    %%%%%: 4235-block  1
    %%%%%: 4235-block  2
    %%%%%: 4235-block  3
    $$$$$: 4235-block  4
    $$$$$: 4235-block  5
    $$$$$: 4235-block  6
    $$$$$: 4235-block  7
    #####: 4236:  OutputXmlAttribute(stream, kTestsuite, "tests",
    %%%%%: 4236-block  0
    #####: 4237:                     StreamableToString(test_suite.reportable_test_count()));
    %%%%%: 4237-block  0
    %%%%%: 4237-block  1
    %%%%%: 4237-block  2
    $$$$$: 4237-block  3
    $$$$$: 4237-block  4
    $$$$$: 4237-block  5
    $$$$$: 4237-block  6
    $$$$$: 4237-block  7
    #####: 4238:  if (!GTEST_FLAG(list_tests)) {
    #####: 4239:    OutputXmlAttribute(stream, kTestsuite, "failures",
    %%%%%: 4239-block  0
    #####: 4240:                       StreamableToString(test_suite.failed_test_count()));
    %%%%%: 4240-block  0
    %%%%%: 4240-block  1
    %%%%%: 4240-block  2
    %%%%%: 4240-block  3
    $$$$$: 4240-block  4
    $$$$$: 4240-block  5
    $$$$$: 4240-block  6
    $$$$$: 4240-block  7
    $$$$$: 4240-block  8
    #####: 4241:    OutputXmlAttribute(
    %%%%%: 4241-block  0
        -: 4242:        stream, kTestsuite, "disabled",
    #####: 4243:        StreamableToString(test_suite.reportable_disabled_test_count()));
    %%%%%: 4243-block  0
    %%%%%: 4243-block  1
    %%%%%: 4243-block  2
    $$$$$: 4243-block  3
    $$$$$: 4243-block  4
    $$$$$: 4243-block  5
    $$$$$: 4243-block  6
    $$$$$: 4243-block  7
    #####: 4244:    OutputXmlAttribute(stream, kTestsuite, "skipped",
    %%%%%: 4244-block  0
    #####: 4245:                       StreamableToString(test_suite.skipped_test_count()));
    %%%%%: 4245-block  0
    %%%%%: 4245-block  1
    %%%%%: 4245-block  2
    $$$$$: 4245-block  3
    $$$$$: 4245-block  4
    $$$$$: 4245-block  5
    $$$$$: 4245-block  6
    $$$$$: 4245-block  7
        -: 4246:
    #####: 4247:    OutputXmlAttribute(stream, kTestsuite, "errors", "0");
    %%%%%: 4247-block  0
    %%%%%: 4247-block  1
    %%%%%: 4247-block  2
    $$$$$: 4247-block  3
    $$$$$: 4247-block  4
    $$$$$: 4247-block  5
    $$$$$: 4247-block  6
        -: 4248:
    #####: 4249:    OutputXmlAttribute(stream, kTestsuite, "time",
    %%%%%: 4249-block  0
    #####: 4250:                       FormatTimeInMillisAsSeconds(test_suite.elapsed_time()));
    %%%%%: 4250-block  0
    %%%%%: 4250-block  1
    $$$$$: 4250-block  2
    $$$$$: 4250-block  3
    $$$$$: 4250-block  4
    $$$$$: 4250-block  5
    #####: 4251:    OutputXmlAttribute(
    %%%%%: 4251-block  0
        -: 4252:        stream, kTestsuite, "timestamp",
    #####: 4253:        FormatEpochTimeInMillisAsIso8601(test_suite.start_timestamp()));
    %%%%%: 4253-block  0
    %%%%%: 4253-block  1
    $$$$$: 4253-block  2
    $$$$$: 4253-block  3
    $$$$$: 4253-block  4
    $$$$$: 4253-block  5
    #####: 4254:    *stream << TestPropertiesAsXmlAttributes(test_suite.ad_hoc_test_result());
    %%%%%: 4254-block  0
    %%%%%: 4254-block  1
    $$$$$: 4254-block  2
    $$$$$: 4254-block  3
        -: 4255:  }
    #####: 4256:  *stream << ">\n";
    %%%%%: 4256-block  0
    #####: 4257:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4257-block  0
    %%%%%: 4257-block  1
    %%%%%: 4257-block  2
    #####: 4258:    if (test_suite.GetTestInfo(i)->is_reportable())
    %%%%%: 4258-block  0
    %%%%%: 4258-block  1
    #####: 4259:      OutputXmlTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4259-block  0
    %%%%%: 4259-block  1
        -: 4260:  }
    #####: 4261:  *stream << "  </" << kTestsuite << ">\n";
    %%%%%: 4261-block  0
    %%%%%: 4261-block  1
    %%%%%: 4261-block  2
    #####: 4262:}
        -: 4263:
        -: 4264:// Prints an XML summary of unit_test to output stream out.
    #####: 4265:void XmlUnitTestResultPrinter::PrintXmlUnitTest(std::ostream* stream,
        -: 4266:                                                const UnitTest& unit_test) {
    #####: 4267:  const std::string kTestsuites = "testsuites";
    %%%%%: 4267-block  0
    %%%%%: 4267-block  1
    $$$$$: 4267-block  2
        -: 4268:
    #####: 4269:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    #####: 4270:  *stream << "<" << kTestsuites;
    %%%%%: 4270-block  0
    %%%%%: 4270-block  1
        -: 4271:
    #####: 4272:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4272-block  0
    #####: 4273:                     StreamableToString(unit_test.reportable_test_count()));
    %%%%%: 4273-block  0
    %%%%%: 4273-block  1
    %%%%%: 4273-block  2
    %%%%%: 4273-block  3
    $$$$$: 4273-block  4
    $$$$$: 4273-block  5
    $$$$$: 4273-block  6
    $$$$$: 4273-block  7
    $$$$$: 4273-block  8
    #####: 4274:  OutputXmlAttribute(stream, kTestsuites, "failures",
    %%%%%: 4274-block  0
    #####: 4275:                     StreamableToString(unit_test.failed_test_count()));
    %%%%%: 4275-block  0
    %%%%%: 4275-block  1
    %%%%%: 4275-block  2
    $$$$$: 4275-block  3
    $$$$$: 4275-block  4
    $$$$$: 4275-block  5
    $$$$$: 4275-block  6
    $$$$$: 4275-block  7
    #####: 4276:  OutputXmlAttribute(
    %%%%%: 4276-block  0
        -: 4277:      stream, kTestsuites, "disabled",
    #####: 4278:      StreamableToString(unit_test.reportable_disabled_test_count()));
    %%%%%: 4278-block  0
    %%%%%: 4278-block  1
    %%%%%: 4278-block  2
    $$$$$: 4278-block  3
    $$$$$: 4278-block  4
    $$$$$: 4278-block  5
    $$$$$: 4278-block  6
    $$$$$: 4278-block  7
    #####: 4279:  OutputXmlAttribute(stream, kTestsuites, "errors", "0");
    %%%%%: 4279-block  0
    %%%%%: 4279-block  1
    %%%%%: 4279-block  2
    $$$$$: 4279-block  3
    $$$$$: 4279-block  4
    $$$$$: 4279-block  5
    $$$$$: 4279-block  6
    #####: 4280:  OutputXmlAttribute(stream, kTestsuites, "time",
    %%%%%: 4280-block  0
    #####: 4281:                     FormatTimeInMillisAsSeconds(unit_test.elapsed_time()));
    %%%%%: 4281-block  0
    %%%%%: 4281-block  1
    $$$$$: 4281-block  2
    $$$$$: 4281-block  3
    $$$$$: 4281-block  4
    $$$$$: 4281-block  5
    #####: 4282:  OutputXmlAttribute(
    %%%%%: 4282-block  0
        -: 4283:      stream, kTestsuites, "timestamp",
    #####: 4284:      FormatEpochTimeInMillisAsIso8601(unit_test.start_timestamp()));
    %%%%%: 4284-block  0
    %%%%%: 4284-block  1
    $$$$$: 4284-block  2
    $$$$$: 4284-block  3
    $$$$$: 4284-block  4
    $$$$$: 4284-block  5
        -: 4285:
    #####: 4286:  if (GTEST_FLAG(shuffle)) {
    #####: 4287:    OutputXmlAttribute(stream, kTestsuites, "random_seed",
    %%%%%: 4287-block  0
    #####: 4288:                       StreamableToString(unit_test.random_seed()));
    %%%%%: 4288-block  0
    %%%%%: 4288-block  1
    %%%%%: 4288-block  2
    $$$$$: 4288-block  3
    $$$$$: 4288-block  4
    $$$$$: 4288-block  5
    $$$$$: 4288-block  6
    $$$$$: 4288-block  7
        -: 4289:  }
    #####: 4290:  *stream << TestPropertiesAsXmlAttributes(unit_test.ad_hoc_test_result());
    %%%%%: 4290-block  0
    %%%%%: 4290-block  1
    %%%%%: 4290-block  2
    $$$$$: 4290-block  3
    $$$$$: 4290-block  4
        -: 4291:
    #####: 4292:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4292-block  0
    %%%%%: 4292-block  1
    %%%%%: 4292-block  2
    $$$$$: 4292-block  3
    $$$$$: 4292-block  4
    $$$$$: 4292-block  5
    $$$$$: 4292-block  6
    #####: 4293:  *stream << ">\n";
        -: 4294:
    #####: 4295:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4295-block  0
    %%%%%: 4295-block  1
    %%%%%: 4295-block  2
    #####: 4296:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0)
    %%%%%: 4296-block  0
    %%%%%: 4296-block  1
    %%%%%: 4296-block  2
    #####: 4297:      PrintXmlTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4297-block  0
    %%%%%: 4297-block  1
        -: 4298:  }
    #####: 4299:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4299-block  0
    %%%%%: 4299-block  1
    %%%%%: 4299-block  2
    #####: 4300:}
        -: 4301:
    #####: 4302:void XmlUnitTestResultPrinter::PrintXmlTestsList(
        -: 4303:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4304:  const std::string kTestsuites = "testsuites";
    %%%%%: 4304-block  0
    %%%%%: 4304-block  1
    $$$$$: 4304-block  2
        -: 4305:
    #####: 4306:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
    #####: 4307:  *stream << "<" << kTestsuites;
    %%%%%: 4307-block  0
    %%%%%: 4307-block  1
        -: 4308:
    #####: 4309:  int total_tests = 0;
    #####: 4310:  for (auto test_suite : test_suites) {
    %%%%%: 4310-block  0
    %%%%%: 4310-block  1
    %%%%%: 4310-block  2
    #####: 4311:    total_tests += test_suite->total_test_count();
        -: 4312:  }
    #####: 4313:  OutputXmlAttribute(stream, kTestsuites, "tests",
    %%%%%: 4313-block  0
    #####: 4314:                     StreamableToString(total_tests));
    %%%%%: 4314-block  0
    %%%%%: 4314-block  1
    %%%%%: 4314-block  2
    $$$$$: 4314-block  3
    $$$$$: 4314-block  4
    $$$$$: 4314-block  5
    $$$$$: 4314-block  6
    #####: 4315:  OutputXmlAttribute(stream, kTestsuites, "name", "AllTests");
    %%%%%: 4315-block  0
    %%%%%: 4315-block  1
    %%%%%: 4315-block  2
    $$$$$: 4315-block  3
    $$$$$: 4315-block  4
    $$$$$: 4315-block  5
    $$$$$: 4315-block  6
    #####: 4316:  *stream << ">\n";
        -: 4317:
    #####: 4318:  for (auto test_suite : test_suites) {
    %%%%%: 4318-block  0
    %%%%%: 4318-block  1
    %%%%%: 4318-block  2
    %%%%%: 4318-block  3
    #####: 4319:    PrintXmlTestSuite(stream, *test_suite);
        -: 4320:  }
    #####: 4321:  *stream << "</" << kTestsuites << ">\n";
    %%%%%: 4321-block  0
    %%%%%: 4321-block  1
    %%%%%: 4321-block  2
    #####: 4322:}
        -: 4323:
        -: 4324:// Produces a string representing the test properties in a result as space
        -: 4325:// delimited XML attributes based on the property key="value" pairs.
    #####: 4326:std::string XmlUnitTestResultPrinter::TestPropertiesAsXmlAttributes(
        -: 4327:    const TestResult& result) {
    #####: 4328:  Message attributes;
    %%%%%: 4328-block  0
    %%%%%: 4328-block  1
    $$$$$: 4328-block  2
    #####: 4329:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4329-block  0
    %%%%%: 4329-block  1
    #####: 4330:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4330-block  0
    #####: 4331:    attributes << " " << property.key() << "="
    %%%%%: 4331-block  0
    %%%%%: 4331-block  1
    %%%%%: 4331-block  2
    $$$$$: 4331-block  3
    #####: 4332:        << "\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4332-block  0
    %%%%%: 4332-block  1
    %%%%%: 4332-block  2
    %%%%%: 4332-block  3
    %%%%%: 4332-block  4
    %%%%%: 4332-block  5
    $$$$$: 4332-block  6
    $$$$$: 4332-block  7
    $$$$$: 4332-block  8
    $$$$$: 4332-block  9
        -: 4333:  }
    #####: 4334:  return attributes.GetString();
    %%%%%: 4334-block  0
    %%%%%: 4334-block  1
        -: 4335:}
        -: 4336:
    #####: 4337:void XmlUnitTestResultPrinter::OutputXmlTestProperties(
        -: 4338:    std::ostream* stream, const TestResult& result) {
    #####: 4339:  const std::string kProperties = "properties";
    %%%%%: 4339-block  0
    $$$$$: 4339-block  1
    #####: 4340:  const std::string kProperty = "property";
    $$$$$: 4340-block  0
        -: 4341:
    #####: 4342:  if (result.test_property_count() <= 0) {
    #####: 4343:    return;
    %%%%%: 4343-block  0
        -: 4344:  }
        -: 4345:
    #####: 4346:  *stream << "<" << kProperties << ">\n";
    %%%%%: 4346-block  0
    %%%%%: 4346-block  1
    %%%%%: 4346-block  2
    #####: 4347:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4347-block  0
    %%%%%: 4347-block  1
    %%%%%: 4347-block  2
    #####: 4348:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4348-block  0
    #####: 4349:    *stream << "<" << kProperty;
    %%%%%: 4349-block  0
    %%%%%: 4349-block  1
    #####: 4350:    *stream << " name=\"" << EscapeXmlAttribute(property.key()) << "\"";
    %%%%%: 4350-block  0
    %%%%%: 4350-block  1
    %%%%%: 4350-block  2
    %%%%%: 4350-block  3
    %%%%%: 4350-block  4
    %%%%%: 4350-block  5
    $$$$$: 4350-block  6
    $$$$$: 4350-block  7
    $$$$$: 4350-block  8
    $$$$$: 4350-block  9
    #####: 4351:    *stream << " value=\"" << EscapeXmlAttribute(property.value()) << "\"";
    %%%%%: 4351-block  0
    %%%%%: 4351-block  1
    %%%%%: 4351-block  2
    %%%%%: 4351-block  3
    %%%%%: 4351-block  4
    $$$$$: 4351-block  5
    $$$$$: 4351-block  6
    $$$$$: 4351-block  7
    $$$$$: 4351-block  8
    #####: 4352:    *stream << "/>\n";
        -: 4353:  }
    #####: 4354:  *stream << "</" << kProperties << ">\n";
    %%%%%: 4354-block  0
    %%%%%: 4354-block  1
    %%%%%: 4354-block  2
        -: 4355:}
        -: 4356:
        -: 4357:// End XmlUnitTestResultPrinter
        -: 4358:
        -: 4359:// This class generates an JSON output file.
        -: 4360:class JsonUnitTestResultPrinter : public EmptyTestEventListener {
        -: 4361: public:
        -: 4362:  explicit JsonUnitTestResultPrinter(const char* output_file);
        -: 4363:
        -: 4364:  void OnTestIterationEnd(const UnitTest& unit_test, int iteration) override;
        -: 4365:
        -: 4366:  // Prints an JSON summary of all unit tests.
        -: 4367:  static void PrintJsonTestList(::std::ostream* stream,
        -: 4368:                                const std::vector<TestSuite*>& test_suites);
        -: 4369:
        -: 4370: private:
        -: 4371:  // Returns an JSON-escaped copy of the input string str.
        -: 4372:  static std::string EscapeJson(const std::string& str);
        -: 4373:
        -: 4374:  //// Verifies that the given attribute belongs to the given element and
        -: 4375:  //// streams the attribute as JSON.
        -: 4376:  static void OutputJsonKey(std::ostream* stream,
        -: 4377:                            const std::string& element_name,
        -: 4378:                            const std::string& name,
        -: 4379:                            const std::string& value,
        -: 4380:                            const std::string& indent,
        -: 4381:                            bool comma = true);
        -: 4382:  static void OutputJsonKey(std::ostream* stream,
        -: 4383:                            const std::string& element_name,
        -: 4384:                            const std::string& name,
        -: 4385:                            int value,
        -: 4386:                            const std::string& indent,
        -: 4387:                            bool comma = true);
        -: 4388:
        -: 4389:  // Streams a JSON representation of a TestInfo object.
        -: 4390:  static void OutputJsonTestInfo(::std::ostream* stream,
        -: 4391:                                 const char* test_suite_name,
        -: 4392:                                 const TestInfo& test_info);
        -: 4393:
        -: 4394:  // Prints a JSON representation of a TestSuite object
        -: 4395:  static void PrintJsonTestSuite(::std::ostream* stream,
        -: 4396:                                 const TestSuite& test_suite);
        -: 4397:
        -: 4398:  // Prints a JSON summary of unit_test to output stream out.
        -: 4399:  static void PrintJsonUnitTest(::std::ostream* stream,
        -: 4400:                                const UnitTest& unit_test);
        -: 4401:
        -: 4402:  // Produces a string representing the test properties in a result as
        -: 4403:  // a JSON dictionary.
        -: 4404:  static std::string TestPropertiesAsJson(const TestResult& result,
        -: 4405:                                          const std::string& indent);
        -: 4406:
        -: 4407:  // The output file.
        -: 4408:  const std::string output_file_;
        -: 4409:
        -: 4410:  GTEST_DISALLOW_COPY_AND_ASSIGN_(JsonUnitTestResultPrinter);
        -: 4411:};
        -: 4412:
        -: 4413:// Creates a new JsonUnitTestResultPrinter.
    #####: 4414:JsonUnitTestResultPrinter::JsonUnitTestResultPrinter(const char* output_file)
    #####: 4415:    : output_file_(output_file) {
    %%%%%: 4415-block  0
    $$$$$: 4415-block  1
    $$$$$: 4415-block  2
    #####: 4416:  if (output_file_.empty()) {
    #####: 4417:    GTEST_LOG_(FATAL) << "JSON output file may not be null";
    %%%%%: 4417-block  0
    %%%%%: 4417-block  1
    %%%%%: 4417-block  2
    $$$$$: 4417-block  3
    $$$$$: 4417-block  4
        -: 4418:  }
    #####: 4419:}
    %%%%%: 4419-block  0
        -: 4420:
    #####: 4421:void JsonUnitTestResultPrinter::OnTestIterationEnd(const UnitTest& unit_test,
        -: 4422:                                                  int /*iteration*/) {
    #####: 4423:  FILE* jsonout = OpenFileForWriting(output_file_);
    %%%%%: 4423-block  0
    #####: 4424:  std::stringstream stream;
    %%%%%: 4424-block  0
    %%%%%: 4424-block  1
    $$$$$: 4424-block  2
    #####: 4425:  PrintJsonUnitTest(&stream, unit_test);
    %%%%%: 4425-block  0
    #####: 4426:  fprintf(jsonout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 4426-block  0
    %%%%%: 4426-block  1
    %%%%%: 4426-block  2
    $$$$$: 4426-block  3
    $$$$$: 4426-block  4
    #####: 4427:  fclose(jsonout);
    #####: 4428:}
        -: 4429:
        -: 4430:// Returns an JSON-escaped copy of the input string str.
    #####: 4431:std::string JsonUnitTestResultPrinter::EscapeJson(const std::string& str) {
    #####: 4432:  Message m;
    %%%%%: 4432-block  0
    %%%%%: 4432-block  1
    $$$$$: 4432-block  2
        -: 4433:
    #####: 4434:  for (size_t i = 0; i < str.size(); ++i) {
    %%%%%: 4434-block  0
    %%%%%: 4434-block  1
    %%%%%: 4434-block  2
    #####: 4435:    const char ch = str[i];
    %%%%%: 4435-block  0
    #####: 4436:    switch (ch) {
    #####: 4437:      case '\\':
        -: 4438:      case '"':
        -: 4439:      case '/':
    #####: 4440:        m << '\\' << ch;
    %%%%%: 4440-block  0
    %%%%%: 4440-block  1
    $$$$$: 4440-block  2
    #####: 4441:        break;
    %%%%%: 4441-block  0
    #####: 4442:      case '\b':
    #####: 4443:        m << "\\b";
    %%%%%: 4443-block  0
    #####: 4444:        break;
    %%%%%: 4444-block  0
    #####: 4445:      case '\t':
    #####: 4446:        m << "\\t";
    %%%%%: 4446-block  0
    #####: 4447:        break;
    %%%%%: 4447-block  0
    #####: 4448:      case '\n':
    #####: 4449:        m << "\\n";
    %%%%%: 4449-block  0
    #####: 4450:        break;
    %%%%%: 4450-block  0
    #####: 4451:      case '\f':
    #####: 4452:        m << "\\f";
    %%%%%: 4452-block  0
    #####: 4453:        break;
    %%%%%: 4453-block  0
    #####: 4454:      case '\r':
    #####: 4455:        m << "\\r";
    %%%%%: 4455-block  0
    #####: 4456:        break;
    %%%%%: 4456-block  0
    #####: 4457:      default:
    #####: 4458:        if (ch < ' ') {
    %%%%%: 4458-block  0
    #####: 4459:          m << "\\u00" << String::FormatByte(static_cast<unsigned char>(ch));
    %%%%%: 4459-block  0
    %%%%%: 4459-block  1
    %%%%%: 4459-block  2
    %%%%%: 4459-block  3
    $$$$$: 4459-block  4
    $$$$$: 4459-block  5
        -: 4460:        } else {
    #####: 4461:          m << ch;
    %%%%%: 4461-block  0
        -: 4462:        }
    #####: 4463:        break;
    %%%%%: 4463-block  0
        -: 4464:    }
        -: 4465:  }
        -: 4466:
    #####: 4467:  return m.GetString();
    %%%%%: 4467-block  0
    %%%%%: 4467-block  1
        -: 4468:}
        -: 4469:
        -: 4470:// The following routines generate an JSON representation of a UnitTest
        -: 4471:// object.
        -: 4472:
        -: 4473:// Formats the given time in milliseconds as seconds.
    #####: 4474:static std::string FormatTimeInMillisAsDuration(TimeInMillis ms) {
    #####: 4475:  ::std::stringstream ss;
    %%%%%: 4475-block  0
    %%%%%: 4475-block  1
    $$$$$: 4475-block  2
    #####: 4476:  ss << (static_cast<double>(ms) * 1e-3) << "s";
    %%%%%: 4476-block  0
    %%%%%: 4476-block  1
    #####: 4477:  return ss.str();
    %%%%%: 4477-block  0
    %%%%%: 4477-block  1
        -: 4478:}
        -: 4479:
        -: 4480:// Converts the given epoch time in milliseconds to a date string in the
        -: 4481:// RFC3339 format, without the timezone information.
    #####: 4482:static std::string FormatEpochTimeInMillisAsRFC3339(TimeInMillis ms) {
        -: 4483:  struct tm time_struct;
    #####: 4484:  if (!PortableLocaltime(static_cast<time_t>(ms / 1000), &time_struct))
    %%%%%: 4484-block  0
    %%%%%: 4484-block  1
    #####: 4485:    return "";
    %%%%%: 4485-block  0
        -: 4486:  // YYYY-MM-DDThh:mm:ss
    #####: 4487:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
    %%%%%: 4487-block  0
    %%%%%: 4487-block  1
    $$$$$: 4487-block  2
    $$$$$: 4487-block  3
    $$$$$: 4487-block  4
    $$$$$: 4487-block  5
    $$$$$: 4487-block  6
    $$$$$: 4487-block  7
    $$$$$: 4487-block  8
    #####: 4488:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
    %%%%%: 4488-block  0
    %%%%%: 4488-block  1
    %%%%%: 4488-block  2
    $$$$$: 4488-block  3
    $$$$$: 4488-block  4
    $$$$$: 4488-block  5
    $$$$$: 4488-block  6
    $$$$$: 4488-block  7
    $$$$$: 4488-block  8
    #####: 4489:      String::FormatIntWidth2(time_struct.tm_mday) + "T" +
    %%%%%: 4489-block  0
    %%%%%: 4489-block  1
    %%%%%: 4489-block  2
    $$$$$: 4489-block  3
    $$$$$: 4489-block  4
    $$$$$: 4489-block  5
    $$$$$: 4489-block  6
    $$$$$: 4489-block  7
    $$$$$: 4489-block  8
    #####: 4490:      String::FormatIntWidth2(time_struct.tm_hour) + ":" +
    %%%%%: 4490-block  0
    %%%%%: 4490-block  1
    %%%%%: 4490-block  2
    $$$$$: 4490-block  3
    $$$$$: 4490-block  4
    $$$$$: 4490-block  5
    $$$$$: 4490-block  6
    $$$$$: 4490-block  7
    $$$$$: 4490-block  8
    #####: 4491:      String::FormatIntWidth2(time_struct.tm_min) + ":" +
    %%%%%: 4491-block  0
    %%%%%: 4491-block  1
    %%%%%: 4491-block  2
    %%%%%: 4491-block  3
    $$$$$: 4491-block  4
    $$$$$: 4491-block  5
    $$$$$: 4491-block  6
    $$$$$: 4491-block  7
    $$$$$: 4491-block  8
    $$$$$: 4491-block  9
    #####: 4492:      String::FormatIntWidth2(time_struct.tm_sec) + "Z";
    %%%%%: 4492-block  0
    %%%%%: 4492-block  1
    %%%%%: 4492-block  2
    $$$$$: 4492-block  3
    $$$$$: 4492-block  4
        -: 4493:}
        -: 4494:
    #####: 4495:static inline std::string Indent(size_t width) {
    #####: 4496:  return std::string(width, ' ');
    %%%%%: 4496-block  0
    %%%%%: 4496-block  1
        -: 4497:}
        -: 4498:
    #####: 4499:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4500:    std::ostream* stream,
        -: 4501:    const std::string& element_name,
        -: 4502:    const std::string& name,
        -: 4503:    const std::string& value,
        -: 4504:    const std::string& indent,
        -: 4505:    bool comma) {
        -: 4506:  const std::vector<std::string>& allowed_names =
    #####: 4507:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4507-block  0
    %%%%%: 4507-block  1
    $$$$$: 4507-block  2
        -: 4508:
    #####: 4509:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4509-block  0
    %%%%%: 4509-block  1
    %%%%%: 4509-block  2
    %%%%%: 4509-block  3
    %%%%%: 4509-block  4
    $$$$$: 4509-block  5
    $$$$$: 4509-block  6
    $$$$$: 4509-block  7
        -: 4510:                   allowed_names.end())
        -: 4511:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4512:      << "\".";
    %%%%%: 4512-block  0
    %%%%%: 4512-block  1
    %%%%%: 4512-block  2
    %%%%%: 4512-block  3
    %%%%%: 4512-block  4
        -: 4513:
    #####: 4514:  *stream << indent << "\"" << name << "\": \"" << EscapeJson(value) << "\"";
    %%%%%: 4514-block  0
    %%%%%: 4514-block  1
    %%%%%: 4514-block  2
    %%%%%: 4514-block  3
    %%%%%: 4514-block  4
    %%%%%: 4514-block  5
    %%%%%: 4514-block  6
    %%%%%: 4514-block  7
    $$$$$: 4514-block  8
    $$$$$: 4514-block  9
    #####: 4515:  if (comma)
    #####: 4516:    *stream << ",\n";
    %%%%%: 4516-block  0
    #####: 4517:}
        -: 4518:
    #####: 4519:void JsonUnitTestResultPrinter::OutputJsonKey(
        -: 4520:    std::ostream* stream,
        -: 4521:    const std::string& element_name,
        -: 4522:    const std::string& name,
        -: 4523:    int value,
        -: 4524:    const std::string& indent,
        -: 4525:    bool comma) {
        -: 4526:  const std::vector<std::string>& allowed_names =
    #####: 4527:      GetReservedOutputAttributesForElement(element_name);
    %%%%%: 4527-block  0
    %%%%%: 4527-block  1
    $$$$$: 4527-block  2
        -: 4528:
    #####: 4529:  GTEST_CHECK_(std::find(allowed_names.begin(), allowed_names.end(), name) !=
    %%%%%: 4529-block  0
    %%%%%: 4529-block  1
    %%%%%: 4529-block  2
    %%%%%: 4529-block  3
    %%%%%: 4529-block  4
    $$$$$: 4529-block  5
    $$$$$: 4529-block  6
    $$$$$: 4529-block  7
        -: 4530:                   allowed_names.end())
        -: 4531:      << "Key \"" << name << "\" is not allowed for value \"" << element_name
    #####: 4532:      << "\".";
    %%%%%: 4532-block  0
    %%%%%: 4532-block  1
    %%%%%: 4532-block  2
    %%%%%: 4532-block  3
    %%%%%: 4532-block  4
        -: 4533:
    #####: 4534:  *stream << indent << "\"" << name << "\": " << StreamableToString(value);
    %%%%%: 4534-block  0
    %%%%%: 4534-block  1
    %%%%%: 4534-block  2
    %%%%%: 4534-block  3
    %%%%%: 4534-block  4
    %%%%%: 4534-block  5
    %%%%%: 4534-block  6
    $$$$$: 4534-block  7
    $$$$$: 4534-block  8
    #####: 4535:  if (comma)
    #####: 4536:    *stream << ",\n";
    %%%%%: 4536-block  0
    #####: 4537:}
        -: 4538:
        -: 4539:// Prints a JSON representation of a TestInfo object.
    #####: 4540:void JsonUnitTestResultPrinter::OutputJsonTestInfo(::std::ostream* stream,
        -: 4541:                                                   const char* test_suite_name,
        -: 4542:                                                   const TestInfo& test_info) {
    #####: 4543:  const TestResult& result = *test_info.result();
    %%%%%: 4543-block  0
    #####: 4544:  const std::string kTestsuite = "testcase";
    $$$$$: 4544-block  0
    #####: 4545:  const std::string kIndent = Indent(10);
    $$$$$: 4545-block  0
        -: 4546:
    #####: 4547:  *stream << Indent(8) << "{\n";
    %%%%%: 4547-block  0
    %%%%%: 4547-block  1
    %%%%%: 4547-block  2
    %%%%%: 4547-block  3
    $$$$$: 4547-block  4
    $$$$$: 4547-block  5
    #####: 4548:  OutputJsonKey(stream, kTestsuite, "name", test_info.name(), kIndent);
    %%%%%: 4548-block  0
    %%%%%: 4548-block  1
    %%%%%: 4548-block  2
    $$$$$: 4548-block  3
    $$$$$: 4548-block  4
    $$$$$: 4548-block  5
    $$$$$: 4548-block  6
        -: 4549:
    #####: 4550:  if (test_info.value_param() != nullptr) {
    #####: 4551:    OutputJsonKey(stream, kTestsuite, "value_param", test_info.value_param(),
    %%%%%: 4551-block  0
    #####: 4552:                  kIndent);
    %%%%%: 4552-block  0
    %%%%%: 4552-block  1
    %%%%%: 4552-block  2
    $$$$$: 4552-block  3
    $$$$$: 4552-block  4
    $$$$$: 4552-block  5
    $$$$$: 4552-block  6
        -: 4553:  }
    #####: 4554:  if (test_info.type_param() != nullptr) {
    %%%%%: 4554-block  0
    #####: 4555:    OutputJsonKey(stream, kTestsuite, "type_param", test_info.type_param(),
    %%%%%: 4555-block  0
    #####: 4556:                  kIndent);
    %%%%%: 4556-block  0
    %%%%%: 4556-block  1
    %%%%%: 4556-block  2
    $$$$$: 4556-block  3
    $$$$$: 4556-block  4
    $$$$$: 4556-block  5
    $$$$$: 4556-block  6
        -: 4557:  }
    #####: 4558:  if (GTEST_FLAG(list_tests)) {
    %%%%%: 4558-block  0
    #####: 4559:    OutputJsonKey(stream, kTestsuite, "file", test_info.file(), kIndent);
    %%%%%: 4559-block  0
    %%%%%: 4559-block  1
    %%%%%: 4559-block  2
    %%%%%: 4559-block  3
    $$$$$: 4559-block  4
    $$$$$: 4559-block  5
    $$$$$: 4559-block  6
    $$$$$: 4559-block  7
    #####: 4560:    OutputJsonKey(stream, kTestsuite, "line", test_info.line(), kIndent, false);
    %%%%%: 4560-block  0
    %%%%%: 4560-block  1
    $$$$$: 4560-block  2
    $$$$$: 4560-block  3
    #####: 4561:    *stream << "\n" << Indent(8) << "}";
    %%%%%: 4561-block  0
    %%%%%: 4561-block  1
    %%%%%: 4561-block  2
    %%%%%: 4561-block  3
    $$$$$: 4561-block  4
    $$$$$: 4561-block  5
    #####: 4562:    return;
        -: 4563:  }
        -: 4564:
    #####: 4565:  OutputJsonKey(stream, kTestsuite, "status",
    %%%%%: 4565-block  0
    #####: 4566:                test_info.should_run() ? "RUN" : "NOTRUN", kIndent);
    %%%%%: 4566-block  0
    %%%%%: 4566-block  1
    %%%%%: 4566-block  2
    %%%%%: 4566-block  3
    %%%%%: 4566-block  4
    %%%%%: 4566-block  5
    $$$$$: 4566-block  6
    $$$$$: 4566-block  7
    $$$$$: 4566-block  8
    $$$$$: 4566-block  9
    #####: 4567:  OutputJsonKey(stream, kTestsuite, "result",
    %%%%%: 4567-block  0
    #####: 4568:                test_info.should_run()
    #####: 4569:                    ? (result.Skipped() ? "SKIPPED" : "COMPLETED")
    %%%%%: 4569-block  0
    %%%%%: 4569-block  1
    %%%%%: 4569-block  2
    %%%%%: 4569-block  3
        -: 4570:                    : "SUPPRESSED",
    #####: 4571:                kIndent);
    %%%%%: 4571-block  0
    %%%%%: 4571-block  1
    %%%%%: 4571-block  2
    %%%%%: 4571-block  3
    %%%%%: 4571-block  4
    $$$$$: 4571-block  5
    $$$$$: 4571-block  6
    $$$$$: 4571-block  7
    $$$$$: 4571-block  8
    #####: 4572:  OutputJsonKey(stream, kTestsuite, "timestamp",
    %%%%%: 4572-block  0
    #####: 4573:                FormatEpochTimeInMillisAsRFC3339(result.start_timestamp()),
    $$$$$: 4573-block  0
    $$$$$: 4573-block  1
    #####: 4574:                kIndent);
    %%%%%: 4574-block  0
    %%%%%: 4574-block  1
    $$$$$: 4574-block  2
    $$$$$: 4574-block  3
    #####: 4575:  OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4575-block  0
    #####: 4576:                FormatTimeInMillisAsDuration(result.elapsed_time()), kIndent);
    %%%%%: 4576-block  0
    %%%%%: 4576-block  1
    $$$$$: 4576-block  2
    $$$$$: 4576-block  3
    $$$$$: 4576-block  4
    $$$$$: 4576-block  5
    #####: 4577:  OutputJsonKey(stream, kTestsuite, "classname", test_suite_name, kIndent,
    %%%%%: 4577-block  0
    #####: 4578:                false);
    %%%%%: 4578-block  0
    %%%%%: 4578-block  1
    $$$$$: 4578-block  2
    $$$$$: 4578-block  3
    $$$$$: 4578-block  4
    $$$$$: 4578-block  5
    #####: 4579:  *stream << TestPropertiesAsJson(result, kIndent);
    %%%%%: 4579-block  0
    %%%%%: 4579-block  1
    $$$$$: 4579-block  2
    $$$$$: 4579-block  3
        -: 4580:
    #####: 4581:  int failures = 0;
    #####: 4582:  for (int i = 0; i < result.total_part_count(); ++i) {
    %%%%%: 4582-block  0
    %%%%%: 4582-block  1
    #####: 4583:    const TestPartResult& part = result.GetTestPartResult(i);
    %%%%%: 4583-block  0
    #####: 4584:    if (part.failed()) {
    %%%%%: 4584-block  0
    #####: 4585:      *stream << ",\n";
    %%%%%: 4585-block  0
    #####: 4586:      if (++failures == 1) {
    %%%%%: 4586-block  0
    #####: 4587:        *stream << kIndent << "\"" << "failures" << "\": [\n";
    %%%%%: 4587-block  0
    %%%%%: 4587-block  1
    %%%%%: 4587-block  2
    %%%%%: 4587-block  3
        -: 4588:      }
        -: 4589:      const std::string location =
        -: 4590:          internal::FormatCompilerIndependentFileLocation(part.file_name(),
    #####: 4591:                                                          part.line_number());
    %%%%%: 4591-block  0
    $$$$$: 4591-block  1
    #####: 4592:      const std::string message = EscapeJson(location + "\n" + part.message());
    %%%%%: 4592-block  0
    %%%%%: 4592-block  1
    %%%%%: 4592-block  2
    %%%%%: 4592-block  3
    $$$$$: 4592-block  4
    $$$$$: 4592-block  5
    $$$$$: 4592-block  6
        -: 4593:      *stream << kIndent << "  {\n"
        -: 4594:              << kIndent << "    \"failure\": \"" << message << "\",\n"
        -: 4595:              << kIndent << "    \"type\": \"\"\n"
    #####: 4596:              << kIndent << "  }";
    %%%%%: 4596-block  0
    %%%%%: 4596-block  1
    %%%%%: 4596-block  2
    %%%%%: 4596-block  3
    %%%%%: 4596-block  4
    %%%%%: 4596-block  5
    %%%%%: 4596-block  6
    %%%%%: 4596-block  7
    %%%%%: 4596-block  8
        -: 4597:    }
        -: 4598:  }
        -: 4599:
    #####: 4600:  if (failures > 0)
    %%%%%: 4600-block  0
    #####: 4601:    *stream << "\n" << kIndent << "]";
    %%%%%: 4601-block  0
    %%%%%: 4601-block  1
    %%%%%: 4601-block  2
    #####: 4602:  *stream << "\n" << Indent(8) << "}";
    %%%%%: 4602-block  0
    %%%%%: 4602-block  1
    %%%%%: 4602-block  2
    %%%%%: 4602-block  3
    %%%%%: 4602-block  4
    $$$$$: 4602-block  5
    $$$$$: 4602-block  6
        -: 4603:}
        -: 4604:
        -: 4605:// Prints an JSON representation of a TestSuite object
    #####: 4606:void JsonUnitTestResultPrinter::PrintJsonTestSuite(
        -: 4607:    std::ostream* stream, const TestSuite& test_suite) {
    #####: 4608:  const std::string kTestsuite = "testsuite";
    %%%%%: 4608-block  0
    $$$$$: 4608-block  1
    #####: 4609:  const std::string kIndent = Indent(6);
    $$$$$: 4609-block  0
        -: 4610:
    #####: 4611:  *stream << Indent(4) << "{\n";
    %%%%%: 4611-block  0
    %%%%%: 4611-block  1
    %%%%%: 4611-block  2
    %%%%%: 4611-block  3
    $$$$$: 4611-block  4
    $$$$$: 4611-block  5
    #####: 4612:  OutputJsonKey(stream, kTestsuite, "name", test_suite.name(), kIndent);
    %%%%%: 4612-block  0
    %%%%%: 4612-block  1
    %%%%%: 4612-block  2
    $$$$$: 4612-block  3
    $$$$$: 4612-block  4
    $$$$$: 4612-block  5
    $$$$$: 4612-block  6
    #####: 4613:  OutputJsonKey(stream, kTestsuite, "tests", test_suite.reportable_test_count(),
    %%%%%: 4613-block  0
    #####: 4614:                kIndent);
    %%%%%: 4614-block  0
    %%%%%: 4614-block  1
    $$$$$: 4614-block  2
    $$$$$: 4614-block  3
    #####: 4615:  if (!GTEST_FLAG(list_tests)) {
    #####: 4616:    OutputJsonKey(stream, kTestsuite, "failures",
    %%%%%: 4616-block  0
    %%%%%: 4616-block  1
    #####: 4617:                  test_suite.failed_test_count(), kIndent);
    %%%%%: 4617-block  0
    %%%%%: 4617-block  1
    $$$$$: 4617-block  2
    $$$$$: 4617-block  3
    #####: 4618:    OutputJsonKey(stream, kTestsuite, "disabled",
    %%%%%: 4618-block  0
    #####: 4619:                  test_suite.reportable_disabled_test_count(), kIndent);
    %%%%%: 4619-block  0
    %%%%%: 4619-block  1
    $$$$$: 4619-block  2
    $$$$$: 4619-block  3
    #####: 4620:    OutputJsonKey(stream, kTestsuite, "errors", 0, kIndent);
    %%%%%: 4620-block  0
    %%%%%: 4620-block  1
    $$$$$: 4620-block  2
    $$$$$: 4620-block  3
    #####: 4621:    OutputJsonKey(
    %%%%%: 4621-block  0
        -: 4622:        stream, kTestsuite, "timestamp",
    #####: 4623:        FormatEpochTimeInMillisAsRFC3339(test_suite.start_timestamp()),
    $$$$$: 4623-block  0
    $$$$$: 4623-block  1
    #####: 4624:        kIndent);
    %%%%%: 4624-block  0
    %%%%%: 4624-block  1
    $$$$$: 4624-block  2
    $$$$$: 4624-block  3
    #####: 4625:    OutputJsonKey(stream, kTestsuite, "time",
    %%%%%: 4625-block  0
    #####: 4626:                  FormatTimeInMillisAsDuration(test_suite.elapsed_time()),
    $$$$$: 4626-block  0
    $$$$$: 4626-block  1
    #####: 4627:                  kIndent, false);
    %%%%%: 4627-block  0
    %%%%%: 4627-block  1
    $$$$$: 4627-block  2
    $$$$$: 4627-block  3
    #####: 4628:    *stream << TestPropertiesAsJson(test_suite.ad_hoc_test_result(), kIndent)
    %%%%%: 4628-block  0
    $$$$$: 4628-block  1
    $$$$$: 4628-block  2
    #####: 4629:            << ",\n";
    %%%%%: 4629-block  0
    %%%%%: 4629-block  1
        -: 4630:  }
        -: 4631:
    #####: 4632:  *stream << kIndent << "\"" << kTestsuite << "\": [\n";
    %%%%%: 4632-block  0
    %%%%%: 4632-block  1
    %%%%%: 4632-block  2
    %%%%%: 4632-block  3
        -: 4633:
    #####: 4634:  bool comma = false;
    #####: 4635:  for (int i = 0; i < test_suite.total_test_count(); ++i) {
    %%%%%: 4635-block  0
    %%%%%: 4635-block  1
    %%%%%: 4635-block  2
    #####: 4636:    if (test_suite.GetTestInfo(i)->is_reportable()) {
    %%%%%: 4636-block  0
    %%%%%: 4636-block  1
    #####: 4637:      if (comma) {
    %%%%%: 4637-block  0
    #####: 4638:        *stream << ",\n";
    %%%%%: 4638-block  0
        -: 4639:      } else {
    #####: 4640:        comma = true;
    %%%%%: 4640-block  0
        -: 4641:      }
    #####: 4642:      OutputJsonTestInfo(stream, test_suite.name(), *test_suite.GetTestInfo(i));
    %%%%%: 4642-block  0
    %%%%%: 4642-block  1
        -: 4643:    }
        -: 4644:  }
    #####: 4645:  *stream << "\n" << kIndent << "]\n" << Indent(4) << "}";
    %%%%%: 4645-block  0
    %%%%%: 4645-block  1
    %%%%%: 4645-block  2
    %%%%%: 4645-block  3
    %%%%%: 4645-block  4
    %%%%%: 4645-block  5
    %%%%%: 4645-block  6
    $$$$$: 4645-block  7
    $$$$$: 4645-block  8
    #####: 4646:}
        -: 4647:
        -: 4648:// Prints a JSON summary of unit_test to output stream out.
    #####: 4649:void JsonUnitTestResultPrinter::PrintJsonUnitTest(std::ostream* stream,
        -: 4650:                                                  const UnitTest& unit_test) {
    #####: 4651:  const std::string kTestsuites = "testsuites";
    %%%%%: 4651-block  0
    $$$$$: 4651-block  1
    #####: 4652:  const std::string kIndent = Indent(2);
    %%%%%: 4652-block  0
    $$$$$: 4652-block  1
    #####: 4653:  *stream << "{\n";
    %%%%%: 4653-block  0
        -: 4654:
    #####: 4655:  OutputJsonKey(stream, kTestsuites, "tests", unit_test.reportable_test_count(),
    %%%%%: 4655-block  0
    %%%%%: 4655-block  1
    #####: 4656:                kIndent);
    %%%%%: 4656-block  0
    %%%%%: 4656-block  1
    $$$$$: 4656-block  2
    $$$$$: 4656-block  3
    #####: 4657:  OutputJsonKey(stream, kTestsuites, "failures", unit_test.failed_test_count(),
    %%%%%: 4657-block  0
    #####: 4658:                kIndent);
    %%%%%: 4658-block  0
    %%%%%: 4658-block  1
    $$$$$: 4658-block  2
    $$$$$: 4658-block  3
    #####: 4659:  OutputJsonKey(stream, kTestsuites, "disabled",
    %%%%%: 4659-block  0
    #####: 4660:                unit_test.reportable_disabled_test_count(), kIndent);
    %%%%%: 4660-block  0
    %%%%%: 4660-block  1
    $$$$$: 4660-block  2
    $$$$$: 4660-block  3
    #####: 4661:  OutputJsonKey(stream, kTestsuites, "errors", 0, kIndent);
    %%%%%: 4661-block  0
    %%%%%: 4661-block  1
    $$$$$: 4661-block  2
    $$$$$: 4661-block  3
    #####: 4662:  if (GTEST_FLAG(shuffle)) {
    #####: 4663:    OutputJsonKey(stream, kTestsuites, "random_seed", unit_test.random_seed(),
    %%%%%: 4663-block  0
    %%%%%: 4663-block  1
    #####: 4664:                  kIndent);
    %%%%%: 4664-block  0
    $$$$$: 4664-block  1
    $$$$$: 4664-block  2
        -: 4665:  }
    #####: 4666:  OutputJsonKey(stream, kTestsuites, "timestamp",
    %%%%%: 4666-block  0
    #####: 4667:                FormatEpochTimeInMillisAsRFC3339(unit_test.start_timestamp()),
    %%%%%: 4667-block  0
    $$$$$: 4667-block  1
    $$$$$: 4667-block  2
    #####: 4668:                kIndent);
    %%%%%: 4668-block  0
    %%%%%: 4668-block  1
    $$$$$: 4668-block  2
    $$$$$: 4668-block  3
    #####: 4669:  OutputJsonKey(stream, kTestsuites, "time",
    %%%%%: 4669-block  0
    #####: 4670:                FormatTimeInMillisAsDuration(unit_test.elapsed_time()), kIndent,
    $$$$$: 4670-block  0
    $$$$$: 4670-block  1
    #####: 4671:                false);
    %%%%%: 4671-block  0
    %%%%%: 4671-block  1
    $$$$$: 4671-block  2
    $$$$$: 4671-block  3
        -: 4672:
    #####: 4673:  *stream << TestPropertiesAsJson(unit_test.ad_hoc_test_result(), kIndent)
    %%%%%: 4673-block  0
    $$$$$: 4673-block  1
    $$$$$: 4673-block  2
    #####: 4674:          << ",\n";
    %%%%%: 4674-block  0
    %%%%%: 4674-block  1
        -: 4675:
    #####: 4676:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4676-block  0
    %%%%%: 4676-block  1
    %%%%%: 4676-block  2
    $$$$$: 4676-block  3
    $$$$$: 4676-block  4
    $$$$$: 4676-block  5
    $$$$$: 4676-block  6
    #####: 4677:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
    %%%%%: 4677-block  0
    %%%%%: 4677-block  1
    %%%%%: 4677-block  2
        -: 4678:
    #####: 4679:  bool comma = false;
    #####: 4680:  for (int i = 0; i < unit_test.total_test_suite_count(); ++i) {
    %%%%%: 4680-block  0
    %%%%%: 4680-block  1
    %%%%%: 4680-block  2
    #####: 4681:    if (unit_test.GetTestSuite(i)->reportable_test_count() > 0) {
    %%%%%: 4681-block  0
    %%%%%: 4681-block  1
    %%%%%: 4681-block  2
    #####: 4682:      if (comma) {
    %%%%%: 4682-block  0
    #####: 4683:        *stream << ",\n";
    %%%%%: 4683-block  0
        -: 4684:      } else {
    #####: 4685:        comma = true;
    %%%%%: 4685-block  0
        -: 4686:      }
    #####: 4687:      PrintJsonTestSuite(stream, *unit_test.GetTestSuite(i));
    %%%%%: 4687-block  0
    %%%%%: 4687-block  1
        -: 4688:    }
        -: 4689:  }
        -: 4690:
    #####: 4691:  *stream << "\n" << kIndent << "]\n" << "}\n";
    %%%%%: 4691-block  0
    %%%%%: 4691-block  1
    %%%%%: 4691-block  2
    %%%%%: 4691-block  3
    #####: 4692:}
        -: 4693:
    #####: 4694:void JsonUnitTestResultPrinter::PrintJsonTestList(
        -: 4695:    std::ostream* stream, const std::vector<TestSuite*>& test_suites) {
    #####: 4696:  const std::string kTestsuites = "testsuites";
    %%%%%: 4696-block  0
    $$$$$: 4696-block  1
    #####: 4697:  const std::string kIndent = Indent(2);
    %%%%%: 4697-block  0
    $$$$$: 4697-block  1
    #####: 4698:  *stream << "{\n";
    %%%%%: 4698-block  0
    #####: 4699:  int total_tests = 0;
    #####: 4700:  for (auto test_suite : test_suites) {
    %%%%%: 4700-block  0
    %%%%%: 4700-block  1
    %%%%%: 4700-block  2
    #####: 4701:    total_tests += test_suite->total_test_count();
        -: 4702:  }
    #####: 4703:  OutputJsonKey(stream, kTestsuites, "tests", total_tests, kIndent);
    %%%%%: 4703-block  0
    %%%%%: 4703-block  1
    %%%%%: 4703-block  2
    $$$$$: 4703-block  3
    $$$$$: 4703-block  4
        -: 4704:
    #####: 4705:  OutputJsonKey(stream, kTestsuites, "name", "AllTests", kIndent);
    %%%%%: 4705-block  0
    %%%%%: 4705-block  1
    %%%%%: 4705-block  2
    $$$$$: 4705-block  3
    $$$$$: 4705-block  4
    $$$$$: 4705-block  5
    $$$$$: 4705-block  6
    #####: 4706:  *stream << kIndent << "\"" << kTestsuites << "\": [\n";
    %%%%%: 4706-block  0
    %%%%%: 4706-block  1
    %%%%%: 4706-block  2
        -: 4707:
    #####: 4708:  for (size_t i = 0; i < test_suites.size(); ++i) {
    %%%%%: 4708-block  0
    %%%%%: 4708-block  1
    %%%%%: 4708-block  2
    #####: 4709:    if (i != 0) {
    %%%%%: 4709-block  0
    #####: 4710:      *stream << ",\n";
    %%%%%: 4710-block  0
        -: 4711:    }
    #####: 4712:    PrintJsonTestSuite(stream, *test_suites[i]);
    %%%%%: 4712-block  0
        -: 4713:  }
        -: 4714:
        -: 4715:  *stream << "\n"
        -: 4716:          << kIndent << "]\n"
    #####: 4717:          << "}\n";
    %%%%%: 4717-block  0
    %%%%%: 4717-block  1
    %%%%%: 4717-block  2
    %%%%%: 4717-block  3
    #####: 4718:}
        -: 4719:// Produces a string representing the test properties in a result as
        -: 4720:// a JSON dictionary.
    #####: 4721:std::string JsonUnitTestResultPrinter::TestPropertiesAsJson(
        -: 4722:    const TestResult& result, const std::string& indent) {
    #####: 4723:  Message attributes;
    %%%%%: 4723-block  0
    %%%%%: 4723-block  1
    $$$$$: 4723-block  2
    #####: 4724:  for (int i = 0; i < result.test_property_count(); ++i) {
    %%%%%: 4724-block  0
    %%%%%: 4724-block  1
    #####: 4725:    const TestProperty& property = result.GetTestProperty(i);
    %%%%%: 4725-block  0
    #####: 4726:    attributes << ",\n" << indent << "\"" << property.key() << "\": "
    %%%%%: 4726-block  0
    %%%%%: 4726-block  1
    %%%%%: 4726-block  2
    %%%%%: 4726-block  3
    %%%%%: 4726-block  4
    $$$$$: 4726-block  5
    #####: 4727:               << "\"" << EscapeJson(property.value()) << "\"";
    %%%%%: 4727-block  0
    %%%%%: 4727-block  1
    %%%%%: 4727-block  2
    %%%%%: 4727-block  3
    %%%%%: 4727-block  4
    %%%%%: 4727-block  5
    $$$$$: 4727-block  6
    $$$$$: 4727-block  7
    $$$$$: 4727-block  8
    $$$$$: 4727-block  9
        -: 4728:  }
    #####: 4729:  return attributes.GetString();
    %%%%%: 4729-block  0
    %%%%%: 4729-block  1
        -: 4730:}
        -: 4731:
        -: 4732:// End JsonUnitTestResultPrinter
        -: 4733:
        -: 4734:#if GTEST_CAN_STREAM_RESULTS_
        -: 4735:
        -: 4736:// Checks if str contains '=', '&', '%' or '\n' characters. If yes,
        -: 4737:// replaces them by "%xx" where xx is their hexadecimal value. For
        -: 4738:// example, replaces "=" with "%3D".  This algorithm is O(strlen(str))
        -: 4739:// in both time and space -- important as the input str may contain an
        -: 4740:// arbitrarily long test failure message and stack trace.
        -: 4741:std::string StreamingListener::UrlEncode(const char* str) {
        -: 4742:  std::string result;
        -: 4743:  result.reserve(strlen(str) + 1);
        -: 4744:  for (char ch = *str; ch != '\0'; ch = *++str) {
        -: 4745:    switch (ch) {
        -: 4746:      case '%':
        -: 4747:      case '=':
        -: 4748:      case '&':
        -: 4749:      case '\n':
        -: 4750:        result.append("%" + String::FormatByte(static_cast<unsigned char>(ch)));
        -: 4751:        break;
        -: 4752:      default:
        -: 4753:        result.push_back(ch);
        -: 4754:        break;
        -: 4755:    }
        -: 4756:  }
        -: 4757:  return result;
        -: 4758:}
        -: 4759:
        -: 4760:void StreamingListener::SocketWriter::MakeConnection() {
        -: 4761:  GTEST_CHECK_(sockfd_ == -1)
        -: 4762:      << "MakeConnection() can't be called when there is already a connection.";
        -: 4763:
        -: 4764:  addrinfo hints;
        -: 4765:  memset(&hints, 0, sizeof(hints));
        -: 4766:  hints.ai_family = AF_UNSPEC;    // To allow both IPv4 and IPv6 addresses.
        -: 4767:  hints.ai_socktype = SOCK_STREAM;
        -: 4768:  addrinfo* servinfo = nullptr;
        -: 4769:
        -: 4770:  // Use the getaddrinfo() to get a linked list of IP addresses for
        -: 4771:  // the given host name.
        -: 4772:  const int error_num = getaddrinfo(
        -: 4773:      host_name_.c_str(), port_num_.c_str(), &hints, &servinfo);
        -: 4774:  if (error_num != 0) {
        -: 4775:    GTEST_LOG_(WARNING) << "stream_result_to: getaddrinfo() failed: "
        -: 4776:                        << gai_strerror(error_num);
        -: 4777:  }
        -: 4778:
        -: 4779:  // Loop through all the results and connect to the first we can.
        -: 4780:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != nullptr;
        -: 4781:       cur_addr = cur_addr->ai_next) {
        -: 4782:    sockfd_ = socket(
        -: 4783:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
        -: 4784:    if (sockfd_ != -1) {
        -: 4785:      // Connect the client socket to the server socket.
        -: 4786:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
        -: 4787:        close(sockfd_);
        -: 4788:        sockfd_ = -1;
        -: 4789:      }
        -: 4790:    }
        -: 4791:  }
        -: 4792:
        -: 4793:  freeaddrinfo(servinfo);  // all done with this structure
        -: 4794:
        -: 4795:  if (sockfd_ == -1) {
        -: 4796:    GTEST_LOG_(WARNING) << "stream_result_to: failed to connect to "
        -: 4797:                        << host_name_ << ":" << port_num_;
        -: 4798:  }
        -: 4799:}
        -: 4800:
        -: 4801:// End of class Streaming Listener
        -: 4802:#endif  // GTEST_CAN_STREAM_RESULTS__
        -: 4803:
        -: 4804:// class OsStackTraceGetter
        -: 4805:
        -: 4806:const char* const OsStackTraceGetterInterface::kElidedFramesMarker =
        -: 4807:    "... " GTEST_NAME_ " internal frames ...";
        -: 4808:
    #####: 4809:std::string OsStackTraceGetter::CurrentStackTrace(int max_depth, int skip_count)
        -: 4810:    GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4811:#if GTEST_HAS_ABSL
        -: 4812:  std::string result;
        -: 4813:
        -: 4814:  if (max_depth <= 0) {
        -: 4815:    return result;
        -: 4816:  }
        -: 4817:
        -: 4818:  max_depth = std::min(max_depth, kMaxStackTraceDepth);
        -: 4819:
        -: 4820:  std::vector<void*> raw_stack(max_depth);
        -: 4821:  // Skips the frames requested by the caller, plus this function.
        -: 4822:  const int raw_stack_size =
        -: 4823:      absl::GetStackTrace(&raw_stack[0], max_depth, skip_count + 1);
        -: 4824:
        -: 4825:  void* caller_frame = nullptr;
        -: 4826:  {
        -: 4827:    MutexLock lock(&mutex_);
        -: 4828:    caller_frame = caller_frame_;
        -: 4829:  }
        -: 4830:
        -: 4831:  for (int i = 0; i < raw_stack_size; ++i) {
        -: 4832:    if (raw_stack[i] == caller_frame &&
        -: 4833:        !GTEST_FLAG(show_internal_stack_frames)) {
        -: 4834:      // Add a marker to the trace and stop adding frames.
        -: 4835:      absl::StrAppend(&result, kElidedFramesMarker, "\n");
        -: 4836:      break;
        -: 4837:    }
        -: 4838:
        -: 4839:    char tmp[1024];
        -: 4840:    const char* symbol = "(unknown)";
        -: 4841:    if (absl::Symbolize(raw_stack[i], tmp, sizeof(tmp))) {
        -: 4842:      symbol = tmp;
        -: 4843:    }
        -: 4844:
        -: 4845:    char line[1024];
        -: 4846:    snprintf(line, sizeof(line), "  %p: %s\n", raw_stack[i], symbol);
        -: 4847:    result += line;
        -: 4848:  }
        -: 4849:
        -: 4850:  return result;
        -: 4851:
        -: 4852:#else  // !GTEST_HAS_ABSL
        -: 4853:  static_cast<void>(max_depth);
        -: 4854:  static_cast<void>(skip_count);
    #####: 4855:  return "";
    %%%%%: 4855-block  0
    %%%%%: 4855-block  1
        -: 4856:#endif  // GTEST_HAS_ABSL
        -: 4857:}
        -: 4858:
       62: 4859:void OsStackTraceGetter::UponLeavingGTest() GTEST_LOCK_EXCLUDED_(mutex_) {
        -: 4860:#if GTEST_HAS_ABSL
        -: 4861:  void* caller_frame = nullptr;
        -: 4862:  if (absl::GetStackTrace(&caller_frame, 1, 3) <= 0) {
        -: 4863:    caller_frame = nullptr;
        -: 4864:  }
        -: 4865:
        -: 4866:  MutexLock lock(&mutex_);
        -: 4867:  caller_frame_ = caller_frame;
        -: 4868:#endif  // GTEST_HAS_ABSL
       62: 4869:}
        -: 4870:
        -: 4871:// A helper class that creates the premature-exit file in its
        -: 4872:// constructor and deletes the file in its destructor.
        -: 4873:class ScopedPrematureExitFile {
        -: 4874: public:
        1: 4875:  explicit ScopedPrematureExitFile(const char* premature_exit_filepath)
        1: 4876:      : premature_exit_filepath_(premature_exit_filepath ?
       1*: 4877:                                 premature_exit_filepath : "") {
        1: 4877-block  0
    %%%%%: 4877-block  1
        1: 4877-block  2
        1: 4877-block  3
    $$$$$: 4877-block  4
        -: 4878:    // If a path to the premature-exit file is specified...
        1: 4879:    if (!premature_exit_filepath_.empty()) {
        -: 4880:      // create the file with a single "0" character in it.  I/O
        -: 4881:      // errors are ignored as there's nothing better we can do and we
        -: 4882:      // don't want to fail the test because of this.
    #####: 4883:      FILE* pfile = posix::FOpen(premature_exit_filepath, "w");
    %%%%%: 4883-block  0
    #####: 4884:      fwrite("0", 1, 1, pfile);
    %%%%%: 4884-block  0
    #####: 4885:      fclose(pfile);
    %%%%%: 4885-block  0
        -: 4886:    }
        1: 4887:  }
        1: 4887-block  0
        -: 4888:
        1: 4889:  ~ScopedPrematureExitFile() {
        1: 4889-block  0
        -: 4890:#if !defined GTEST_OS_ESP8266
        1: 4891:    if (!premature_exit_filepath_.empty()) {
        1: 4891-block  0
    #####: 4892:      int retval = remove(premature_exit_filepath_.c_str());
    %%%%%: 4892-block  0
    #####: 4893:      if (retval) {
    #####: 4894:        GTEST_LOG_(ERROR) << "Failed to remove premature exit filepath \""
    %%%%%: 4894-block  0
    #####: 4895:                          << premature_exit_filepath_ << "\" with error "
    #####: 4896:                          << retval;
        -: 4897:      }
        -: 4898:    }
        -: 4899:#endif
        1: 4900:  }
        -: 4901:
        -: 4902: private:
        -: 4903:  const std::string premature_exit_filepath_;
        -: 4904:
        -: 4905:  GTEST_DISALLOW_COPY_AND_ASSIGN_(ScopedPrematureExitFile);
        -: 4906:};
        -: 4907:
        -: 4908:}  // namespace internal
        -: 4909:
        -: 4910:// class TestEventListeners
        -: 4911:
        1: 4912:TestEventListeners::TestEventListeners()
        1: 4913:    : repeater_(new internal::TestEventRepeater()),
        1: 4913-block  0
        -: 4914:      default_result_printer_(nullptr),
        1: 4915:      default_xml_generator_(nullptr) {}
        -: 4916:
    #####: 4917:TestEventListeners::~TestEventListeners() { delete repeater_; }
    %%%%%: 4917-block  0
    %%%%%: 4917-block  1
        -: 4918:
        -: 4919:// Returns the standard listener responsible for the default console
        -: 4920:// output.  Can be removed from the listeners list to shut down default
        -: 4921:// console output.  Note that removing this object from the listener list
        -: 4922:// with Release transfers its ownership to the user.
        1: 4923:void TestEventListeners::Append(TestEventListener* listener) {
        1: 4924:  repeater_->Append(listener);
        1: 4924-block  0
        1: 4925:}
        -: 4926:
        -: 4927:// Removes the given event listener from the list and returns it.  It then
        -: 4928:// becomes the caller's responsibility to delete the listener. Returns
        -: 4929:// NULL if the listener is not found in the list.
        1: 4930:TestEventListener* TestEventListeners::Release(TestEventListener* listener) {
        1: 4931:  if (listener == default_result_printer_)
        1: 4931-block  0
        1: 4932:    default_result_printer_ = nullptr;
        1: 4932-block  0
    #####: 4933:  else if (listener == default_xml_generator_)
    %%%%%: 4933-block  0
    #####: 4934:    default_xml_generator_ = nullptr;
    %%%%%: 4934-block  0
        1: 4935:  return repeater_->Release(listener);
        1: 4935-block  0
        -: 4936:}
        -: 4937:
        -: 4938:// Returns repeater that broadcasts the TestEventListener events to all
        -: 4939:// subscribers.
       14: 4940:TestEventListener* TestEventListeners::repeater() { return repeater_; }
       14: 4940-block  0
        -: 4941:
        -: 4942:// Sets the default_result_printer attribute to the provided listener.
        -: 4943:// The listener is also added to the listener list and previous
        -: 4944:// default_result_printer is removed from it and deleted. The listener can
        -: 4945:// also be NULL in which case it will not be added to the list. Does
        -: 4946:// nothing if the previous and the current listener objects are the same.
        1: 4947:void TestEventListeners::SetDefaultResultPrinter(TestEventListener* listener) {
        1: 4948:  if (default_result_printer_ != listener) {
        1: 4948-block  0
        -: 4949:    // It is an error to pass this method a listener that is already in the
        -: 4950:    // list.
       1*: 4951:    delete Release(default_result_printer_);
        1: 4951-block  0
    %%%%%: 4951-block  1
        1: 4952:    default_result_printer_ = listener;
        1: 4953:    if (listener != nullptr) Append(listener);
        1: 4953-block  0
        1: 4953-block  1
        -: 4954:  }
        1: 4955:}
        -: 4956:
        -: 4957:// Sets the default_xml_generator attribute to the provided listener.  The
        -: 4958:// listener is also added to the listener list and previous
        -: 4959:// default_xml_generator is removed from it and deleted. The listener can
        -: 4960:// also be NULL in which case it will not be added to the list. Does
        -: 4961:// nothing if the previous and the current listener objects are the same.
    #####: 4962:void TestEventListeners::SetDefaultXmlGenerator(TestEventListener* listener) {
    #####: 4963:  if (default_xml_generator_ != listener) {
    %%%%%: 4963-block  0
        -: 4964:    // It is an error to pass this method a listener that is already in the
        -: 4965:    // list.
    #####: 4966:    delete Release(default_xml_generator_);
    %%%%%: 4966-block  0
    %%%%%: 4966-block  1
    #####: 4967:    default_xml_generator_ = listener;
    #####: 4968:    if (listener != nullptr) Append(listener);
    %%%%%: 4968-block  0
    %%%%%: 4968-block  1
        -: 4969:  }
    #####: 4970:}
        -: 4971:
        -: 4972:// Controls whether events will be forwarded by the repeater to the
        -: 4973:// listeners in the list.
    #####: 4974:bool TestEventListeners::EventForwardingEnabled() const {
    #####: 4975:  return repeater_->forwarding_enabled();
    %%%%%: 4975-block  0
        -: 4976:}
        -: 4977:
    #####: 4978:void TestEventListeners::SuppressEventForwarding() {
    #####: 4979:  repeater_->set_forwarding_enabled(false);
    %%%%%: 4979-block  0
    #####: 4980:}
        -: 4981:
        -: 4982:// class UnitTest
        -: 4983:
        -: 4984:// Gets the singleton UnitTest object.  The first time this method is
        -: 4985:// called, a UnitTest object is constructed and returned.  Consecutive
        -: 4986:// calls will return the same object.
        -: 4987://
        -: 4988:// We don't protect this under mutex_ as a user is not supposed to
        -: 4989:// call this before main() starts, from which point on the return
        -: 4990:// value will never change.
      178: 4991:UnitTest* UnitTest::GetInstance() {
        -: 4992:  // CodeGear C++Builder insists on a public destructor for the
        -: 4993:  // default implementation.  Use this implementation to keep good OO
        -: 4994:  // design with private destructor.
        -: 4995:
        -: 4996:#if defined(__BORLANDC__)
        -: 4997:  static UnitTest* const instance = new UnitTest;
        -: 4998:  return instance;
        -: 4999:#else
      178: 5000:  static UnitTest instance;
      178: 5000-block  0
        1: 5000-block  1
        1: 5000-block  2
        1: 5000-block  3
    $$$$$: 5000-block  4
    $$$$$: 5000-block  5
      178: 5001:  return &instance;
      178: 5001-block  0
      178: 5001-block  1
        -: 5002:#endif  // defined(__BORLANDC__)
        -: 5003:}
        -: 5004:
        -: 5005:// Gets the number of successful test suites.
    #####: 5006:int UnitTest::successful_test_suite_count() const {
    #####: 5007:  return impl()->successful_test_suite_count();
    %%%%%: 5007-block  0
        -: 5008:}
        -: 5009:
        -: 5010:// Gets the number of failed test suites.
    #####: 5011:int UnitTest::failed_test_suite_count() const {
    #####: 5012:  return impl()->failed_test_suite_count();
    %%%%%: 5012-block  0
        -: 5013:}
        -: 5014:
        -: 5015:// Gets the number of all test suites.
    #####: 5016:int UnitTest::total_test_suite_count() const {
    #####: 5017:  return impl()->total_test_suite_count();
    %%%%%: 5017-block  0
        -: 5018:}
        -: 5019:
        -: 5020:// Gets the number of all test suites that contain at least one test
        -: 5021:// that should run.
        2: 5022:int UnitTest::test_suite_to_run_count() const {
        2: 5023:  return impl()->test_suite_to_run_count();
        2: 5023-block  0
        -: 5024:}
        -: 5025:
        -: 5026://  Legacy API is deprecated but still available
        -: 5027:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 5028:int UnitTest::successful_test_case_count() const {
    #####: 5029:  return impl()->successful_test_suite_count();
    %%%%%: 5029-block  0
        -: 5030:}
    #####: 5031:int UnitTest::failed_test_case_count() const {
    #####: 5032:  return impl()->failed_test_suite_count();
    %%%%%: 5032-block  0
        -: 5033:}
    #####: 5034:int UnitTest::total_test_case_count() const {
    #####: 5035:  return impl()->total_test_suite_count();
    %%%%%: 5035-block  0
        -: 5036:}
    #####: 5037:int UnitTest::test_case_to_run_count() const {
    #####: 5038:  return impl()->test_suite_to_run_count();
    %%%%%: 5038-block  0
        -: 5039:}
        -: 5040:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5041:
        -: 5042:// Gets the number of successful tests.
        1: 5043:int UnitTest::successful_test_count() const {
        1: 5044:  return impl()->successful_test_count();
        1: 5044-block  0
        -: 5045:}
        -: 5046:
        -: 5047:// Gets the number of skipped tests.
        1: 5048:int UnitTest::skipped_test_count() const {
        1: 5049:  return impl()->skipped_test_count();
        1: 5049-block  0
        -: 5050:}
        -: 5051:
        -: 5052:// Gets the number of failed tests.
    #####: 5053:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
    %%%%%: 5053-block  0
        -: 5054:
        -: 5055:// Gets the number of disabled tests that will be reported in the XML report.
        1: 5056:int UnitTest::reportable_disabled_test_count() const {
        1: 5057:  return impl()->reportable_disabled_test_count();
        1: 5057-block  0
        -: 5058:}
        -: 5059:
        -: 5060:// Gets the number of disabled tests.
    #####: 5061:int UnitTest::disabled_test_count() const {
    #####: 5062:  return impl()->disabled_test_count();
    %%%%%: 5062-block  0
        -: 5063:}
        -: 5064:
        -: 5065:// Gets the number of tests to be printed in the XML report.
    #####: 5066:int UnitTest::reportable_test_count() const {
    #####: 5067:  return impl()->reportable_test_count();
    %%%%%: 5067-block  0
        -: 5068:}
        -: 5069:
        -: 5070:// Gets the number of all tests.
    #####: 5071:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
    %%%%%: 5071-block  0
        -: 5072:
        -: 5073:// Gets the number of tests that should run.
        2: 5074:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
        2: 5074-block  0
        -: 5075:
        -: 5076:// Gets the time of the test program start, in ms from the start of the
        -: 5077:// UNIX epoch.
    #####: 5078:internal::TimeInMillis UnitTest::start_timestamp() const {
    #####: 5079:    return impl()->start_timestamp();
    %%%%%: 5079-block  0
        -: 5080:}
        -: 5081:
        -: 5082:// Gets the elapsed time, in milliseconds.
        1: 5083:internal::TimeInMillis UnitTest::elapsed_time() const {
        1: 5084:  return impl()->elapsed_time();
        1: 5084-block  0
        -: 5085:}
        -: 5086:
        -: 5087:// Returns true if and only if the unit test passed (i.e. all test suites
        -: 5088:// passed).
        1: 5089:bool UnitTest::Passed() const { return impl()->Passed(); }
        1: 5089-block  0
        -: 5090:
        -: 5091:// Returns true if and only if the unit test failed (i.e. some test suite
        -: 5092:// failed or something outside of all tests failed).
    #####: 5093:bool UnitTest::Failed() const { return impl()->Failed(); }
    %%%%%: 5093-block  0
        -: 5094:
        -: 5095:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5096:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
    #####: 5097:const TestSuite* UnitTest::GetTestSuite(int i) const {
    #####: 5098:  return impl()->GetTestSuite(i);
    %%%%%: 5098-block  0
        -: 5099:}
        -: 5100:
        -: 5101://  Legacy API is deprecated but still available
        -: 5102:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 5103:const TestCase* UnitTest::GetTestCase(int i) const {
    #####: 5104:  return impl()->GetTestCase(i);
    %%%%%: 5104-block  0
        -: 5105:}
        -: 5106:#endif  //  GTEST_REMOVE_LEGACY_TEST_CASEAPI_
        -: 5107:
        -: 5108:// Returns the TestResult containing information on test failures and
        -: 5109:// properties logged outside of individual test suites.
    #####: 5110:const TestResult& UnitTest::ad_hoc_test_result() const {
    #####: 5111:  return *impl()->ad_hoc_test_result();
    %%%%%: 5111-block  0
        -: 5112:}
        -: 5113:
        -: 5114:// Gets the i-th test suite among all the test suites. i can range from 0 to
        -: 5115:// total_test_suite_count() - 1. If i is not in that range, returns NULL.
    #####: 5116:TestSuite* UnitTest::GetMutableTestSuite(int i) {
    #####: 5117:  return impl()->GetMutableSuiteCase(i);
    %%%%%: 5117-block  0
        -: 5118:}
        -: 5119:
        -: 5120:// Returns the list of event listeners that can be used to track events
        -: 5121:// inside Google Test.
       13: 5122:TestEventListeners& UnitTest::listeners() {
       13: 5123:  return *impl()->listeners();
       13: 5123-block  0
        -: 5124:}
        -: 5125:
        -: 5126:// Registers and returns a global test environment.  When a test
        -: 5127:// program is run, all global test environments will be set-up in the
        -: 5128:// order they were registered.  After all tests in the program have
        -: 5129:// finished, all global test environments will be torn-down in the
        -: 5130:// *reverse* order they were registered.
        -: 5131://
        -: 5132:// The UnitTest object takes ownership of the given environment.
        -: 5133://
        -: 5134:// We don't protect this under mutex_, as we only support calling it
        -: 5135:// from the main thread.
    #####: 5136:Environment* UnitTest::AddEnvironment(Environment* env) {
    #####: 5137:  if (env == nullptr) {
    %%%%%: 5137-block  0
    #####: 5138:    return nullptr;
    %%%%%: 5138-block  0
        -: 5139:  }
        -: 5140:
    #####: 5141:  impl_->environments().push_back(env);
    %%%%%: 5141-block  0
    #####: 5142:  return env;
        -: 5143:}
        -: 5144:
        -: 5145:// Adds a TestPartResult to the current TestResult object.  All Google Test
        -: 5146:// assertion macros (e.g. ASSERT_TRUE, EXPECT_EQ, etc) eventually call
        -: 5147:// this to report their results.  The user code should use the
        -: 5148:// assertion macros instead of calling this directly.
    #####: 5149:void UnitTest::AddTestPartResult(
        -: 5150:    TestPartResult::Type result_type,
        -: 5151:    const char* file_name,
        -: 5152:    int line_number,
        -: 5153:    const std::string& message,
        -: 5154:    const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5155:  Message msg;
    %%%%%: 5155-block  0
    $$$$$: 5155-block  1
    #####: 5156:  msg << message;
    %%%%%: 5156-block  0
        -: 5157:
    #####: 5158:  internal::MutexLock lock(&mutex_);
    %%%%%: 5158-block  0
    $$$$$: 5158-block  1
    #####: 5159:  if (impl_->gtest_trace_stack().size() > 0) {
    %%%%%: 5159-block  0
    %%%%%: 5159-block  1
    #####: 5160:    msg << "\n" << GTEST_NAME_ << " trace:";
    %%%%%: 5160-block  0
    %%%%%: 5160-block  1
    %%%%%: 5160-block  2
        -: 5161:
    #####: 5162:    for (size_t i = impl_->gtest_trace_stack().size(); i > 0; --i) {
    %%%%%: 5162-block  0
    %%%%%: 5162-block  1
    %%%%%: 5162-block  2
    #####: 5163:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
    %%%%%: 5163-block  0
    %%%%%: 5163-block  1
    #####: 5164:      msg << "\n" << internal::FormatFileLocation(trace.file, trace.line)
    %%%%%: 5164-block  0
    %%%%%: 5164-block  1
    %%%%%: 5164-block  2
    $$$$$: 5164-block  3
    $$$$$: 5164-block  4
    #####: 5165:          << " " << trace.message;
    %%%%%: 5165-block  0
    %%%%%: 5165-block  1
        -: 5166:    }
        -: 5167:  }
        -: 5168:
    #####: 5169:  if (os_stack_trace.c_str() != nullptr && !os_stack_trace.empty()) {
    %%%%%: 5169-block  0
    %%%%%: 5169-block  1
    %%%%%: 5169-block  2
    %%%%%: 5169-block  3
    %%%%%: 5169-block  4
    #####: 5170:    msg << internal::kStackTraceMarker << os_stack_trace;
    %%%%%: 5170-block  0
    %%%%%: 5170-block  1
        -: 5171:  }
        -: 5172:
        -: 5173:  const TestPartResult result = TestPartResult(
    #####: 5174:      result_type, file_name, line_number, msg.GetString().c_str());
    %%%%%: 5174-block  0
    %%%%%: 5174-block  1
    %%%%%: 5174-block  2
    $$$$$: 5174-block  3
    $$$$$: 5174-block  4
    #####: 5175:  impl_->GetTestPartResultReporterForCurrentThread()->
    #####: 5176:      ReportTestPartResult(result);
    %%%%%: 5176-block  0
        -: 5177:
    #####: 5178:  if (result_type != TestPartResult::kSuccess &&
    %%%%%: 5178-block  0
    %%%%%: 5178-block  1
        -: 5179:      result_type != TestPartResult::kSkip) {
        -: 5180:    // gtest_break_on_failure takes precedence over
        -: 5181:    // gtest_throw_on_failure.  This allows a user to set the latter
        -: 5182:    // in the code (perhaps in order to use Google Test assertions
        -: 5183:    // with another testing framework) and specify the former on the
        -: 5184:    // command line for debugging.
    #####: 5185:    if (GTEST_FLAG(break_on_failure)) {
    %%%%%: 5185-block  0
        -: 5186:#if GTEST_OS_WINDOWS && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5187:      // Using DebugBreak on Windows allows gtest to still break into a debugger
        -: 5188:      // when a failure happens and both the --gtest_break_on_failure and
        -: 5189:      // the --gtest_catch_exceptions flags are specified.
        -: 5190:      DebugBreak();
        -: 5191:#elif (!defined(__native_client__)) &&            \
        -: 5192:    ((defined(__clang__) || defined(__GNUC__)) && \
        -: 5193:     (defined(__x86_64__) || defined(__i386__)))
        -: 5194:      // with clang/gcc we can achieve the same effect on x86 by invoking int3
    #####: 5195:      asm("int3");
    %%%%%: 5195-block  0
        -: 5196:#else
        -: 5197:      // Dereference nullptr through a volatile pointer to prevent the compiler
        -: 5198:      // from removing. We use this rather than abort() or __builtin_trap() for
        -: 5199:      // portability: some debuggers don't correctly trap abort().
        -: 5200:      *static_cast<volatile int*>(nullptr) = 1;
        -: 5201:#endif  // GTEST_OS_WINDOWS
    #####: 5202:    } else if (GTEST_FLAG(throw_on_failure)) {
    %%%%%: 5202-block  0
        -: 5203:#if GTEST_HAS_EXCEPTIONS
    #####: 5204:      throw internal::GoogleTestFailureException(result);
    %%%%%: 5204-block  0
    %%%%%: 5204-block  1
    $$$$$: 5204-block  2
        -: 5205:#else
        -: 5206:      // We cannot call abort() as it generates a pop-up in debug mode
        -: 5207:      // that cannot be suppressed in VC 7.1 or below.
        -: 5208:      exit(1);
        -: 5209:#endif
        -: 5210:    }
        -: 5211:  }
    #####: 5212:}
        -: 5213:
        -: 5214:// Adds a TestProperty to the current TestResult object when invoked from
        -: 5215:// inside a test, to current TestSuite's ad_hoc_test_result_ when invoked
        -: 5216:// from SetUpTestSuite or TearDownTestSuite, or to the global property set
        -: 5217:// when invoked elsewhere.  If the result already contains a property with
        -: 5218:// the same key, the value will be updated.
    #####: 5219:void UnitTest::RecordProperty(const std::string& key,
        -: 5220:                              const std::string& value) {
    #####: 5221:  impl_->RecordProperty(TestProperty(key, value));
    %%%%%: 5221-block  0
    %%%%%: 5221-block  1
    $$$$$: 5221-block  2
    #####: 5222:}
        -: 5223:
        -: 5224:// Runs all tests in this UnitTest object and prints the result.
        -: 5225:// Returns 0 if successful, or 1 otherwise.
        -: 5226://
        -: 5227:// We don't protect this under mutex_, as we only support calling it
        -: 5228:// from the main thread.
        1: 5229:int UnitTest::Run() {
        -: 5230:  const bool in_death_test_child_process =
        1: 5231:      internal::GTEST_FLAG(internal_run_death_test).length() > 0;
        1: 5231-block  0
        -: 5232:
        -: 5233:  // Google Test implements this protocol for catching that a test
        -: 5234:  // program exits before returning control to Google Test:
        -: 5235:  //
        -: 5236:  //   1. Upon start, Google Test creates a file whose absolute path
        -: 5237:  //      is specified by the environment variable
        -: 5238:  //      TEST_PREMATURE_EXIT_FILE.
        -: 5239:  //   2. When Google Test has finished its work, it deletes the file.
        -: 5240:  //
        -: 5241:  // This allows a test runner to set TEST_PREMATURE_EXIT_FILE before
        -: 5242:  // running a Google-Test-based test program and check the existence
        -: 5243:  // of the file at the end of the test execution to see if it has
        -: 5244:  // exited prematurely.
        -: 5245:
        -: 5246:  // If we are in the child process of a death test, don't
        -: 5247:  // create/delete the premature exit file, as doing so is unnecessary
        -: 5248:  // and will confuse the parent process.  Otherwise, create/delete
        -: 5249:  // the file upon entering/leaving this function.  If the program
        -: 5250:  // somehow exits before this function has a chance to return, the
        -: 5251:  // premature-exit file will be left undeleted, causing a test runner
        -: 5252:  // that understands the premature-exit-file protocol to report the
        -: 5253:  // test as having failed.
        -: 5254:  const internal::ScopedPrematureExitFile premature_exit_file(
        -: 5255:      in_death_test_child_process
        -: 5256:          ? nullptr
       1*: 5257:          : internal::posix::GetEnv("TEST_PREMATURE_EXIT_FILE"));
    %%%%%: 5257-block  0
        1: 5257-block  1
        1: 5257-block  2
    $$$$$: 5257-block  3
        -: 5258:
        -: 5259:  // Captures the value of GTEST_FLAG(catch_exceptions).  This value will be
        -: 5260:  // used for the duration of the program.
        1: 5261:  impl()->set_catch_exceptions(GTEST_FLAG(catch_exceptions));
        1: 5261-block  0
        -: 5262:
        -: 5263:#if GTEST_OS_WINDOWS
        -: 5264:  // Either the user wants Google Test to catch exceptions thrown by the
        -: 5265:  // tests or this is executing in the context of death test child
        -: 5266:  // process. In either case the user does not want to see pop-up dialogs
        -: 5267:  // about crashes - they are expected.
        -: 5268:  if (impl()->catch_exceptions() || in_death_test_child_process) {
        -: 5269:# if !GTEST_OS_WINDOWS_MOBILE && !GTEST_OS_WINDOWS_PHONE && !GTEST_OS_WINDOWS_RT
        -: 5270:    // SetErrorMode doesn't exist on CE.
        -: 5271:    SetErrorMode(SEM_FAILCRITICALERRORS | SEM_NOALIGNMENTFAULTEXCEPT |
        -: 5272:                 SEM_NOGPFAULTERRORBOX | SEM_NOOPENFILEERRORBOX);
        -: 5273:# endif  // !GTEST_OS_WINDOWS_MOBILE
        -: 5274:
        -: 5275:# if (defined(_MSC_VER) || GTEST_OS_WINDOWS_MINGW) && !GTEST_OS_WINDOWS_MOBILE
        -: 5276:    // Death test children can be terminated with _abort().  On Windows,
        -: 5277:    // _abort() can show a dialog with a warning message.  This forces the
        -: 5278:    // abort message to go to stderr instead.
        -: 5279:    _set_error_mode(_OUT_TO_STDERR);
        -: 5280:# endif
        -: 5281:
        -: 5282:# if defined(_MSC_VER) && !GTEST_OS_WINDOWS_MOBILE
        -: 5283:    // In the debug version, Visual Studio pops up a separate dialog
        -: 5284:    // offering a choice to debug the aborted program. We need to suppress
        -: 5285:    // this dialog or it will pop up for every EXPECT/ASSERT_DEATH statement
        -: 5286:    // executed. Google Test will notify the user of any unexpected
        -: 5287:    // failure via stderr.
        -: 5288:    if (!GTEST_FLAG(break_on_failure))
        -: 5289:      _set_abort_behavior(
        -: 5290:          0x0,                                    // Clear the following flags:
        -: 5291:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
        -: 5292:
        -: 5293:    // In debug mode, the Windows CRT can crash with an assertion over invalid
        -: 5294:    // input (e.g. passing an invalid file descriptor).  The default handling
        -: 5295:    // for these assertions is to pop up a dialog and wait for user input.
        -: 5296:    // Instead ask the CRT to dump such assertions to stderr non-interactively.
        -: 5297:    if (!IsDebuggerPresent()) {
        -: 5298:      (void)_CrtSetReportMode(_CRT_ASSERT,
        -: 5299:                              _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);
        -: 5300:      (void)_CrtSetReportFile(_CRT_ASSERT, _CRTDBG_FILE_STDERR);
        -: 5301:    }
        -: 5302:# endif
        -: 5303:  }
        -: 5304:#endif  // GTEST_OS_WINDOWS
        -: 5305:
        1: 5306:  return internal::HandleExceptionsInMethodIfSupported(
        -: 5307:      impl(),
        -: 5308:      &internal::UnitTestImpl::RunAllTests,
       2*: 5309:      "auxiliary test code (environments or event listeners)") ? 0 : 1;
        1: 5309-block  0
        1: 5309-block  1
    %%%%%: 5309-block  2
        1: 5309-block  3
        1: 5309-block  4
        -: 5310:}
        -: 5311:
        -: 5312:// Returns the working directory when the first TEST() or TEST_F() was
        -: 5313:// executed.
    #####: 5314:const char* UnitTest::original_working_dir() const {
    #####: 5315:  return impl_->original_working_dir_.c_str();
    %%%%%: 5315-block  0
        -: 5316:}
        -: 5317:
        -: 5318:// Returns the TestSuite object for the test that's currently running,
        -: 5319:// or NULL if no test is running.
    #####: 5320:const TestSuite* UnitTest::current_test_suite() const
        -: 5321:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5322:  internal::MutexLock lock(&mutex_);
    %%%%%: 5322-block  0
    #####: 5323:  return impl_->current_test_suite();
    %%%%%: 5323-block  0
    %%%%%: 5323-block  1
        -: 5324:}
        -: 5325:
        -: 5326:// Legacy API is still available but deprecated
        -: 5327:#ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_
    #####: 5328:const TestCase* UnitTest::current_test_case() const
        -: 5329:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5330:  internal::MutexLock lock(&mutex_);
    %%%%%: 5330-block  0
    #####: 5331:  return impl_->current_test_suite();
    %%%%%: 5331-block  0
    %%%%%: 5331-block  1
        -: 5332:}
        -: 5333:#endif
        -: 5334:
        -: 5335:// Returns the TestInfo object for the test that's currently running,
        -: 5336:// or NULL if no test is running.
    #####: 5337:const TestInfo* UnitTest::current_test_info() const
        -: 5338:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5339:  internal::MutexLock lock(&mutex_);
    %%%%%: 5339-block  0
    #####: 5340:  return impl_->current_test_info();
    %%%%%: 5340-block  0
    %%%%%: 5340-block  1
        -: 5341:}
        -: 5342:
        -: 5343:// Returns the random seed used at the start of the current test run.
    #####: 5344:int UnitTest::random_seed() const { return impl_->random_seed(); }
    %%%%%: 5344-block  0
        -: 5345:
        -: 5346:// Returns ParameterizedTestSuiteRegistry object used to keep track of
        -: 5347:// value-parameterized tests and instantiate and register them.
        -: 5348:internal::ParameterizedTestSuiteRegistry&
    #####: 5349:UnitTest::parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5350:  return impl_->parameterized_test_registry();
    %%%%%: 5350-block  0
        -: 5351:}
        -: 5352:
        -: 5353:// Creates an empty UnitTest.
        1: 5354:UnitTest::UnitTest() {
        1: 5354-block  0
    $$$$$: 5354-block  1
        1: 5355:  impl_ = new internal::UnitTestImpl(this);
        1: 5355-block  0
    $$$$$: 5355-block  1
        1: 5356:}
        1: 5356-block  0
        -: 5357:
        -: 5358:// Destructor of UnitTest.
    #####: 5359:UnitTest::~UnitTest() {
    #####: 5360:  delete impl_;
    #####: 5361:}
------------------
_ZN7testing8UnitTestD0Ev:
    #####: 5359:UnitTest::~UnitTest() {
        -: 5360:  delete impl_;
    #####: 5361:}
    %%%%%: 5361-block  0
------------------
_ZN7testing8UnitTestD2Ev:
    #####: 5359:UnitTest::~UnitTest() {
    %%%%%: 5359-block  0
    #####: 5360:  delete impl_;
    %%%%%: 5360-block  0
    %%%%%: 5360-block  1
    #####: 5361:}
------------------
        -: 5362:
        -: 5363:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
        -: 5364:// Google Test trace stack.
    #####: 5365:void UnitTest::PushGTestTrace(const internal::TraceInfo& trace)
        -: 5366:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5367:  internal::MutexLock lock(&mutex_);
    %%%%%: 5367-block  0
    %%%%%: 5367-block  1
    $$$$$: 5367-block  2
    #####: 5368:  impl_->gtest_trace_stack().push_back(trace);
    %%%%%: 5368-block  0
    %%%%%: 5368-block  1
    #####: 5369:}
        -: 5370:
        -: 5371:// Pops a trace from the per-thread Google Test trace stack.
    #####: 5372:void UnitTest::PopGTestTrace()
        -: 5373:    GTEST_LOCK_EXCLUDED_(mutex_) {
    #####: 5374:  internal::MutexLock lock(&mutex_);
    %%%%%: 5374-block  0
    $$$$$: 5374-block  1
    #####: 5375:  impl_->gtest_trace_stack().pop_back();
    %%%%%: 5375-block  0
    %%%%%: 5375-block  1
    #####: 5376:}
        -: 5377:
        -: 5378:namespace internal {
        -: 5379:
        1: 5380:UnitTestImpl::UnitTestImpl(UnitTest* parent)
        -: 5381:    : parent_(parent),
        -: 5382:      GTEST_DISABLE_MSC_WARNINGS_PUSH_(4355 /* using this in initializer */)
        -: 5383:          default_global_test_part_result_reporter_(this),
        -: 5384:      default_per_thread_test_part_result_reporter_(this),
        -: 5385:      GTEST_DISABLE_MSC_WARNINGS_POP_() global_test_part_result_repoter_(
        -: 5386:          &default_global_test_part_result_reporter_),
        -: 5387:      per_thread_test_part_result_reporter_(
        -: 5388:          &default_per_thread_test_part_result_reporter_),
        -: 5389:      parameterized_test_registry_(),
        -: 5390:      parameterized_tests_registered_(false),
        -: 5391:      last_death_test_suite_(-1),
        -: 5392:      current_test_suite_(nullptr),
        -: 5393:      current_test_info_(nullptr),
        -: 5394:      ad_hoc_test_result_(),
        -: 5395:      os_stack_trace_getter_(nullptr),
        -: 5396:      post_flag_parse_init_performed_(false),
        -: 5397:      random_seed_(0),  // Will be overridden by the flag before first use.
        -: 5398:      random_(0),       // Will be reseeded before first use.
        -: 5399:      start_timestamp_(0),
        -: 5400:      elapsed_time_(0),
        -: 5401:#if GTEST_HAS_DEATH_TEST
        1: 5402:      death_test_factory_(new DefaultDeathTestFactory),
        1: 5402-block  0
        -: 5403:#endif
        -: 5404:      // Will be overridden by the flag before first use.
        2: 5405:      catch_exceptions_(false) {
        1: 5405-block  0
        1: 5405-block  1
        1: 5405-block  2
        1: 5405-block  3
        1: 5405-block  4
    $$$$$: 5405-block  5
    $$$$$: 5405-block  6
    $$$$$: 5405-block  7
    $$$$$: 5405-block  8
    $$$$$: 5405-block  9
    $$$$$: 5405-block 10
    $$$$$: 5405-block 11
    $$$$$: 5405-block 12
    $$$$$: 5405-block 13
    $$$$$: 5405-block 14
    $$$$$: 5405-block 15
    $$$$$: 5405-block 16
    $$$$$: 5405-block 17
    $$$$$: 5405-block 18
    $$$$$: 5405-block 19
    $$$$$: 5405-block 20
    $$$$$: 5405-block 21
        1: 5406:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
        1: 5406-block  0
        1: 5406-block  1
        1: 5407:}
        1: 5407-block  0
        -: 5408:
    #####: 5409:UnitTestImpl::~UnitTestImpl() {
        -: 5410:  // Deletes every TestSuite.
    #####: 5411:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5412:
        -: 5413:  // Deletes every Environment.
    #####: 5414:  ForEach(environments_, internal::Delete<Environment>);
        -: 5415:
    #####: 5416:  delete os_stack_trace_getter_;
    #####: 5417:}
------------------
_ZN7testing8internal12UnitTestImplD0Ev:
    #####: 5409:UnitTestImpl::~UnitTestImpl() {
        -: 5410:  // Deletes every TestSuite.
        -: 5411:  ForEach(test_suites_, internal::Delete<TestSuite>);
        -: 5412:
        -: 5413:  // Deletes every Environment.
        -: 5414:  ForEach(environments_, internal::Delete<Environment>);
        -: 5415:
        -: 5416:  delete os_stack_trace_getter_;
    #####: 5417:}
    %%%%%: 5417-block  0
------------------
_ZN7testing8internal12UnitTestImplD2Ev:
    #####: 5409:UnitTestImpl::~UnitTestImpl() {
    %%%%%: 5409-block  0
        -: 5410:  // Deletes every TestSuite.
    #####: 5411:  ForEach(test_suites_, internal::Delete<TestSuite>);
    %%%%%: 5411-block  0
        -: 5412:
        -: 5413:  // Deletes every Environment.
    #####: 5414:  ForEach(environments_, internal::Delete<Environment>);
        -: 5415:
    #####: 5416:  delete os_stack_trace_getter_;
    %%%%%: 5416-block  0
    #####: 5417:}
------------------
        -: 5418:
        -: 5419:// Adds a TestProperty to the current TestResult object when invoked in a
        -: 5420:// context of a test, to current test suite's ad_hoc_test_result when invoke
        -: 5421:// from SetUpTestSuite/TearDownTestSuite, or to the global property set
        -: 5422:// otherwise.  If the result already contains a property with the same key,
        -: 5423:// the value will be updated.
    #####: 5424:void UnitTestImpl::RecordProperty(const TestProperty& test_property) {
    #####: 5425:  std::string xml_element;
    %%%%%: 5425-block  0
    %%%%%: 5425-block  1
    $$$$$: 5425-block  2
        -: 5426:  TestResult* test_result;  // TestResult appropriate for property recording.
        -: 5427:
    #####: 5428:  if (current_test_info_ != nullptr) {
    #####: 5429:    xml_element = "testcase";
    %%%%%: 5429-block  0
    #####: 5430:    test_result = &(current_test_info_->result_);
    %%%%%: 5430-block  0
    #####: 5431:  } else if (current_test_suite_ != nullptr) {
    %%%%%: 5431-block  0
    #####: 5432:    xml_element = "testsuite";
    %%%%%: 5432-block  0
    #####: 5433:    test_result = &(current_test_suite_->ad_hoc_test_result_);
    %%%%%: 5433-block  0
        -: 5434:  } else {
    #####: 5435:    xml_element = "testsuites";
    %%%%%: 5435-block  0
    #####: 5436:    test_result = &ad_hoc_test_result_;
    %%%%%: 5436-block  0
        -: 5437:  }
    #####: 5438:  test_result->RecordProperty(xml_element, test_property);
    %%%%%: 5438-block  0
    #####: 5439:}
        -: 5440:
        -: 5441:#if GTEST_HAS_DEATH_TEST
        -: 5442:// Disables event forwarding if the control is currently in a death test
        -: 5443:// subprocess. Must not be called before InitGoogleTest.
        1: 5444:void UnitTestImpl::SuppressTestEventsIfInSubprocess() {
        1: 5445:  if (internal_run_death_test_flag_.get() != nullptr)
        1: 5445-block  0
    #####: 5446:    listeners()->SuppressEventForwarding();
    %%%%%: 5446-block  0
        1: 5447:}
        -: 5448:#endif  // GTEST_HAS_DEATH_TEST
        -: 5449:
        -: 5450:// Initializes event listeners performing XML output as specified by
        -: 5451:// UnitTestOptions. Must not be called before InitGoogleTest.
        1: 5452:void UnitTestImpl::ConfigureXmlOutput() {
        2: 5453:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
        1: 5453-block  0
        1: 5453-block  1
    $$$$$: 5453-block  2
        1: 5454:  if (output_format == "xml") {
        1: 5454-block  0
    #####: 5455:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
    %%%%%: 5455-block  0
    %%%%%: 5455-block  1
    #####: 5456:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
    %%%%%: 5456-block  0
    %%%%%: 5456-block  1
    %%%%%: 5456-block  2
    $$$$$: 5456-block  3
    $$$$$: 5456-block  4
    $$$$$: 5456-block  5
        1: 5457:  } else if (output_format == "json") {
        1: 5457-block  0
    #####: 5458:    listeners()->SetDefaultXmlGenerator(new JsonUnitTestResultPrinter(
    %%%%%: 5458-block  0
    %%%%%: 5458-block  1
    #####: 5459:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str()));
    %%%%%: 5459-block  0
    %%%%%: 5459-block  1
    %%%%%: 5459-block  2
    $$$$$: 5459-block  3
    $$$$$: 5459-block  4
    $$$$$: 5459-block  5
        1: 5460:  } else if (output_format != "") {
        1: 5460-block  0
        1: 5460-block  1
    #####: 5461:    GTEST_LOG_(WARNING) << "WARNING: unrecognized output format \""
    %%%%%: 5461-block  0
    %%%%%: 5461-block  1
    %%%%%: 5461-block  2
    $$$$$: 5461-block  3
    $$$$$: 5461-block  4
    #####: 5462:                        << output_format << "\" ignored.";
    %%%%%: 5462-block  0
    %%%%%: 5462-block  1
        -: 5463:  }
        1: 5464:}
        -: 5465:
        -: 5466:#if GTEST_CAN_STREAM_RESULTS_
        -: 5467:// Initializes event listeners for streaming test results in string form.
        -: 5468:// Must not be called before InitGoogleTest.
        -: 5469:void UnitTestImpl::ConfigureStreamingOutput() {
        -: 5470:  const std::string& target = GTEST_FLAG(stream_result_to);
        -: 5471:  if (!target.empty()) {
        -: 5472:    const size_t pos = target.find(':');
        -: 5473:    if (pos != std::string::npos) {
        -: 5474:      listeners()->Append(new StreamingListener(target.substr(0, pos),
        -: 5475:                                                target.substr(pos+1)));
        -: 5476:    } else {
        -: 5477:      GTEST_LOG_(WARNING) << "unrecognized streaming target \"" << target
        -: 5478:                          << "\" ignored.";
        -: 5479:    }
        -: 5480:  }
        -: 5481:}
        -: 5482:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5483:
        -: 5484:// Performs initialization dependent upon flag values obtained in
        -: 5485:// ParseGoogleTestFlagsOnly.  Is called from InitGoogleTest after the call to
        -: 5486:// ParseGoogleTestFlagsOnly.  In case a user neglects to call InitGoogleTest
        -: 5487:// this function is also called from RunAllTests.  Since this function can be
        -: 5488:// called more than once, it has to be idempotent.
        2: 5489:void UnitTestImpl::PostFlagParsingInit() {
        -: 5490:  // Ensures that this function does not execute more than once.
        2: 5491:  if (!post_flag_parse_init_performed_) {
        2: 5491-block  0
        1: 5492:    post_flag_parse_init_performed_ = true;
        -: 5493:
        -: 5494:#if defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5495:    // Register to send notifications about key process state changes.
        -: 5496:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
        -: 5497:#endif  // defined(GTEST_CUSTOM_TEST_EVENT_LISTENER_)
        -: 5498:
        -: 5499:#if GTEST_HAS_DEATH_TEST
        1: 5500:    InitDeathTestSubprocessControlInfo();
        1: 5500-block  0
        1: 5501:    SuppressTestEventsIfInSubprocess();
        -: 5502:#endif  // GTEST_HAS_DEATH_TEST
        -: 5503:
        -: 5504:    // Registers parameterized tests. This makes parameterized tests
        -: 5505:    // available to the UnitTest reflection API without running
        -: 5506:    // RUN_ALL_TESTS.
        1: 5507:    RegisterParameterizedTests();
        -: 5508:
        -: 5509:    // Configures listeners for XML output. This makes it possible for users
        -: 5510:    // to shut down the default XML output before invoking RUN_ALL_TESTS.
        1: 5511:    ConfigureXmlOutput();
        -: 5512:
        1: 5513:    if (GTEST_FLAG(brief)) {
    #####: 5514:      listeners()->SetDefaultResultPrinter(new BriefUnitTestResultPrinter);
    %%%%%: 5514-block  0
        -: 5515:    }
        -: 5516:
        -: 5517:#if GTEST_CAN_STREAM_RESULTS_
        -: 5518:    // Configures listeners for streaming test results to the specified server.
        -: 5519:    ConfigureStreamingOutput();
        -: 5520:#endif  // GTEST_CAN_STREAM_RESULTS_
        -: 5521:
        -: 5522:#if GTEST_HAS_ABSL
        -: 5523:    if (GTEST_FLAG(install_failure_signal_handler)) {
        -: 5524:      absl::FailureSignalHandlerOptions options;
        -: 5525:      absl::InstallFailureSignalHandler(options);
        -: 5526:    }
        -: 5527:#endif  // GTEST_HAS_ABSL
        -: 5528:  }
        2: 5529:}
        -: 5530:
        -: 5531:// A predicate that checks the name of a TestSuite against a known
        -: 5532:// value.
        -: 5533://
        -: 5534:// This is used for implementation of the UnitTest class only.  We put
        -: 5535:// it in the anonymous namespace to prevent polluting the outer
        -: 5536:// namespace.
        -: 5537://
        -: 5538:// TestSuiteNameIs is copyable.
        -: 5539:class TestSuiteNameIs {
        -: 5540: public:
        -: 5541:  // Constructor.
       12: 5542:  explicit TestSuiteNameIs(const std::string& name) : name_(name) {}
       12: 5542-block  0
        -: 5543:
        -: 5544:  // Returns true if and only if the name of test_suite matches name_.
       11: 5545:  bool operator()(const TestSuite* test_suite) const {
      22*: 5546:    return test_suite != nullptr &&
       11: 5546-block  0
       11: 5546-block  1
    %%%%%: 5546-block  2
       22: 5547:           strcmp(test_suite->name(), name_.c_str()) == 0;
       11: 5547-block  0
       11: 5547-block  1
        -: 5548:  }
        -: 5549:
        -: 5550: private:
        -: 5551:  std::string name_;
        -: 5552:};
        -: 5553:
        -: 5554:// Finds and returns a TestSuite with the given name.  If one doesn't
        -: 5555:// exist, creates one and returns it.  It's the CALLER'S
        -: 5556:// RESPONSIBILITY to ensure that this function is only called WHEN THE
        -: 5557:// TESTS ARE NOT SHUFFLED.
        -: 5558://
        -: 5559:// Arguments:
        -: 5560://
        -: 5561://   test_suite_name: name of the test suite
        -: 5562://   type_param:      the name of the test suite's type parameter, or NULL if
        -: 5563://                    this is not a typed or a type-parameterized test suite.
        -: 5564://   set_up_tc:       pointer to the function that sets up the test suite
        -: 5565://   tear_down_tc:    pointer to the function that tears down the test suite
       12: 5566:TestSuite* UnitTestImpl::GetTestSuite(
        -: 5567:    const char* test_suite_name, const char* type_param,
        -: 5568:    internal::SetUpTestSuiteFunc set_up_tc,
        -: 5569:    internal::TearDownTestSuiteFunc tear_down_tc) {
        -: 5570:  // Can we find a TestSuite with the given name?
        -: 5571:  const auto test_suite =
       12: 5572:      std::find_if(test_suites_.rbegin(), test_suites_.rend(),
       12: 5572-block  0
    $$$$$: 5572-block  1
    $$$$$: 5572-block  2
       24: 5573:                   TestSuiteNameIs(test_suite_name));
       12: 5573-block  0
       12: 5573-block  1
       12: 5573-block  2
    $$$$$: 5573-block  3
    $$$$$: 5573-block  4
    $$$$$: 5573-block  5
    $$$$$: 5573-block  6
        -: 5574:
       12: 5575:  if (test_suite != test_suites_.rend()) return *test_suite;
       12: 5575-block  0
       11: 5575-block  1
    $$$$$: 5575-block  2
        -: 5576:
        -: 5577:  // No.  Let's create one.
        -: 5578:  auto* const new_test_suite =
        1: 5579:      new TestSuite(test_suite_name, type_param, set_up_tc, tear_down_tc);
        1: 5579-block  0
        1: 5579-block  1
    $$$$$: 5579-block  2
        -: 5580:
        -: 5581:  // Is this a death test suite?
        2: 5582:  if (internal::UnitTestOptions::MatchesFilter(test_suite_name,
        1: 5582-block  0
        2: 5583:                                               kDeathTestSuiteFilter)) {
        1: 5583-block  0
        1: 5583-block  1
    $$$$$: 5583-block  2
    $$$$$: 5583-block  3
        -: 5584:    // Yes.  Inserts the test suite after the last death test suite
        -: 5585:    // defined so far.  This only works when the test suites haven't
        -: 5586:    // been shuffled.  Otherwise we may end up running a death test
        -: 5587:    // after a non-death test.
    #####: 5588:    ++last_death_test_suite_;
    #####: 5589:    test_suites_.insert(test_suites_.begin() + last_death_test_suite_,
    $$$$$: 5589-block  0
    $$$$$: 5589-block  1
    #####: 5590:                        new_test_suite);
    %%%%%: 5590-block  0
    %%%%%: 5590-block  1
    $$$$$: 5590-block  2
        -: 5591:  } else {
        -: 5592:    // No.  Appends to the end of the list.
        1: 5593:    test_suites_.push_back(new_test_suite);
        1: 5593-block  0
        -: 5594:  }
        -: 5595:
        1: 5596:  test_suite_indices_.push_back(static_cast<int>(test_suite_indices_.size()));
        1: 5596-block  0
    $$$$$: 5596-block  1
        1: 5597:  return new_test_suite;
        1: 5597-block  0
        -: 5598:}
        -: 5599:
        -: 5600:// Helpers for setting up / tearing down the given environment.  They
        -: 5601:// are for use in the ForEach() function.
    #####: 5602:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
    %%%%%: 5602-block  0
    #####: 5603:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
    %%%%%: 5603-block  0
        -: 5604:
        -: 5605:// Runs all tests in this UnitTest object, prints the result, and
        -: 5606:// returns true if all tests are successful.  If any exception is
        -: 5607:// thrown during a test, the test is considered to be failed, but the
        -: 5608:// rest of the tests will still be run.
        -: 5609://
        -: 5610:// When parameterized tests are enabled, it expands and registers
        -: 5611:// parameterized tests first in RegisterParameterizedTests().
        -: 5612:// All other functions called from RunAllTests() may safely assume that
        -: 5613:// parameterized tests are ready to be counted and run.
        1: 5614:bool UnitTestImpl::RunAllTests() {
        -: 5615:  // True if and only if Google Test is initialized before RUN_ALL_TESTS() is
        -: 5616:  // called.
        1: 5617:  const bool gtest_is_initialized_before_run_all_tests = GTestIsInitialized();
        1: 5617-block  0
        -: 5618:
        -: 5619:  // Do not run any test if the --help flag was specified.
        1: 5620:  if (g_help_flag)
    #####: 5621:    return true;
    %%%%%: 5621-block  0
        -: 5622:
        -: 5623:  // Repeats the call to the post-flag parsing initialization in case the
        -: 5624:  // user didn't call InitGoogleTest.
        1: 5625:  PostFlagParsingInit();
        1: 5625-block  0
        -: 5626:
        -: 5627:  // Even if sharding is not on, test runners may want to use the
        -: 5628:  // GTEST_SHARD_STATUS_FILE to query whether the test supports the sharding
        -: 5629:  // protocol.
        1: 5630:  internal::WriteToShardStatusFileIfNeeded();
        -: 5631:
        -: 5632:  // True if and only if we are in a subprocess for running a thread-safe-style
        -: 5633:  // death test.
        1: 5634:  bool in_subprocess_for_death_test = false;
        -: 5635:
        -: 5636:#if GTEST_HAS_DEATH_TEST
        1: 5637:  in_subprocess_for_death_test =
        1: 5638:      (internal_run_death_test_flag_.get() != nullptr);
        -: 5639:# if defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5640:  if (in_subprocess_for_death_test) {
        -: 5641:    GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_();
        -: 5642:  }
        -: 5643:# endif  // defined(GTEST_EXTRA_DEATH_TEST_CHILD_SETUP_)
        -: 5644:#endif  // GTEST_HAS_DEATH_TEST
        -: 5645:
        1: 5646:  const bool should_shard = ShouldShard(kTestTotalShards, kTestShardIndex,
        -: 5647:                                        in_subprocess_for_death_test);
        -: 5648:
        -: 5649:  // Compares the full test names with the filter to decide which
        -: 5650:  // tests to run.
       1*: 5651:  const bool has_tests_to_run = FilterTests(should_shard
    %%%%%: 5651-block  0
        1: 5651-block  1
        1: 5651-block  2
        -: 5652:                                              ? HONOR_SHARDING_PROTOCOL
        1: 5653:                                              : IGNORE_SHARDING_PROTOCOL) > 0;
        -: 5654:
        -: 5655:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
        1: 5656:  if (GTEST_FLAG(list_tests)) {
        -: 5657:    // This must be called *after* FilterTests() has been called.
    #####: 5658:    ListTestsMatchingFilter();
    %%%%%: 5658-block  0
    #####: 5659:    return true;
        -: 5660:  }
        -: 5661:
        1: 5662:  random_seed_ = GTEST_FLAG(shuffle) ?
        1: 5662-block  0
        1: 5662-block  1
    #####: 5663:      GetRandomSeedFromFlag(GTEST_FLAG(random_seed)) : 0;
    %%%%%: 5663-block  0
        -: 5664:
        -: 5665:  // True if and only if at least one test has failed.
        1: 5666:  bool failed = false;
        -: 5667:
        1: 5668:  TestEventListener* repeater = listeners()->repeater();
        1: 5668-block  0
        -: 5669:
        1: 5670:  start_timestamp_ = GetTimeInMillis();
        1: 5671:  repeater->OnTestProgramStart(*parent_);
        -: 5672:
        -: 5673:  // How many times to repeat the tests?  We don't want to repeat them
        -: 5674:  // when we are inside the subprocess of a death test.
       1*: 5675:  const int repeat = in_subprocess_for_death_test ? 1 : GTEST_FLAG(repeat);
    %%%%%: 5675-block  0
        1: 5675-block  1
        -: 5676:  // Repeats forever if the repeat count is negative.
        1: 5677:  const bool gtest_repeat_forever = repeat < 0;
        2: 5678:  for (int i = 0; gtest_repeat_forever || i != repeat; i++) {
        1: 5678-block  0
        2: 5678-block  1
        2: 5678-block  2
        1: 5678-block  3
        -: 5679:    // We want to preserve failures generated by ad-hoc test
        -: 5680:    // assertions executed before RUN_ALL_TESTS().
        1: 5681:    ClearNonAdHocTestResult();
        1: 5681-block  0
        -: 5682:
        1: 5683:    const TimeInMillis start = GetTimeInMillis();
        -: 5684:
        -: 5685:    // Shuffles test suites and tests if requested.
        1: 5686:    if (has_tests_to_run && GTEST_FLAG(shuffle)) {
        1: 5686-block  0
    #####: 5687:      random()->Reseed(static_cast<uint32_t>(random_seed_));
    %%%%%: 5687-block  0
        -: 5688:      // This should be done before calling OnTestIterationStart(),
        -: 5689:      // such that a test event listener can see the actual test order
        -: 5690:      // in the event.
    #####: 5691:      ShuffleTests();
        -: 5692:    }
        -: 5693:
        -: 5694:    // Tells the unit test event listeners that the tests are about to start.
        1: 5695:    repeater->OnTestIterationStart(*parent_, i);
        1: 5695-block  0
        -: 5696:
        -: 5697:    // Runs each test suite if there is at least one test to run.
        1: 5698:    if (has_tests_to_run) {
        -: 5699:      // Sets up all environments beforehand.
        1: 5700:      repeater->OnEnvironmentsSetUpStart(*parent_);
        1: 5700-block  0
        1: 5701:      ForEach(environments_, SetUpEnvironment);
        1: 5702:      repeater->OnEnvironmentsSetUpEnd(*parent_);
        -: 5703:
        -: 5704:      // Runs the tests only if there was no fatal failure or skip triggered
        -: 5705:      // during global set-up.
        1: 5706:      if (Test::IsSkipped()) {
        -: 5707:        // Emit diagnostics when global set-up calls skip, as it will not be
        -: 5708:        // emitted by default.
        -: 5709:        TestResult& test_result =
    #####: 5710:            *internal::GetUnitTestImpl()->current_test_result();
    %%%%%: 5710-block  0
    #####: 5711:        for (int j = 0; j < test_result.total_part_count(); ++j) {
    %%%%%: 5711-block  0
    %%%%%: 5711-block  1
        -: 5712:          const TestPartResult& test_part_result =
    #####: 5713:              test_result.GetTestPartResult(j);
    %%%%%: 5713-block  0
    #####: 5714:          if (test_part_result.type() == TestPartResult::kSkip) {
    #####: 5715:            const std::string& result = test_part_result.message();
    %%%%%: 5715-block  0
    %%%%%: 5715-block  1
    %%%%%: 5715-block  2
    $$$$$: 5715-block  3
    #####: 5716:            printf("%s\n", result.c_str());
        -: 5717:          }
        -: 5718:        }
    #####: 5719:        fflush(stdout);
    %%%%%: 5719-block  0
        1: 5720:      } else if (!Test::HasFatalFailure()) {
        1: 5720-block  0
        2: 5721:        for (int test_index = 0; test_index < total_test_suite_count();
        1: 5721-block  0
        2: 5721-block  1
        1: 5721-block  2
        -: 5722:             test_index++) {
        1: 5723:          GetMutableSuiteCase(test_index)->Run();
        1: 5723-block  0
       1*: 5724:          if (GTEST_FLAG(fail_fast) &&
    %%%%%: 5724-block  0
        1: 5724-block  1
        1: 5724-block  2
    #####: 5725:              GetMutableSuiteCase(test_index)->Failed()) {
    %%%%%: 5725-block  0
    #####: 5726:            for (int j = test_index + 1; j < total_test_suite_count(); j++) {
    %%%%%: 5726-block  0
    %%%%%: 5726-block  1
    #####: 5727:              GetMutableSuiteCase(j)->Skip();
    %%%%%: 5727-block  0
        -: 5728:            }
    #####: 5729:            break;
    %%%%%: 5729-block  0
        -: 5730:          }
        -: 5731:        }
        -: 5732:      }
        -: 5733:
        -: 5734:      // Tears down all environments in reverse order afterwards.
        1: 5735:      repeater->OnEnvironmentsTearDownStart(*parent_);
        1: 5735-block  0
        1: 5736:      std::for_each(environments_.rbegin(), environments_.rend(),
    $$$$$: 5736-block  0
        -: 5737:                    TearDownEnvironment);
        1: 5738:      repeater->OnEnvironmentsTearDownEnd(*parent_);
        1: 5738-block  0
        -: 5739:    }
        -: 5740:
        1: 5741:    elapsed_time_ = GetTimeInMillis() - start;
        1: 5741-block  0
        -: 5742:
        -: 5743:    // Tells the unit test event listener that the tests have just finished.
        1: 5744:    repeater->OnTestIterationEnd(*parent_, i);
        -: 5745:
        -: 5746:    // Gets the result and clears it.
        1: 5747:    if (!Passed()) {
    #####: 5748:      failed = true;
    %%%%%: 5748-block  0
        -: 5749:    }
        -: 5750:
        -: 5751:    // Restores the original test order after the iteration.  This
        -: 5752:    // allows the user to quickly repro a failure that happens in the
        -: 5753:    // N-th iteration without repeating the first (N - 1) iterations.
        -: 5754:    // This is not enclosed in "if (GTEST_FLAG(shuffle)) { ... }", in
        -: 5755:    // case the user somehow changes the value of the flag somewhere
        -: 5756:    // (it's always safe to unshuffle the tests).
        1: 5757:    UnshuffleTests();
        1: 5757-block  0
        -: 5758:
        1: 5759:    if (GTEST_FLAG(shuffle)) {
        -: 5760:      // Picks a new random seed for each iteration.
    #####: 5761:      random_seed_ = GetNextRandomSeed(random_seed_);
    %%%%%: 5761-block  0
        -: 5762:    }
        -: 5763:  }
        -: 5764:
        1: 5765:  repeater->OnTestProgramEnd(*parent_);
        1: 5765-block  0
        -: 5766:
        1: 5767:  if (!gtest_is_initialized_before_run_all_tests) {
    #####: 5768:    ColoredPrintf(
    %%%%%: 5768-block  0
        -: 5769:        GTestColor::kRed,
        -: 5770:        "\nIMPORTANT NOTICE - DO NOT IGNORE:\n"
        -: 5771:        "This test program did NOT call " GTEST_INIT_GOOGLE_TEST_NAME_
        -: 5772:        "() before calling RUN_ALL_TESTS(). This is INVALID. Soon " GTEST_NAME_
        -: 5773:        " will start to enforce the valid usage. "
        -: 5774:        "Please fix it ASAP, or IT WILL START TO FAIL.\n");  // NOLINT
        -: 5775:#if GTEST_FOR_GOOGLE_
        -: 5776:    ColoredPrintf(GTestColor::kRed,
        -: 5777:                  "For more details, see http://wiki/Main/ValidGUnitMain.\n");
        -: 5778:#endif  // GTEST_FOR_GOOGLE_
        -: 5779:  }
        -: 5780:
        1: 5781:  return !failed;
        1: 5781-block  0
        -: 5782:}
        -: 5783:
        -: 5784:// Reads the GTEST_SHARD_STATUS_FILE environment variable, and creates the file
        -: 5785:// if the variable is present. If a file already exists at this location, this
        -: 5786:// function will write over it. If the variable is present, but the file cannot
        -: 5787:// be created, prints an error and exits.
        1: 5788:void WriteToShardStatusFileIfNeeded() {
        1: 5789:  const char* const test_shard_file = posix::GetEnv(kTestShardStatusFile);
        1: 5789-block  0
        1: 5790:  if (test_shard_file != nullptr) {
    #####: 5791:    FILE* const file = posix::FOpen(test_shard_file, "w");
    %%%%%: 5791-block  0
    #####: 5792:    if (file == nullptr) {
    #####: 5793:      ColoredPrintf(GTestColor::kRed,
    %%%%%: 5793-block  0
        -: 5794:                    "Could not write to the test shard status file \"%s\" "
        -: 5795:                    "specified by the %s environment variable.\n",
        -: 5796:                    test_shard_file, kTestShardStatusFile);
    #####: 5797:      fflush(stdout);
    #####: 5798:      exit(EXIT_FAILURE);
        -: 5799:    }
    #####: 5800:    fclose(file);
    %%%%%: 5800-block  0
        -: 5801:  }
        1: 5802:}
        -: 5803:
        -: 5804:// Checks whether sharding is enabled by examining the relevant
        -: 5805:// environment variable values. If the variables are present,
        -: 5806:// but inconsistent (i.e., shard_index >= total_shards), prints
        -: 5807:// an error and exits. If in_subprocess_for_death_test, sharding is
        -: 5808:// disabled because it must only be applied to the original test
        -: 5809:// process. Otherwise, we could filter out death tests we intended to execute.
        2: 5810:bool ShouldShard(const char* total_shards_env,
        -: 5811:                 const char* shard_index_env,
        -: 5812:                 bool in_subprocess_for_death_test) {
        2: 5813:  if (in_subprocess_for_death_test) {
        2: 5813-block  0
    #####: 5814:    return false;
    %%%%%: 5814-block  0
        -: 5815:  }
        -: 5816:
        2: 5817:  const int32_t total_shards = Int32FromEnvOrDie(total_shards_env, -1);
        2: 5817-block  0
        2: 5818:  const int32_t shard_index = Int32FromEnvOrDie(shard_index_env, -1);
        2: 5818-block  0
        -: 5819:
        2: 5820:  if (total_shards == -1 && shard_index == -1) {
        2: 5820-block  0
        2: 5820-block  1
        2: 5821:    return false;
        2: 5821-block  0
    #####: 5822:  } else if (total_shards == -1 && shard_index != -1) {
    %%%%%: 5822-block  0
    %%%%%: 5822-block  1
    #####: 5823:    const Message msg = Message()
    %%%%%: 5823-block  0
    $$$$$: 5823-block  1
    #####: 5824:      << "Invalid environment variables: you have "
    %%%%%: 5824-block  0
    #####: 5825:      << kTestShardIndex << " = " << shard_index
    %%%%%: 5825-block  0
    %%%%%: 5825-block  1
    %%%%%: 5825-block  2
    #####: 5826:      << ", but have left " << kTestTotalShards << " unset.\n";
    %%%%%: 5826-block  0
    %%%%%: 5826-block  1
    %%%%%: 5826-block  2
    %%%%%: 5826-block  3
    $$$$$: 5826-block  4
    #####: 5827:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
    %%%%%: 5827-block  0
    %%%%%: 5827-block  1
    $$$$$: 5827-block  2
    $$$$$: 5827-block  3
    #####: 5828:    fflush(stdout);
    %%%%%: 5828-block  0
    #####: 5829:    exit(EXIT_FAILURE);
    %%%%%: 5829-block  0
    #####: 5830:  } else if (total_shards != -1 && shard_index == -1) {
    %%%%%: 5830-block  0
    %%%%%: 5830-block  1
    #####: 5831:    const Message msg = Message()
    %%%%%: 5831-block  0
    $$$$$: 5831-block  1
    #####: 5832:      << "Invalid environment variables: you have "
    %%%%%: 5832-block  0
    #####: 5833:      << kTestTotalShards << " = " << total_shards
    %%%%%: 5833-block  0
    %%%%%: 5833-block  1
    %%%%%: 5833-block  2
    #####: 5834:      << ", but have left " << kTestShardIndex << " unset.\n";
    %%%%%: 5834-block  0
    %%%%%: 5834-block  1
    %%%%%: 5834-block  2
    %%%%%: 5834-block  3
    $$$$$: 5834-block  4
    #####: 5835:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
    %%%%%: 5835-block  0
    %%%%%: 5835-block  1
    $$$$$: 5835-block  2
    $$$$$: 5835-block  3
    #####: 5836:    fflush(stdout);
    %%%%%: 5836-block  0
    #####: 5837:    exit(EXIT_FAILURE);
    %%%%%: 5837-block  0
    #####: 5838:  } else if (shard_index < 0 || shard_index >= total_shards) {
    %%%%%: 5838-block  0
    %%%%%: 5838-block  1
    #####: 5839:    const Message msg = Message()
    %%%%%: 5839-block  0
    $$$$$: 5839-block  1
    #####: 5840:      << "Invalid environment variables: we require 0 <= "
    %%%%%: 5840-block  0
    #####: 5841:      << kTestShardIndex << " < " << kTestTotalShards
    %%%%%: 5841-block  0
    %%%%%: 5841-block  1
    %%%%%: 5841-block  2
    #####: 5842:      << ", but you have " << kTestShardIndex << "=" << shard_index
    %%%%%: 5842-block  0
    %%%%%: 5842-block  1
    %%%%%: 5842-block  2
    %%%%%: 5842-block  3
    #####: 5843:      << ", " << kTestTotalShards << "=" << total_shards << ".\n";
    %%%%%: 5843-block  0
    %%%%%: 5843-block  1
    %%%%%: 5843-block  2
    %%%%%: 5843-block  3
    %%%%%: 5843-block  4
    %%%%%: 5843-block  5
    $$$$$: 5843-block  6
    #####: 5844:    ColoredPrintf(GTestColor::kRed, "%s", msg.GetString().c_str());
    %%%%%: 5844-block  0
    %%%%%: 5844-block  1
    $$$$$: 5844-block  2
    $$$$$: 5844-block  3
    #####: 5845:    fflush(stdout);
    %%%%%: 5845-block  0
    #####: 5846:    exit(EXIT_FAILURE);
    %%%%%: 5846-block  0
        -: 5847:  }
        -: 5848:
    #####: 5849:  return total_shards > 1;
    %%%%%: 5849-block  0
        -: 5850:}
        -: 5851:
        -: 5852:// Parses the environment variable var as an Int32. If it is unset,
        -: 5853:// returns default_val. If it is not an Int32, prints an error
        -: 5854:// and aborts.
        4: 5855:int32_t Int32FromEnvOrDie(const char* var, int32_t default_val) {
        4: 5856:  const char* str_val = posix::GetEnv(var);
        4: 5856-block  0
        4: 5857:  if (str_val == nullptr) {
        4: 5858:    return default_val;
        4: 5858-block  0
        -: 5859:  }
        -: 5860:
        -: 5861:  int32_t result;
    #####: 5862:  if (!ParseInt32(Message() << "The value of environment variable " << var,
    %%%%%: 5862-block  0
    %%%%%: 5862-block  1
    %%%%%: 5862-block  2
    %%%%%: 5862-block  3
    %%%%%: 5862-block  4
    $$$$$: 5862-block  5
    $$$$$: 5862-block  6
        -: 5863:                  str_val, &result)) {
    #####: 5864:    exit(EXIT_FAILURE);
    %%%%%: 5864-block  0
        -: 5865:  }
    #####: 5866:  return result;
    %%%%%: 5866-block  0
        -: 5867:}
        -: 5868:
        -: 5869:// Given the total number of shards, the shard index, and the test id,
        -: 5870:// returns true if and only if the test should be run on this shard. The test id
        -: 5871:// is some arbitrary but unique non-negative integer assigned to each test
        -: 5872:// method. Assumes that 0 <= shard_index < total_shards.
    #####: 5873:bool ShouldRunTestOnShard(int total_shards, int shard_index, int test_id) {
    #####: 5874:  return (test_id % total_shards) == shard_index;
    %%%%%: 5874-block  0
        -: 5875:}
        -: 5876:
        -: 5877:// Compares the name of each test with the user-specified filter to
        -: 5878:// decide whether the test should be run, then records the result in
        -: 5879:// each TestSuite and TestInfo object.
        -: 5880:// If shard_tests == true, further filters tests based on sharding
        -: 5881:// variables in the environment - see
        -: 5882:// https://github.com/google/googletest/blob/master/googletest/docs/advanced.md
        -: 5883:// . Returns the number of tests that should run.
        1: 5884:int UnitTestImpl::FilterTests(ReactionToSharding shard_tests) {
        1: 5885:  const int32_t total_shards = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5885-block  0
        1: 5885-block  1
    #####: 5886:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
    %%%%%: 5886-block  0
        1: 5887:  const int32_t shard_index = shard_tests == HONOR_SHARDING_PROTOCOL ?
        1: 5887-block  0
        1: 5887-block  1
    #####: 5888:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
    %%%%%: 5888-block  0
        -: 5889:
        -: 5890:  // num_runnable_tests are the number of tests that will
        -: 5891:  // run across all shards (i.e., match filter and are not disabled).
        -: 5892:  // num_selected_tests are the number of tests to be run on
        -: 5893:  // this shard.
        1: 5894:  int num_runnable_tests = 0;
        1: 5895:  int num_selected_tests = 0;
        2: 5896:  for (auto* test_suite : test_suites_) {
        1: 5896-block  0
        2: 5896-block  1
        1: 5896-block  2
        2: 5897:    const std::string& test_suite_name = test_suite->name();
        1: 5897-block  0
        1: 5897-block  1
    $$$$$: 5897-block  2
        1: 5898:    test_suite->set_should_run(false);
        -: 5899:
       13: 5900:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
       13: 5900-block  0
       12: 5901:      TestInfo* const test_info = test_suite->test_info_list()[j];
       12: 5901-block  0
       24: 5902:      const std::string test_name(test_info->name());
    $$$$$: 5902-block  0
        -: 5903:      // A test is disabled if test suite name or test name matches
        -: 5904:      // kDisableTestFilter.
       12: 5905:      const bool is_disabled = internal::UnitTestOptions::MatchesFilter(
      24*: 5906:                                   test_suite_name, kDisableTestFilter) ||
       12: 5906-block  0
    %%%%%: 5906-block  1
       12: 5906-block  2
       12: 5907:                               internal::UnitTestOptions::MatchesFilter(
       12: 5907-block  0
       12: 5907-block  1
       12: 5908:                                   test_name, kDisableTestFilter);
       12: 5909:      test_info->is_disabled_ = is_disabled;
        -: 5910:
       12: 5911:      const bool matches_filter = internal::UnitTestOptions::FilterMatchesTest(
       12: 5911-block  0
        -: 5912:          test_suite_name, test_name);
       12: 5913:      test_info->matches_filter_ = matches_filter;
        -: 5914:
       12: 5915:      const bool is_runnable =
      12*: 5916:          (GTEST_FLAG(also_run_disabled_tests) || !is_disabled) &&
       12: 5916-block  0
       12: 5916-block  1
       12: 5916-block  2
       12: 5916-block  3
    %%%%%: 5916-block  4
        -: 5917:          matches_filter;
        -: 5918:
        -: 5919:      const bool is_in_another_shard =
      12*: 5920:          shard_tests != IGNORE_SHARDING_PROTOCOL &&
       12: 5920-block  0
    %%%%%: 5920-block  1
       12: 5920-block  2
    #####: 5921:          !ShouldRunTestOnShard(total_shards, shard_index, num_runnable_tests);
    %%%%%: 5921-block  0
       12: 5922:      test_info->is_in_another_shard_ = is_in_another_shard;
      12*: 5923:      const bool is_selected = is_runnable && !is_in_another_shard;
       12: 5923-block  0
       12: 5923-block  1
       12: 5923-block  2
    %%%%%: 5923-block  3
        -: 5924:
       12: 5925:      num_runnable_tests += is_runnable;
       12: 5926:      num_selected_tests += is_selected;
        -: 5927:
       12: 5928:      test_info->should_run_ = is_selected;
      12*: 5929:      test_suite->set_should_run(test_suite->should_run() || is_selected);
       12: 5929-block  0
        1: 5929-block  1
       12: 5929-block  2
    %%%%%: 5929-block  3
       12: 5929-block  4
        -: 5930:    }
        -: 5931:  }
        1: 5932:  return num_selected_tests;
        1: 5932-block  0
        1: 5932-block  1
        -: 5933:}
        -: 5934:
        -: 5935:// Prints the given C-string on a single line by replacing all '\n'
        -: 5936:// characters with string "\\n".  If the output takes more than
        -: 5937:// max_length characters, only prints the first max_length characters
        -: 5938:// and "...".
    #####: 5939:static void PrintOnOneLine(const char* str, int max_length) {
    #####: 5940:  if (str != nullptr) {
    %%%%%: 5940-block  0
    #####: 5941:    for (int i = 0; *str != '\0'; ++str) {
    %%%%%: 5941-block  0
    %%%%%: 5941-block  1
    %%%%%: 5941-block  2
    #####: 5942:      if (i >= max_length) {
    %%%%%: 5942-block  0
    #####: 5943:        printf("...");
    %%%%%: 5943-block  0
    #####: 5944:        break;
        -: 5945:      }
    #####: 5946:      if (*str == '\n') {
    %%%%%: 5946-block  0
    #####: 5947:        printf("\\n");
    %%%%%: 5947-block  0
    #####: 5948:        i += 2;
        -: 5949:      } else {
    #####: 5950:        printf("%c", *str);
    %%%%%: 5950-block  0
    #####: 5951:        ++i;
        -: 5952:      }
        -: 5953:    }
        -: 5954:  }
    #####: 5955:}
        -: 5956:
        -: 5957:// Prints the names of the tests matching the user-specified filter flag.
    #####: 5958:void UnitTestImpl::ListTestsMatchingFilter() {
        -: 5959:  // Print at most this many characters for each type/value parameter.
    #####: 5960:  const int kMaxParamLength = 250;
        -: 5961:
    #####: 5962:  for (auto* test_suite : test_suites_) {
    %%%%%: 5962-block  0
    %%%%%: 5962-block  1
    %%%%%: 5962-block  2
    %%%%%: 5962-block  3
    #####: 5963:    bool printed_test_suite_name = false;
        -: 5964:
    #####: 5965:    for (size_t j = 0; j < test_suite->test_info_list().size(); j++) {
    %%%%%: 5965-block  0
    %%%%%: 5965-block  1
    #####: 5966:      const TestInfo* const test_info = test_suite->test_info_list()[j];
    %%%%%: 5966-block  0
    #####: 5967:      if (test_info->matches_filter_) {
    #####: 5968:        if (!printed_test_suite_name) {
    %%%%%: 5968-block  0
    #####: 5969:          printed_test_suite_name = true;
    #####: 5970:          printf("%s.", test_suite->name());
    %%%%%: 5970-block  0
    #####: 5971:          if (test_suite->type_param() != nullptr) {
    %%%%%: 5971-block  0
    #####: 5972:            printf("  # %s = ", kTypeParamLabel);
    %%%%%: 5972-block  0
        -: 5973:            // We print the type parameter on a single line to make
        -: 5974:            // the output easy to parse by a program.
    #####: 5975:            PrintOnOneLine(test_suite->type_param(), kMaxParamLength);
    %%%%%: 5975-block  0
        -: 5976:          }
    #####: 5977:          printf("\n");
    %%%%%: 5977-block  0
        -: 5978:        }
    #####: 5979:        printf("  %s", test_info->name());
    %%%%%: 5979-block  0
    #####: 5980:        if (test_info->value_param() != nullptr) {
    %%%%%: 5980-block  0
    #####: 5981:          printf("  # %s = ", kValueParamLabel);
    %%%%%: 5981-block  0
        -: 5982:          // We print the value parameter on a single line to make the
        -: 5983:          // output easy to parse by a program.
    #####: 5984:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
    %%%%%: 5984-block  0
        -: 5985:        }
    #####: 5986:        printf("\n");
    %%%%%: 5986-block  0
        -: 5987:      }
        -: 5988:    }
        -: 5989:  }
    #####: 5990:  fflush(stdout);
    %%%%%: 5990-block  0
    %%%%%: 5990-block  1
    #####: 5991:  const std::string& output_format = UnitTestOptions::GetOutputFormat();
    %%%%%: 5991-block  0
    %%%%%: 5991-block  1
    $$$$$: 5991-block  2
    #####: 5992:  if (output_format == "xml" || output_format == "json") {
    %%%%%: 5992-block  0
    %%%%%: 5992-block  1
    %%%%%: 5992-block  2
    %%%%%: 5992-block  3
    %%%%%: 5992-block  4
    #####: 5993:    FILE* fileout = OpenFileForWriting(
    %%%%%: 5993-block  0
    #####: 5994:        UnitTestOptions::GetAbsolutePathToOutputFile().c_str());
    %%%%%: 5994-block  0
    %%%%%: 5994-block  1
    %%%%%: 5994-block  2
    $$$$$: 5994-block  3
    $$$$$: 5994-block  4
    $$$$$: 5994-block  5
    $$$$$: 5994-block  6
    #####: 5995:    std::stringstream stream;
    %%%%%: 5995-block  0
    $$$$$: 5995-block  1
    #####: 5996:    if (output_format == "xml") {
    %%%%%: 5996-block  0
    #####: 5997:      XmlUnitTestResultPrinter(
    %%%%%: 5997-block  0
    $$$$$: 5997-block  1
    $$$$$: 5997-block  2
    #####: 5998:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 5998-block  0
    %%%%%: 5998-block  1
    $$$$$: 5998-block  2
    $$$$$: 5998-block  3
    #####: 5999:          .PrintXmlTestsList(&stream, test_suites_);
    %%%%%: 5999-block  0
    #####: 6000:    } else if (output_format == "json") {
    %%%%%: 6000-block  0
    #####: 6001:      JsonUnitTestResultPrinter(
    %%%%%: 6001-block  0
    $$$$$: 6001-block  1
    $$$$$: 6001-block  2
    #####: 6002:          UnitTestOptions::GetAbsolutePathToOutputFile().c_str())
    %%%%%: 6002-block  0
    %%%%%: 6002-block  1
    $$$$$: 6002-block  2
    $$$$$: 6002-block  3
    #####: 6003:          .PrintJsonTestList(&stream, test_suites_);
    %%%%%: 6003-block  0
        -: 6004:    }
    #####: 6005:    fprintf(fileout, "%s", StringStreamToString(&stream).c_str());
    %%%%%: 6005-block  0
    %%%%%: 6005-block  1
    %%%%%: 6005-block  2
    $$$$$: 6005-block  3
    $$$$$: 6005-block  4
    #####: 6006:    fclose(fileout);
        -: 6007:  }
    #####: 6008:}
        -: 6009:
        -: 6010:// Sets the OS stack trace getter.
        -: 6011://
        -: 6012:// Does nothing if the input and the current OS stack trace getter are
        -: 6013:// the same; otherwise, deletes the old getter and makes the input the
        -: 6014:// current getter.
    #####: 6015:void UnitTestImpl::set_os_stack_trace_getter(
        -: 6016:    OsStackTraceGetterInterface* getter) {
    #####: 6017:  if (os_stack_trace_getter_ != getter) {
    %%%%%: 6017-block  0
    #####: 6018:    delete os_stack_trace_getter_;
    %%%%%: 6018-block  0
    %%%%%: 6018-block  1
    #####: 6019:    os_stack_trace_getter_ = getter;
    %%%%%: 6019-block  0
        -: 6020:  }
    #####: 6021:}
        -: 6022:
        -: 6023:// Returns the current OS stack trace getter if it is not NULL;
        -: 6024:// otherwise, creates an OsStackTraceGetter, makes it the current
        -: 6025:// getter, and returns it.
       62: 6026:OsStackTraceGetterInterface* UnitTestImpl::os_stack_trace_getter() {
       62: 6027:  if (os_stack_trace_getter_ == nullptr) {
       62: 6027-block  0
        -: 6028:#ifdef GTEST_OS_STACK_TRACE_GETTER_
        -: 6029:    os_stack_trace_getter_ = new GTEST_OS_STACK_TRACE_GETTER_;
        -: 6030:#else
        1: 6031:    os_stack_trace_getter_ = new OsStackTraceGetter;
        1: 6031-block  0
        -: 6032:#endif  // GTEST_OS_STACK_TRACE_GETTER_
        -: 6033:  }
        -: 6034:
       62: 6035:  return os_stack_trace_getter_;
       62: 6035-block  0
        -: 6036:}
        -: 6037:
        -: 6038:// Returns the most specific TestResult currently running.
       50: 6039:TestResult* UnitTestImpl::current_test_result() {
       50: 6040:  if (current_test_info_ != nullptr) {
       50: 6040-block  0
       48: 6041:    return &current_test_info_->result_;
       48: 6041-block  0
        -: 6042:  }
        2: 6043:  if (current_test_suite_ != nullptr) {
        2: 6043-block  0
    #####: 6044:    return &current_test_suite_->ad_hoc_test_result_;
    %%%%%: 6044-block  0
        -: 6045:  }
        2: 6046:  return &ad_hoc_test_result_;
        2: 6046-block  0
        -: 6047:}
        -: 6048:
        -: 6049:// Shuffles all test suites, and the tests within each test suite,
        -: 6050:// making sure that death tests are still run first.
    #####: 6051:void UnitTestImpl::ShuffleTests() {
        -: 6052:  // Shuffles the death test suites.
    #####: 6053:  ShuffleRange(random(), 0, last_death_test_suite_ + 1, &test_suite_indices_);
    %%%%%: 6053-block  0
        -: 6054:
        -: 6055:  // Shuffles the non-death test suites.
    #####: 6056:  ShuffleRange(random(), last_death_test_suite_ + 1,
    #####: 6057:               static_cast<int>(test_suites_.size()), &test_suite_indices_);
        -: 6058:
        -: 6059:  // Shuffles the tests inside each test suite.
    #####: 6060:  for (auto& test_suite : test_suites_) {
    %%%%%: 6060-block  0
    %%%%%: 6060-block  1
    %%%%%: 6060-block  2
    #####: 6061:    test_suite->ShuffleTests(random());
        -: 6062:  }
    #####: 6063:}
    %%%%%: 6063-block  0
        -: 6064:
        -: 6065:// Restores the test suites and tests to their order before the first shuffle.
        1: 6066:void UnitTestImpl::UnshuffleTests() {
        2: 6067:  for (size_t i = 0; i < test_suites_.size(); i++) {
        1: 6067-block  0
        2: 6067-block  1
        -: 6068:    // Unshuffles the tests in each test suite.
        1: 6069:    test_suites_[i]->UnshuffleTests();
        1: 6069-block  0
        -: 6070:    // Resets the index of each test suite.
        1: 6071:    test_suite_indices_[i] = static_cast<int>(i);
        -: 6072:  }
        1: 6073:}
        -: 6074:
        -: 6075:// Returns the current OS stack trace as an std::string.
        -: 6076://
        -: 6077:// The maximum number of stack frames to be included is specified by
        -: 6078:// the gtest_stack_trace_depth flag.  The skip_count parameter
        -: 6079:// specifies the number of top frames to be skipped, which doesn't
        -: 6080:// count against the number of frames to be included.
        -: 6081://
        -: 6082:// For example, if Foo() calls Bar(), which in turn calls
        -: 6083:// GetCurrentOsStackTraceExceptTop(..., 1), Foo() will be included in
        -: 6084:// the trace but Bar() and GetCurrentOsStackTraceExceptTop() won't.
    #####: 6085:std::string GetCurrentOsStackTraceExceptTop(UnitTest* /*unit_test*/,
        -: 6086:                                            int skip_count) {
        -: 6087:  // We pass skip_count + 1 to skip this wrapper function in addition
        -: 6088:  // to what the user really wants to skip.
    #####: 6089:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
    %%%%%: 6089-block  0
        -: 6090:}
        -: 6091:
        -: 6092:// Used by the GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_ macro to
        -: 6093:// suppress unreachable code warnings.
        -: 6094:namespace {
        -: 6095:class ClassUniqueToAlwaysTrue {};
        -: 6096:}
        -: 6097:
       25: 6098:bool IsTrue(bool condition) { return condition; }
       25: 6098-block  0
        -: 6099:
    #####: 6100:bool AlwaysTrue() {
        -: 6101:#if GTEST_HAS_EXCEPTIONS
        -: 6102:  // This condition is always false so AlwaysTrue() never actually throws,
        -: 6103:  // but it makes the compiler think that it may throw.
    #####: 6104:  if (IsTrue(false))
    %%%%%: 6104-block  0
    #####: 6105:    throw ClassUniqueToAlwaysTrue();
    %%%%%: 6105-block  0
        -: 6106:#endif  // GTEST_HAS_EXCEPTIONS
    #####: 6107:  return true;
    %%%%%: 6107-block  0
        -: 6108:}
        -: 6109:
        -: 6110:// If *pstr starts with the given prefix, modifies *pstr to be right
        -: 6111:// past the prefix and returns true; otherwise leaves *pstr unchanged
        -: 6112:// and returns false.  None of pstr, *pstr, and prefix can be NULL.
    #####: 6113:bool SkipPrefix(const char* prefix, const char** pstr) {
    #####: 6114:  const size_t prefix_len = strlen(prefix);
    #####: 6115:  if (strncmp(*pstr, prefix, prefix_len) == 0) {
    %%%%%: 6115-block  0
    #####: 6116:    *pstr += prefix_len;
    #####: 6117:    return true;
    %%%%%: 6117-block  0
        -: 6118:  }
    #####: 6119:  return false;
    %%%%%: 6119-block  0
        -: 6120:}
        -: 6121:
        -: 6122:// Parses a string as a command line flag.  The string should have
        -: 6123:// the format "--flag=value".  When def_optional is true, the "=value"
        -: 6124:// part can be omitted.
        -: 6125://
        -: 6126:// Returns the value of the flag, or NULL if the parsing failed.
        4: 6127:static const char* ParseFlagValue(const char* str, const char* flag,
        -: 6128:                                  bool def_optional) {
        -: 6129:  // str and flag must not be NULL.
       4*: 6130:  if (str == nullptr || flag == nullptr) return nullptr;
        4: 6130-block  0
        4: 6130-block  1
    %%%%%: 6130-block  2
        -: 6131:
        -: 6132:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
       12: 6133:  const std::string flag_str = std::string("--") + GTEST_FLAG_PREFIX_ + flag;
        4: 6133-block  0
        4: 6133-block  1
        4: 6133-block  2
        4: 6133-block  3
    $$$$$: 6133-block  4
    $$$$$: 6133-block  5
        4: 6134:  const size_t flag_len = flag_str.length();
        4: 6135:  if (strncmp(str, flag_str.c_str(), flag_len) != 0) return nullptr;
        3: 6135-block  0
        -: 6136:
        -: 6137:  // Skips the flag name.
        1: 6138:  const char* flag_end = str + flag_len;
        -: 6139:
        -: 6140:  // When def_optional is true, it's OK to not have a "=value" part.
       1*: 6141:  if (def_optional && (flag_end[0] == '\0')) {
        1: 6141-block  0
    %%%%%: 6141-block  1
    #####: 6142:    return flag_end;
    %%%%%: 6142-block  0
        -: 6143:  }
        -: 6144:
        -: 6145:  // If def_optional is true and there are more characters after the
        -: 6146:  // flag name, or if def_optional is false, there must be a '=' after
        -: 6147:  // the flag name.
       1*: 6148:  if (flag_end[0] != '=') return nullptr;
        1: 6148-block  0
    %%%%%: 6148-block  1
        -: 6149:
        -: 6150:  // Returns the string after "=".
        1: 6151:  return flag_end + 1;
        1: 6151-block  0
        -: 6152:}
        -: 6153:
        -: 6154:// Parses a string for a bool flag, in the form of either
        -: 6155:// "--flag=value" or "--flag".
        -: 6156://
        -: 6157:// In the former case, the value is taken as true as long as it does
        -: 6158:// not start with '0', 'f', or 'F'.
        -: 6159://
        -: 6160:// In the latter case, the value is taken as true.
        -: 6161://
        -: 6162:// On success, stores the value of the flag in *value, and returns
        -: 6163:// true.  On failure, returns false without changing *value.
        3: 6164:static bool ParseBoolFlag(const char* str, const char* flag, bool* value) {
        -: 6165:  // Gets the value of the flag as a string.
        3: 6166:  const char* const value_str = ParseFlagValue(str, flag, true);
        3: 6166-block  0
        -: 6167:
        -: 6168:  // Aborts if the parsing failed.
        3: 6169:  if (value_str == nullptr) return false;
        3: 6169-block  0
        -: 6170:
        -: 6171:  // Converts the string value to a bool.
    #####: 6172:  *value = !(*value_str == '0' || *value_str == 'f' || *value_str == 'F');
    %%%%%: 6172-block  0
    %%%%%: 6172-block  1
    %%%%%: 6172-block  2
    %%%%%: 6172-block  3
    %%%%%: 6172-block  4
    #####: 6173:  return true;
    %%%%%: 6173-block  0
        -: 6174:}
        -: 6175:
        -: 6176:// Parses a string for an int32_t flag, in the form of "--flag=value".
        -: 6177://
        -: 6178:// On success, stores the value of the flag in *value, and returns
        -: 6179:// true.  On failure, returns false without changing *value.
    #####: 6180:bool ParseInt32Flag(const char* str, const char* flag, int32_t* value) {
        -: 6181:  // Gets the value of the flag as a string.
    #####: 6182:  const char* const value_str = ParseFlagValue(str, flag, false);
    %%%%%: 6182-block  0
        -: 6183:
        -: 6184:  // Aborts if the parsing failed.
    #####: 6185:  if (value_str == nullptr) return false;
    %%%%%: 6185-block  0
        -: 6186:
        -: 6187:  // Sets *value to the value of the flag.
    #####: 6188:  return ParseInt32(Message() << "The value of flag --" << flag,
    %%%%%: 6188-block  0
    %%%%%: 6188-block  1
    %%%%%: 6188-block  2
    %%%%%: 6188-block  3
    $$$$$: 6188-block  4
    #####: 6189:                    value_str, value);
    %%%%%: 6189-block  0
        -: 6190:}
        -: 6191:
        -: 6192:// Parses a string for a string flag, in the form of "--flag=value".
        -: 6193://
        -: 6194:// On success, stores the value of the flag in *value, and returns
        -: 6195:// true.  On failure, returns false without changing *value.
        -: 6196:template <typename String>
        1: 6197:static bool ParseStringFlag(const char* str, const char* flag, String* value) {
        -: 6198:  // Gets the value of the flag as a string.
        1: 6199:  const char* const value_str = ParseFlagValue(str, flag, false);
        1: 6199-block  0
        -: 6200:
        -: 6201:  // Aborts if the parsing failed.
       1*: 6202:  if (value_str == nullptr) return false;
    %%%%%: 6202-block  0
        -: 6203:
        -: 6204:  // Sets *value to the value of the flag.
        1: 6205:  *value = value_str;
        1: 6205-block  0
        1: 6206:  return true;
        -: 6207:}
        -: 6208:
        -: 6209:// Determines whether a string has a prefix that Google Test uses for its
        -: 6210:// flags, i.e., starts with GTEST_FLAG_PREFIX_ or GTEST_FLAG_PREFIX_DASH_.
        -: 6211:// If Google Test detects that a command line flag has its prefix but is not
        -: 6212:// recognized, it will print its help message. Flags starting with
        -: 6213:// GTEST_INTERNAL_PREFIX_ followed by "internal_" are considered Google Test
        -: 6214:// internal flags and do not trigger the help message.
    #####: 6215:static bool HasGoogleTestFlagPrefix(const char* str) {
    #####: 6216:  return (SkipPrefix("--", &str) ||
    %%%%%: 6216-block  0
    #####: 6217:          SkipPrefix("-", &str) ||
    %%%%%: 6217-block  0
    #####: 6218:          SkipPrefix("/", &str)) &&
    %%%%%: 6218-block  0
    #####: 6219:         !SkipPrefix(GTEST_FLAG_PREFIX_ "internal_", &str) &&
    %%%%%: 6219-block  0
    %%%%%: 6219-block  1
    %%%%%: 6219-block  2
    #####: 6220:         (SkipPrefix(GTEST_FLAG_PREFIX_, &str) ||
    %%%%%: 6220-block  0
    #####: 6221:          SkipPrefix(GTEST_FLAG_PREFIX_DASH_, &str));
    %%%%%: 6221-block  0
    %%%%%: 6221-block  1
        -: 6222:}
        -: 6223:
        -: 6224:// Prints a string containing code-encoded text.  The following escape
        -: 6225:// sequences can be used in the string to control the text color:
        -: 6226://
        -: 6227://   @@    prints a single '@' character.
        -: 6228://   @R    changes the color to red.
        -: 6229://   @G    changes the color to green.
        -: 6230://   @Y    changes the color to yellow.
        -: 6231://   @D    changes to the default terminal text color.
        -: 6232://
    #####: 6233:static void PrintColorEncoded(const char* str) {
    #####: 6234:  GTestColor color = GTestColor::kDefault;  // The current color.
    %%%%%: 6234-block  0
        -: 6235:
        -: 6236:  // Conceptually, we split the string into segments divided by escape
        -: 6237:  // sequences.  Then we print one segment at a time.  At the end of
        -: 6238:  // each iteration, the str pointer advances to the beginning of the
        -: 6239:  // next segment.
        -: 6240:  for (;;) {
    #####: 6241:    const char* p = strchr(str, '@');
    #####: 6242:    if (p == nullptr) {
    %%%%%: 6242-block  0
    #####: 6243:      ColoredPrintf(color, "%s", str);
    %%%%%: 6243-block  0
    #####: 6244:      return;
    %%%%%: 6244-block  0
        -: 6245:    }
        -: 6246:
    #####: 6247:    ColoredPrintf(color, "%s", std::string(str, p).c_str());
    %%%%%: 6247-block  0
    %%%%%: 6247-block  1
    %%%%%: 6247-block  2
    $$$$$: 6247-block  3
    $$$$$: 6247-block  4
        -: 6248:
    #####: 6249:    const char ch = p[1];
    #####: 6250:    str = p + 2;
    #####: 6251:    if (ch == '@') {
    #####: 6252:      ColoredPrintf(color, "@");
    %%%%%: 6252-block  0
    #####: 6253:    } else if (ch == 'D') {
    %%%%%: 6253-block  0
    #####: 6254:      color = GTestColor::kDefault;
    %%%%%: 6254-block  0
    #####: 6255:    } else if (ch == 'R') {
    %%%%%: 6255-block  0
    #####: 6256:      color = GTestColor::kRed;
    %%%%%: 6256-block  0
    #####: 6257:    } else if (ch == 'G') {
    %%%%%: 6257-block  0
    #####: 6258:      color = GTestColor::kGreen;
    %%%%%: 6258-block  0
    #####: 6259:    } else if (ch == 'Y') {
    %%%%%: 6259-block  0
    #####: 6260:      color = GTestColor::kYellow;
    %%%%%: 6260-block  0
        -: 6261:    } else {
    #####: 6262:      --str;
    %%%%%: 6262-block  0
        -: 6263:    }
    #####: 6264:  }
    %%%%%: 6264-block  0
        -: 6265:}
        -: 6266:
        -: 6267:static const char kColorEncodedHelpMessage[] =
        -: 6268:    "This program contains tests written using " GTEST_NAME_
        -: 6269:    ". You can use the\n"
        -: 6270:    "following command line flags to control its behavior:\n"
        -: 6271:    "\n"
        -: 6272:    "Test Selection:\n"
        -: 6273:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6274:    "list_tests@D\n"
        -: 6275:    "      List the names of all tests instead of running them. The name of\n"
        -: 6276:    "      TEST(Foo, Bar) is \"Foo.Bar\".\n"
        -: 6277:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6278:    "filter=@YPOSTIVE_PATTERNS"
        -: 6279:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
        -: 6280:    "      Run only the tests whose name matches one of the positive patterns "
        -: 6281:    "but\n"
        -: 6282:    "      none of the negative patterns. '?' matches any single character; "
        -: 6283:    "'*'\n"
        -: 6284:    "      matches any substring; ':' separates two patterns.\n"
        -: 6285:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6286:    "also_run_disabled_tests@D\n"
        -: 6287:    "      Run all disabled tests too.\n"
        -: 6288:    "\n"
        -: 6289:    "Test Execution:\n"
        -: 6290:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6291:    "repeat=@Y[COUNT]@D\n"
        -: 6292:    "      Run the tests repeatedly; use a negative count to repeat forever.\n"
        -: 6293:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6294:    "shuffle@D\n"
        -: 6295:    "      Randomize tests' orders on every iteration.\n"
        -: 6296:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6297:    "random_seed=@Y[NUMBER]@D\n"
        -: 6298:    "      Random number seed to use for shuffling test orders (between 1 and\n"
        -: 6299:    "      99999, or 0 to use a seed based on the current time).\n"
        -: 6300:    "\n"
        -: 6301:    "Test Output:\n"
        -: 6302:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6303:    "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
        -: 6304:    "      Enable/disable colored output. The default is @Gauto@D.\n"
        -: 6305:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6306:    "brief=1@D\n"
        -: 6307:    "      Only print test failures.\n"
        -: 6308:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6309:    "print_time=0@D\n"
        -: 6310:    "      Don't print the elapsed time of each test.\n"
        -: 6311:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6312:    "output=@Y(@Gjson@Y|@Gxml@Y)[@G:@YDIRECTORY_PATH@G" GTEST_PATH_SEP_
        -: 6313:    "@Y|@G:@YFILE_PATH]@D\n"
        -: 6314:    "      Generate a JSON or XML report in the given directory or with the "
        -: 6315:    "given\n"
        -: 6316:    "      file name. @YFILE_PATH@D defaults to @Gtest_detail.xml@D.\n"
        -: 6317:# if GTEST_CAN_STREAM_RESULTS_
        -: 6318:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6319:    "stream_result_to=@YHOST@G:@YPORT@D\n"
        -: 6320:    "      Stream test results to the given server.\n"
        -: 6321:# endif  // GTEST_CAN_STREAM_RESULTS_
        -: 6322:    "\n"
        -: 6323:    "Assertion Behavior:\n"
        -: 6324:# if GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6325:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6326:    "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
        -: 6327:    "      Set the default death test style.\n"
        -: 6328:# endif  // GTEST_HAS_DEATH_TEST && !GTEST_OS_WINDOWS
        -: 6329:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6330:    "break_on_failure@D\n"
        -: 6331:    "      Turn assertion failures into debugger break-points.\n"
        -: 6332:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6333:    "throw_on_failure@D\n"
        -: 6334:    "      Turn assertion failures into C++ exceptions for use by an external\n"
        -: 6335:    "      test framework.\n"
        -: 6336:    "  @G--" GTEST_FLAG_PREFIX_
        -: 6337:    "catch_exceptions=0@D\n"
        -: 6338:    "      Do not report exceptions as test failures. Instead, allow them\n"
        -: 6339:    "      to crash the program or throw a pop-up (on Windows).\n"
        -: 6340:    "\n"
        -: 6341:    "Except for @G--" GTEST_FLAG_PREFIX_
        -: 6342:    "list_tests@D, you can alternatively set "
        -: 6343:    "the corresponding\n"
        -: 6344:    "environment variable of a flag (all letters in upper-case). For example, "
        -: 6345:    "to\n"
        -: 6346:    "disable colored text output, you can either specify "
        -: 6347:    "@G--" GTEST_FLAG_PREFIX_
        -: 6348:    "color=no@D or set\n"
        -: 6349:    "the @G" GTEST_FLAG_PREFIX_UPPER_
        -: 6350:    "COLOR@D environment variable to @Gno@D.\n"
        -: 6351:    "\n"
        -: 6352:    "For more information, please read the " GTEST_NAME_
        -: 6353:    " documentation at\n"
        -: 6354:    "@G" GTEST_PROJECT_URL_ "@D. If you find a bug in " GTEST_NAME_
        -: 6355:    "\n"
        -: 6356:    "(not one in your own code or tests), please report it to\n"
        -: 6357:    "@G<" GTEST_DEV_EMAIL_ ">@D.\n";
        -: 6358:
        1: 6359:static bool ParseGoogleTestFlag(const char* const arg) {
        1: 6360:  return ParseBoolFlag(arg, kAlsoRunDisabledTestsFlag,
        1: 6360-block  0
        1: 6361:                       &GTEST_FLAG(also_run_disabled_tests)) ||
        1: 6362:         ParseBoolFlag(arg, kBreakOnFailureFlag,
        1: 6362-block  0
        1: 6363:                       &GTEST_FLAG(break_on_failure)) ||
        1: 6364:         ParseBoolFlag(arg, kCatchExceptionsFlag,
        1: 6364-block  0
        1: 6365:                       &GTEST_FLAG(catch_exceptions)) ||
       1*: 6366:         ParseStringFlag(arg, kColorFlag, &GTEST_FLAG(color)) ||
        1: 6366-block  0
    #####: 6367:         ParseStringFlag(arg, kDeathTestStyleFlag,
    %%%%%: 6367-block  0
    #####: 6368:                         &GTEST_FLAG(death_test_style)) ||
    #####: 6369:         ParseBoolFlag(arg, kDeathTestUseFork,
    %%%%%: 6369-block  0
    #####: 6370:                       &GTEST_FLAG(death_test_use_fork)) ||
    #####: 6371:         ParseBoolFlag(arg, kFailFast, &GTEST_FLAG(fail_fast)) ||
    %%%%%: 6371-block  0
    #####: 6372:         ParseStringFlag(arg, kFilterFlag, &GTEST_FLAG(filter)) ||
    %%%%%: 6372-block  0
    #####: 6373:         ParseStringFlag(arg, kInternalRunDeathTestFlag,
    %%%%%: 6373-block  0
    #####: 6374:                         &GTEST_FLAG(internal_run_death_test)) ||
    #####: 6375:         ParseBoolFlag(arg, kListTestsFlag, &GTEST_FLAG(list_tests)) ||
    %%%%%: 6375-block  0
    #####: 6376:         ParseStringFlag(arg, kOutputFlag, &GTEST_FLAG(output)) ||
    %%%%%: 6376-block  0
    #####: 6377:         ParseBoolFlag(arg, kBriefFlag, &GTEST_FLAG(brief)) ||
    %%%%%: 6377-block  0
    #####: 6378:         ParseBoolFlag(arg, kPrintTimeFlag, &GTEST_FLAG(print_time)) ||
    %%%%%: 6378-block  0
    #####: 6379:         ParseBoolFlag(arg, kPrintUTF8Flag, &GTEST_FLAG(print_utf8)) ||
    %%%%%: 6379-block  0
    #####: 6380:         ParseInt32Flag(arg, kRandomSeedFlag, &GTEST_FLAG(random_seed)) ||
    %%%%%: 6380-block  0
    #####: 6381:         ParseInt32Flag(arg, kRepeatFlag, &GTEST_FLAG(repeat)) ||
    %%%%%: 6381-block  0
    #####: 6382:         ParseBoolFlag(arg, kShuffleFlag, &GTEST_FLAG(shuffle)) ||
    %%%%%: 6382-block  0
    #####: 6383:         ParseInt32Flag(arg, kStackTraceDepthFlag,
    %%%%%: 6383-block  0
    #####: 6384:                        &GTEST_FLAG(stack_trace_depth)) ||
    #####: 6385:         ParseStringFlag(arg, kStreamResultToFlag,
    %%%%%: 6385-block  0
       2*: 6386:                         &GTEST_FLAG(stream_result_to)) ||
        1: 6386-block  0
    %%%%%: 6386-block  1
       1*: 6387:         ParseBoolFlag(arg, kThrowOnFailureFlag, &GTEST_FLAG(throw_on_failure));
    %%%%%: 6387-block  0
        1: 6387-block  1
        -: 6388:}
        -: 6389:
        -: 6390:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6391:static void LoadFlagsFromFile(const std::string& path) {
    #####: 6392:  FILE* flagfile = posix::FOpen(path.c_str(), "r");
    %%%%%: 6392-block  0
    #####: 6393:  if (!flagfile) {
    %%%%%: 6393-block  0
    #####: 6394:    GTEST_LOG_(FATAL) << "Unable to open file \"" << GTEST_FLAG(flagfile)
    %%%%%: 6394-block  0
    %%%%%: 6394-block  1
    %%%%%: 6394-block  2
    $$$$$: 6394-block  3
    $$$$$: 6394-block  4
    #####: 6395:                      << "\"";
    %%%%%: 6395-block  0
    %%%%%: 6395-block  1
        -: 6396:  }
    #####: 6397:  std::string contents(ReadEntireFile(flagfile));
    %%%%%: 6397-block  0
    $$$$$: 6397-block  1
    #####: 6398:  posix::FClose(flagfile);
    %%%%%: 6398-block  0
    #####: 6399:  std::vector<std::string> lines;
    %%%%%: 6399-block  0
    %%%%%: 6399-block  1
    $$$$$: 6399-block  2
    #####: 6400:  SplitString(contents, '\n', &lines);
    #####: 6401:  for (size_t i = 0; i < lines.size(); ++i) {
    %%%%%: 6401-block  0
    %%%%%: 6401-block  1
    %%%%%: 6401-block  2
    #####: 6402:    if (lines[i].empty())
    %%%%%: 6402-block  0
    #####: 6403:      continue;
    %%%%%: 6403-block  0
    #####: 6404:    if (!ParseGoogleTestFlag(lines[i].c_str()))
    %%%%%: 6404-block  0
    %%%%%: 6404-block  1
    #####: 6405:      g_help_flag = true;
    %%%%%: 6405-block  0
        -: 6406:  }
    #####: 6407:}
        -: 6408:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
        -: 6409:
        -: 6410:// Parses the command line for Google Test flags, without initializing
        -: 6411:// other parts of Google Test.  The type parameter CharType can be
        -: 6412:// instantiated to either char or wchar_t.
        -: 6413:template <typename CharType>
       1*: 6414:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
       2*: 6415:  for (int i = 1; i < *argc; i++) {
       2*: 6416:    const std::string arg_string = StreamableToString(argv[i]);
       1*: 6417:    const char* const arg = arg_string.c_str();
        -: 6418:
        -: 6419:    using internal::ParseBoolFlag;
        -: 6420:    using internal::ParseInt32Flag;
        -: 6421:    using internal::ParseStringFlag;
        -: 6422:
       1*: 6423:    bool remove_flag = false;
       1*: 6424:    if (ParseGoogleTestFlag(arg)) {
       1*: 6425:      remove_flag = true;
        -: 6426:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6427:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    #####: 6428:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    #####: 6429:      remove_flag = true;
        -: 6430:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6431:    } else if (arg_string == "--help" || arg_string == "-h" ||
    #####: 6432:               arg_string == "-?" || arg_string == "/?" ||
    #####: 6433:               HasGoogleTestFlagPrefix(arg)) {
        -: 6434:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6435:      // internal ones) trigger help display.
    #####: 6436:      g_help_flag = true;
        -: 6437:    }
        -: 6438:
       1*: 6439:    if (remove_flag) {
        -: 6440:      // Shift the remainder of the argv list left by one.  Note
        -: 6441:      // that argv has (*argc + 1) elements, the last one always being
        -: 6442:      // NULL.  The following loop moves the trailing NULL element as
        -: 6443:      // well.
       2*: 6444:      for (int j = i; j != *argc; j++) {
       1*: 6445:        argv[j] = argv[j + 1];
        -: 6446:      }
        -: 6447:
        -: 6448:      // Decrements the argument count.
       1*: 6449:      (*argc)--;
        -: 6450:
        -: 6451:      // We also need to decrement the iterator as we just removed
        -: 6452:      // an element.
       1*: 6453:      i--;
        -: 6454:    }
        -: 6455:  }
        -: 6456:
       1*: 6457:  if (g_help_flag) {
        -: 6458:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6459:    // latter may not be called at all if the user is using Google
        -: 6460:    // Test with another testing framework.
    #####: 6461:    PrintColorEncoded(kColorEncodedHelpMessage);
        -: 6462:  }
       1*: 6463:}
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIwEEvPiPPT_:
    #####: 6414:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
    #####: 6415:  for (int i = 1; i < *argc; i++) {
    %%%%%: 6415-block  0
    %%%%%: 6415-block  1
    #####: 6416:    const std::string arg_string = StreamableToString(argv[i]);
    %%%%%: 6416-block  0
    %%%%%: 6416-block  1
    $$$$$: 6416-block  2
    #####: 6417:    const char* const arg = arg_string.c_str();
    %%%%%: 6417-block  0
        -: 6418:
        -: 6419:    using internal::ParseBoolFlag;
        -: 6420:    using internal::ParseInt32Flag;
        -: 6421:    using internal::ParseStringFlag;
        -: 6422:
    #####: 6423:    bool remove_flag = false;
    #####: 6424:    if (ParseGoogleTestFlag(arg)) {
    %%%%%: 6424-block  0
    #####: 6425:      remove_flag = true;
    %%%%%: 6425-block  0
        -: 6426:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6427:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 6427-block  0
    %%%%%: 6427-block  1
    #####: 6428:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 6428-block  0
    #####: 6429:      remove_flag = true;
    %%%%%: 6429-block  0
        -: 6430:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6431:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6431-block  0
    %%%%%: 6431-block  1
    #####: 6432:               arg_string == "-?" || arg_string == "/?" ||
    %%%%%: 6432-block  0
    %%%%%: 6432-block  1
    %%%%%: 6432-block  2
    %%%%%: 6432-block  3
    %%%%%: 6432-block  4
    #####: 6433:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6433-block  0
        -: 6434:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6435:      // internal ones) trigger help display.
    #####: 6436:      g_help_flag = true;
    %%%%%: 6436-block  0
        -: 6437:    }
        -: 6438:
    #####: 6439:    if (remove_flag) {
    %%%%%: 6439-block  0
        -: 6440:      // Shift the remainder of the argv list left by one.  Note
        -: 6441:      // that argv has (*argc + 1) elements, the last one always being
        -: 6442:      // NULL.  The following loop moves the trailing NULL element as
        -: 6443:      // well.
    #####: 6444:      for (int j = i; j != *argc; j++) {
    %%%%%: 6444-block  0
    %%%%%: 6444-block  1
    #####: 6445:        argv[j] = argv[j + 1];
    %%%%%: 6445-block  0
        -: 6446:      }
        -: 6447:
        -: 6448:      // Decrements the argument count.
    #####: 6449:      (*argc)--;
        -: 6450:
        -: 6451:      // We also need to decrement the iterator as we just removed
        -: 6452:      // an element.
    #####: 6453:      i--;
    %%%%%: 6453-block  0
        -: 6454:    }
        -: 6455:  }
        -: 6456:
    #####: 6457:  if (g_help_flag) {
    %%%%%: 6457-block  0
        -: 6458:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6459:    // latter may not be called at all if the user is using Google
        -: 6460:    // Test with another testing framework.
    #####: 6461:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6461-block  0
        -: 6462:  }
    #####: 6463:}
    %%%%%: 6463-block  0
------------------
_ZN7testing8internal28ParseGoogleTestFlagsOnlyImplIcEEvPiPPT_:
        1: 6414:void ParseGoogleTestFlagsOnlyImpl(int* argc, CharType** argv) {
        2: 6415:  for (int i = 1; i < *argc; i++) {
        1: 6415-block  0
        2: 6415-block  1
        2: 6416:    const std::string arg_string = StreamableToString(argv[i]);
        1: 6416-block  0
        1: 6416-block  1
    $$$$$: 6416-block  2
        1: 6417:    const char* const arg = arg_string.c_str();
        1: 6417-block  0
        -: 6418:
        -: 6419:    using internal::ParseBoolFlag;
        -: 6420:    using internal::ParseInt32Flag;
        -: 6421:    using internal::ParseStringFlag;
        -: 6422:
        1: 6423:    bool remove_flag = false;
        1: 6424:    if (ParseGoogleTestFlag(arg)) {
        1: 6424-block  0
        1: 6425:      remove_flag = true;
        1: 6425-block  0
        -: 6426:#if GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6427:    } else if (ParseStringFlag(arg, kFlagfileFlag, &GTEST_FLAG(flagfile))) {
    %%%%%: 6427-block  0
    %%%%%: 6427-block  1
    #####: 6428:      LoadFlagsFromFile(GTEST_FLAG(flagfile));
    %%%%%: 6428-block  0
    #####: 6429:      remove_flag = true;
    %%%%%: 6429-block  0
        -: 6430:#endif  // GTEST_USE_OWN_FLAGFILE_FLAG_
    #####: 6431:    } else if (arg_string == "--help" || arg_string == "-h" ||
    %%%%%: 6431-block  0
    %%%%%: 6431-block  1
    #####: 6432:               arg_string == "-?" || arg_string == "/?" ||
    %%%%%: 6432-block  0
    %%%%%: 6432-block  1
    %%%%%: 6432-block  2
    %%%%%: 6432-block  3
    %%%%%: 6432-block  4
    #####: 6433:               HasGoogleTestFlagPrefix(arg)) {
    %%%%%: 6433-block  0
        -: 6434:      // Both help flag and unrecognized Google Test flags (excluding
        -: 6435:      // internal ones) trigger help display.
    #####: 6436:      g_help_flag = true;
    %%%%%: 6436-block  0
        -: 6437:    }
        -: 6438:
        1: 6439:    if (remove_flag) {
        1: 6439-block  0
        -: 6440:      // Shift the remainder of the argv list left by one.  Note
        -: 6441:      // that argv has (*argc + 1) elements, the last one always being
        -: 6442:      // NULL.  The following loop moves the trailing NULL element as
        -: 6443:      // well.
        2: 6444:      for (int j = i; j != *argc; j++) {
        1: 6444-block  0
        2: 6444-block  1
        1: 6445:        argv[j] = argv[j + 1];
        1: 6445-block  0
        -: 6446:      }
        -: 6447:
        -: 6448:      // Decrements the argument count.
        1: 6449:      (*argc)--;
        -: 6450:
        -: 6451:      // We also need to decrement the iterator as we just removed
        -: 6452:      // an element.
        1: 6453:      i--;
        1: 6453-block  0
        -: 6454:    }
        -: 6455:  }
        -: 6456:
        1: 6457:  if (g_help_flag) {
        1: 6457-block  0
        -: 6458:    // We print the help here instead of in RUN_ALL_TESTS(), as the
        -: 6459:    // latter may not be called at all if the user is using Google
        -: 6460:    // Test with another testing framework.
    #####: 6461:    PrintColorEncoded(kColorEncodedHelpMessage);
    %%%%%: 6461-block  0
        -: 6462:  }
        1: 6463:}
        1: 6463-block  0
------------------
        -: 6464:
        -: 6465:// Parses the command line for Google Test flags, without initializing
        -: 6466:// other parts of Google Test.
        1: 6467:void ParseGoogleTestFlagsOnly(int* argc, char** argv) {
        1: 6468:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
        1: 6468-block  0
        -: 6469:
        -: 6470:  // Fix the value of *_NSGetArgc() on macOS, but if and only if
        -: 6471:  // *_NSGetArgv() == argv
        -: 6472:  // Only applicable to char** version of argv
        -: 6473:#if GTEST_OS_MAC
        -: 6474:#ifndef GTEST_OS_IOS
        -: 6475:  if (*_NSGetArgv() == argv) {
        -: 6476:    *_NSGetArgc() = *argc;
        -: 6477:  }
        -: 6478:#endif
        -: 6479:#endif
        1: 6480:}
    #####: 6481:void ParseGoogleTestFlagsOnly(int* argc, wchar_t** argv) {
    #####: 6482:  ParseGoogleTestFlagsOnlyImpl(argc, argv);
    %%%%%: 6482-block  0
    #####: 6483:}
        -: 6484:
        -: 6485:// The internal implementation of InitGoogleTest().
        -: 6486://
        -: 6487:// The type parameter CharType can be instantiated to either char or
        -: 6488:// wchar_t.
        -: 6489:template <typename CharType>
       1*: 6490:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6491:  // We don't want to run the initialization code twice.
       1*: 6492:  if (GTestIsInitialized()) return;
        -: 6493:
       1*: 6494:  if (*argc <= 0) return;
        -: 6495:
       1*: 6496:  g_argvs.clear();
       3*: 6497:  for (int i = 0; i != *argc; i++) {
       2*: 6498:    g_argvs.push_back(StreamableToString(argv[i]));
        -: 6499:  }
        -: 6500:
        -: 6501:#if GTEST_HAS_ABSL
        -: 6502:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6503:#endif  // GTEST_HAS_ABSL
        -: 6504:
       1*: 6505:  ParseGoogleTestFlagsOnly(argc, argv);
       1*: 6506:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6507:}
------------------
_ZN7testing8internal18InitGoogleTestImplIwEEvPiPPT_:
    #####: 6490:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6491:  // We don't want to run the initialization code twice.
    #####: 6492:  if (GTestIsInitialized()) return;
    %%%%%: 6492-block  0
    %%%%%: 6492-block  1
        -: 6493:
    #####: 6494:  if (*argc <= 0) return;
    %%%%%: 6494-block  0
    %%%%%: 6494-block  1
        -: 6495:
    #####: 6496:  g_argvs.clear();
    %%%%%: 6496-block  0
    #####: 6497:  for (int i = 0; i != *argc; i++) {
    %%%%%: 6497-block  0
    #####: 6498:    g_argvs.push_back(StreamableToString(argv[i]));
    %%%%%: 6498-block  0
    %%%%%: 6498-block  1
    $$$$$: 6498-block  2
        -: 6499:  }
        -: 6500:
        -: 6501:#if GTEST_HAS_ABSL
        -: 6502:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6503:#endif  // GTEST_HAS_ABSL
        -: 6504:
    #####: 6505:  ParseGoogleTestFlagsOnly(argc, argv);
    %%%%%: 6505-block  0
    #####: 6506:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6507:}
------------------
_ZN7testing8internal18InitGoogleTestImplIcEEvPiPPT_:
        1: 6490:void InitGoogleTestImpl(int* argc, CharType** argv) {
        -: 6491:  // We don't want to run the initialization code twice.
       1*: 6492:  if (GTestIsInitialized()) return;
        1: 6492-block  0
    %%%%%: 6492-block  1
        -: 6493:
       1*: 6494:  if (*argc <= 0) return;
        1: 6494-block  0
    %%%%%: 6494-block  1
        -: 6495:
        1: 6496:  g_argvs.clear();
        1: 6496-block  0
        3: 6497:  for (int i = 0; i != *argc; i++) {
        3: 6497-block  0
        2: 6498:    g_argvs.push_back(StreamableToString(argv[i]));
        2: 6498-block  0
        2: 6498-block  1
    $$$$$: 6498-block  2
        -: 6499:  }
        -: 6500:
        -: 6501:#if GTEST_HAS_ABSL
        -: 6502:  absl::InitializeSymbolizer(g_argvs[0].c_str());
        -: 6503:#endif  // GTEST_HAS_ABSL
        -: 6504:
        1: 6505:  ParseGoogleTestFlagsOnly(argc, argv);
        1: 6505-block  0
        1: 6506:  GetUnitTestImpl()->PostFlagParsingInit();
        -: 6507:}
------------------
        -: 6508:
        -: 6509:}  // namespace internal
        -: 6510:
        -: 6511:// Initializes Google Test.  This must be called before calling
        -: 6512:// RUN_ALL_TESTS().  In particular, it parses a command line for the
        -: 6513:// flags that Google Test recognizes.  Whenever a Google Test flag is
        -: 6514:// seen, it is removed from argv, and *argc is decremented.
        -: 6515://
        -: 6516:// No value is returned.  Instead, the Google Test flag variables are
        -: 6517:// updated.
        -: 6518://
        -: 6519:// Calling the function for the second time has no user-visible effect.
        1: 6520:void InitGoogleTest(int* argc, char** argv) {
        -: 6521:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6522:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6523:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6524:  internal::InitGoogleTestImpl(argc, argv);
        1: 6524-block  0
        -: 6525:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        1: 6526:}
        -: 6527:
        -: 6528:// This overloaded version can be used in Windows programs compiled in
        -: 6529:// UNICODE mode.
    #####: 6530:void InitGoogleTest(int* argc, wchar_t** argv) {
        -: 6531:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6532:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(argc, argv);
        -: 6533:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6534:  internal::InitGoogleTestImpl(argc, argv);
    %%%%%: 6534-block  0
        -: 6535:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6536:}
        -: 6537:
        -: 6538:// This overloaded version can be used on Arduino/embedded platforms where
        -: 6539:// there is no argc/argv.
    #####: 6540:void InitGoogleTest() {
        -: 6541:  // Since Arduino doesn't have a command line, fake out the argc/argv arguments
    #####: 6542:  int argc = 1;
    #####: 6543:  const auto arg0 = "dummy";
    #####: 6544:  char* argv0 = const_cast<char*>(arg0);
    #####: 6545:  char** argv = &argv0;
        -: 6546:
        -: 6547:#if defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
        -: 6548:  GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_(&argc, argv);
        -: 6549:#else  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6550:  internal::InitGoogleTestImpl(&argc, argv);
    %%%%%: 6550-block  0
        -: 6551:#endif  // defined(GTEST_CUSTOM_INIT_GOOGLE_TEST_FUNCTION_)
    #####: 6552:}
    %%%%%: 6552-block  0
        -: 6553:
    #####: 6554:std::string TempDir() {
        -: 6555:#if defined(GTEST_CUSTOM_TEMPDIR_FUNCTION_)
        -: 6556:  return GTEST_CUSTOM_TEMPDIR_FUNCTION_();
        -: 6557:#elif GTEST_OS_WINDOWS_MOBILE
        -: 6558:  return "\\temp\\";
        -: 6559:#elif GTEST_OS_WINDOWS
        -: 6560:  const char* temp_dir = internal::posix::GetEnv("TEMP");
        -: 6561:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6562:    return "\\temp\\";
        -: 6563:  } else if (temp_dir[strlen(temp_dir) - 1] == '\\') {
        -: 6564:    return temp_dir;
        -: 6565:  } else {
        -: 6566:    return std::string(temp_dir) + "\\";
        -: 6567:  }
        -: 6568:#elif GTEST_OS_LINUX_ANDROID
        -: 6569:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6570:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6571:    return "/data/local/tmp/";
        -: 6572:  } else {
        -: 6573:    return temp_dir;
        -: 6574:  }
        -: 6575:#elif GTEST_OS_LINUX
        -: 6576:  const char* temp_dir = internal::posix::GetEnv("TEST_TMPDIR");
        -: 6577:  if (temp_dir == nullptr || temp_dir[0] == '\0') {
        -: 6578:    return "/tmp/";
        -: 6579:  } else {
        -: 6580:    return temp_dir;
        -: 6581:  }
        -: 6582:#else
    #####: 6583:  return "/tmp/";
    %%%%%: 6583-block  0
    %%%%%: 6583-block  1
        -: 6584:#endif  // GTEST_OS_WINDOWS_MOBILE
        -: 6585:}
        -: 6586:
        -: 6587:// Class ScopedTrace
        -: 6588:
        -: 6589:// Pushes the given source file location and message onto a per-thread
        -: 6590:// trace stack maintained by Google Test.
    #####: 6591:void ScopedTrace::PushTrace(const char* file, int line, std::string message) {
    #####: 6592:  internal::TraceInfo trace;
    %%%%%: 6592-block  0
    %%%%%: 6592-block  1
    $$$$$: 6592-block  2
    #####: 6593:  trace.file = file;
    #####: 6594:  trace.line = line;
    #####: 6595:  trace.message.swap(message);
        -: 6596:
    #####: 6597:  UnitTest::GetInstance()->PushGTestTrace(trace);
    %%%%%: 6597-block  0
    #####: 6598:}
        -: 6599:
        -: 6600:// Pops the info pushed by the c'tor.
    #####: 6601:ScopedTrace::~ScopedTrace()
        -: 6602:    GTEST_LOCK_EXCLUDED_(&UnitTest::mutex_) {
    #####: 6603:  UnitTest::GetInstance()->PopGTestTrace();
    %%%%%: 6603-block  0
    #####: 6604:}
        -: 6605:
        -: 6606:}  // namespace testing
